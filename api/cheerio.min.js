<!DOCTYPE html>
<html lang="zh-CN" class="theme-">
<head data-suburl="">
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<title>Yoursmile7/TVBox: All content is for learning only, please do not use it for illegal purposes. - js/lib/cheerio.min.js at master - Agit</title>
	<meta name="theme-color" content="#6cc644">
	<meta name="author" content="Yoursmile7" />
	<meta name="description" content="TVBox - All content is for learning only, please do not use it for illegal purposes." />
	<meta name="keywords" content="go,git,self-hosted,gitea">
	<meta name="referrer" content="no-referrer" />
	<meta name="_csrf" content="ygSs7KcUXfe_IIVCLnRNbRKBYOs6MTcwNDk2MTQwMDgyNTYyMTYzNw" />
	<meta name="_suburl" content="" />
	
	
	

	<script>
		window.config = {
			AppVer: 'gitea模板还原\u002b138-g943c8c71f',
			AppSubUrl: '',
			StaticUrlPrefix: '',
			UseServiceWorker:  true ,
			csrf: 'ygSs7KcUXfe_IIVCLnRNbRKBYOs6MTcwNDk2MTQwMDgyNTYyMTYzNw',
			HighlightJS: false,
			SimpleMDE: false,
			Tribute: false,
			U2F: false,
			Heatmap: false,
			heatmapUser: null,
			NotificationSettings: {
				MinTimeout:  10000 ,
				TimeoutStep:   10000 ,
				MaxTimeout:  60000 ,
				EventSourceUpdateTime:  10000 ,
			},
			PageIsProjects: false,
      
		};
	</script>
	<link rel="icon" href="/img/favicon.svg" type="image/svg+xml">
	<link rel="alternate icon" href="/img/favicon.png" type="image/png">
	<link rel="mask-icon" href="/img/agit-safari.svg" color="#609926">
	<link rel="fluid-icon" href="/img/agit-lg.png" title="Agit">


	<link rel="stylesheet" href="/css/index.css?v=220846678a86246c9d7e7c46c21f20c2">
	<noscript>
		<style>
      .dropdown:hover > .menu { display: block; }
      .ui.secondary.menu .dropdown.item > .menu { margin-top: 0; }
		</style>
	</noscript>
	<style class="list-search-style"></style>

	
		<meta property="og:title" content="TVBox" />
		<meta property="og:url" content="https://agit.ai/Yoursmile7/TVBox" />
		
			<meta property="og:description" content="All content is for learning only, please do not use it for illegal purposes." />
		
	
	<meta property="og:type" content="object" />
	
		<meta property="og:image" content="https://agit.ai/user/avatar/Yoursmile7/-1" />
	

<meta property="og:site_name" content="Agit" />


<link rel="stylesheet" href="/vendor/plugins/xterm/xterm.css?v=220846678a86246c9d7e7c46c21f20c2" />


</head>
<body>
	

	<div class="full height">
		<noscript>使用 JavaScript能使本网站更好的工作。</noscript>

		

		
			
			<div class="ui top secondary stackable main menu following bar light" style="background: #242628; height: 52px;">
				
<div class="ui container z-max" id="navbar" v-cloak style="position:fixed;">
	<div class="i-flex i-align-center i-justify-between logo-img" style="margin-right:26px;height:52px;">
		<a href="/">
			<img class="share-nav-logo" src="/img/logo/nav-logo.svg">
		</a>
		<div class="ui basic icon button mobile-only" id="navbar-expand-toggle">
			<i class="sidebar icon"></i>
		</div>
	</div>

	
		<a class="item " href="/">首页</a>
		<a class="item" href="http://help.agit.ai" id="help-header-a" target="_blank">帮助</a>
		<a class="mobile-only item " href="/explore/repos">探索</a>
		<div class="ui input d-relative navbar-search not-mobile" :class="{active:menuVisible}">
			<i class="icon iconfont icon-search"></i>
			<input v-model="searchName" placeholder="搜索" type="text" autocomplete="off"  @focus="menuVisible = true">
			<div v-show="searchName.trim() && menuVisible" class="ui segment transition z-menu" @focus="menuVisible = true">
				<div class="ui list" @click="handleSearch('repos')">
					<span class="mr-md">${searchName}</span> <span class="i-text-right">仓库</span>
				</div>
				<div class="ui list" @click="handleSearch('users')">
					<span class="mr-md">${searchName}</span> <span class="i-text-right">用户</span>
				</div>
				<div class="ui list" @click="handleSearch('organizations')">
					<span class="mr-md">${searchName}</span> <span class="i-text-right">组织</span>
				</div>
			</div>

		</div>
	
	

	


	

<div class="right stackable menu header-right">
	
	<div class="ui dropdown jump item poping up active visible">
		<i class="iconfont mr-3xs font-size-2xl" :class='{"icon-lang-zh2en":lan!=="en-US","icon-lang-en2zh":lan==="en-US"}'></i>
		<span id="footerLang" class="hidden">简体中文</span>
		<i class="caret down icon font-size-sm"></i>
		<div class="menu">
			
			<span lang="zh-CN" class="item active selected" onclick="handleLanguage(&#34;zh-CN&#34;)">简体中文</span>
			
			<span lang="en-US" class="item " onclick="handleLanguage(&#34;en-US&#34;)">English</span>
			
		</div>
	</div>

	
	<a class="item" rel="nofollow" href="/user/login?redirect_to=%2fYoursmile7%2fTVBox%2fsrc%2fbranch%2fmaster%2fjs%2flib%2fcheerio.min.js">
		<svg viewBox="0 0 16 16" class="svg octicon-sign-in" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2 2.75C2 1.784 2.784 1 3.75 1h2.5a.75.75 0 010 1.5h-2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h2.5a.75.75 0 010 1.5h-2.5A1.75 1.75 0 012 13.25V2.75zm6.56 4.5l1.97-1.97a.75.75 0 10-1.06-1.06L6.22 7.47a.75.75 0 000 1.06l3.25 3.25a.75.75 0 101.06-1.06L8.56 8.75h5.69a.75.75 0 000-1.5H8.56z"/></svg> 登录
	</a>
</div>


</div>

			</div>
		


<div id="repoHome" class="repository file list ">
	<div class="header-wrapper">

	<div class="ui container">
		<div class="repo-header">
			<div class="ui huge breadcrumb repo-title">
				
					<div class="repo-header-icon">
	
		
			<svg viewBox="0 0 16 16" class="svg octicon-repo" width="32" height="32" aria-hidden="true"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"/></svg>
			
		
	
</div>

				
				<a href="/Yoursmile7">Yoursmile7</a>
				<div class="divider"> / </div>
				<a href="/Yoursmile7/TVBox">TVBox</a>

				<i class="iconfont icon-ai"></i>

				
					
						
					
				
				
				
				
				
			</div>
			
				<div class="repo-buttons">
					<form method="post" action="/Yoursmile7/TVBox/action/watch?redirect_to=%2fYoursmile7%2fTVBox%2fsrc%2fbranch%2fmaster%2fjs%2flib%2fcheerio.min.js">
						<input type="hidden" name="_csrf" value="ygSs7KcUXfe_IIVCLnRNbRKBYOs6MTcwNDk2MTQwMDgyNTYyMTYzNw">
						<div class="ui labeled button poping up" tabindex="0" data-content="请登录后再关注此仓库" data-position="top center" data-variation="tiny">
							<button type="submit" class="ui compact basic button" disabled>
								<i class="iconfont mr-2xs icon-eye"></i>关注
							</button>
							<a class="ui basic label" href="/Yoursmile7/TVBox/watchers">
								72
							</a>
						</div>
					</form>
					<form method="post" action="/Yoursmile7/TVBox/action/star?redirect_to=%2fYoursmile7%2fTVBox%2fsrc%2fbranch%2fmaster%2fjs%2flib%2fcheerio.min.js">
						<input type="hidden" name="_csrf" value="ygSs7KcUXfe_IIVCLnRNbRKBYOs6MTcwNDk2MTQwMDgyNTYyMTYzNw">
						<div class="ui labeled button poping up" tabindex="0" data-content="请登录后再点赞此仓库" data-position="top center" data-variation="tiny">
							<button type="submit" class="ui compact basic button" disabled>
								<i class="mr-2xs iconfont icon-star"></i>点赞
							</button>
							<a class="ui basic label" href="/Yoursmile7/TVBox/stars">
								44
							</a>
						</div>
					</form>
					
						<div class="ui labeled button " tabindex="0">
							<a class="ui compact basic button
								poping up"
								 data-content="登录并 派生 这个仓库。" rel="nofollow"
									href="/user/login?redirect_to=/repo/fork/3702"
								 data-position="top center" data-variation="tiny">
								<i class="mr-2xs iconfont icon-fork"></i>派生
							</a>
							<a class="ui basic label" href="/Yoursmile7/TVBox/forks">
								134
							</a>
						</div>
					
				</div>
			
		</div>
	</div>

	<div class="ui tabs container">
		
			<div class="ui tabular stackable menu navbar">
				
				<a class="active item" href="/Yoursmile7/TVBox">
					<i class="iconfont icon-code"></i> 代码
				</a>
				

				
					<a class=" item" href="/Yoursmile7/TVBox/issues">
						<i class="iconfont icon-open"></i> 讨论 <span class="ui primary tiny label circular">1</span>
					</a>
				

				

				
					<a class=" item" href="/Yoursmile7/TVBox/pulls">
						<i class="iconfont icon-merge-request"></i> 合并请求 <span class="ui gray tiny label circular">0</span>
					</a>
				

				
					<a class=" item" href="/Yoursmile7/TVBox/wiki" >
						<i class="iconfont icon-wiki"></i> 百科
					</a>
				

				
					<a class=" item" href="/Yoursmile7/TVBox/activity">
						<i class="iconfont icon-activity"></i> 动态
					</a>
				

				


				
			</div>
		
	</div>
	<div class="ui tabs divider"></div>
</div>

	<span class="repo-url hidden">/Yoursmile7/TVBox</span>
	<span class="repo-id hidden">3702</span>
	<div class="ui container">
		



		<div class="ui repo-description">
			<div id="repo-desc">
				
					<span class="description">All content is for learning only, please do not use it for illegal purposes.</span>
				
				<a class="link" href=""></a>
			</div>
			
		</div>
		<div class="ui" id="repo-topics">
		
		
		</div>
		
		<div class="hide" id="validate_prompt">
			<span id="count_prompt">您最多选择25个主题</span>
			<span id="format_prompt">主题必须以字母或数字开头，可以包含连字符 (-)，并且长度不得超过35个字符</span>
		</div>
		
		
		

		<div class="ui segments repository-summary shadow-0 is-lang-stats">
	<div class="ui segment sub-menu repository-menu">
		<div class="ui two horizontal center link list">
			
				<div class="item">
					<a class="ui" href="/Yoursmile7/TVBox/commits/branch/master"><i class="iconfont icon-commit"></i> <b>2453</b> 提交</a>
				</div>
			
			
				<div class="item">
					<a class="ui" href="/Yoursmile7/TVBox/branches/"><i class="iconfont icon-branch-down"></i> <b>1</b> 分支</a>
				</div>
				<div class="item">
					<span class="ui"><i class="iconfont icon-memory"></i> <b id="RepoSize">279 MB</b></span>
				</div>
			
		</div>
	</div>
	
	<div class="ui segment sub-menu language-stats-details" style="display: none">
		<div class="ui horizontal center link list">
			
			<div class="item">
				<span class="ui">
				<i class="color-icon" style="background-color: #f1e05a"></i>
				<b>
					JavaScript
				
				</b> 100%</span>
			</div>
			
		</div>
	</div>
	<a class="ui segment language-stats">
		
		<div class="bar" style="width: 100%; background-color: #f1e05a">&nbsp;</div>
		
	</a>
	
</div>

		<div class="ui stackable secondary menu mobile--margin-between-items mobile--no-negative-margins">
			<div class="fitted item choose reference">
	<div class="ui floating filter dropdown custom" data-can-create-branch="false" data-no-results="未找到结果">
		<div id="branchSelect" class="ui basic small compact button" data-mode="branches" @click="menuVisible = !menuVisible" @keyup.enter="menuVisible = !menuVisible">
			<span class="text">
				<i class="iconfont icon-branch-down"></i>
				分支:
				<strong>master</strong>
			</span>
			<i class="dropdown icon"></i>
		</div>
		<div class="data" style="display: none" data-mode="branches">
			
				<div class="item branch selected" data-url="/Yoursmile7/TVBox/src/branch/master/js/lib/cheerio.min.js">master</div>
			
			
		</div>
		<div class="menu transition" :class="{visible: menuVisible}" v-if="menuVisible" v-cloak>
			<div class="ui icon search input">
				<i class="filter icon"></i>
				<input name="search" ref="searchField" v-model="searchTerm" @keydown="keydown($event)" placeholder="过滤分支或标签...">
			</div>
			<div class="header branch-tag-choice">
				<div class="ui grid">
					<div class="two column row">
						<a class="reference column" href="#" @click="mode = 'branches'; focusSearchField()">
							<span class="text" :class="{black: mode !== 'branches'}">
								<i class="iconfont icon-branch-down"></i> 分支列表
							</span>
						</a>
						<a class="reference column" href="#" @click="mode = 'tags'; focusSearchField()">
							<span class="text" :class="{black: mode !== 'tags'}">
								<i class="reference tags icon"></i> 标签列表
							</span>
						</a>
					</div>
				</div>
			</div>
			<div class="scrolling menu" ref="scrollContainer">
				<div v-for="(item, index) in filteredItems" :key="item.name" class="item" :class="{selected: item.selected, active: active == index}" @click="selectItem(item)" :ref="'listItem' + index">${ item.name }</div>
				<div class="item" v-if="showCreateNewBranch" :class="{active: active == filteredItems.length}" :ref="'listItem' + filteredItems.length">
					<a href="#" @click="createNewBranch()">
						<div>
							<i class="iconfont icon-branch-down"></i>
							创建分支 <strong>${ searchTerm }</strong>
						</div>
						<div class="text small">
							
								从 &#39;master&#39;
							
						</div>
					</a>
					<form ref="newBranchForm" action="/Yoursmile7/TVBox/branches/_new/branch/master" method="post">
						<input type="hidden" name="_csrf" value="ygSs7KcUXfe_IIVCLnRNbRKBYOs6MTcwNDk2MTQwMDgyNTYyMTYzNw">
						<input type="hidden" name="new_branch_name" v-model="searchTerm">
					</form>
				</div>
			</div>
			<div class="message" v-if="showNoResults">${ noResults }</div>
		</div>
	</div>
</div>

			
			
			
			
				<div class="fitted item">
					<span class="ui breadcrumb repo-path">
						<a class="section" href="/Yoursmile7/TVBox/src/branch/master" title="TVBox">TVBox</a>
						
							<span class="divider">/</span>
							
								<span class="section">
									<a href="/Yoursmile7/TVBox/src/branch/master/js" title="js">js</a></span>
						
							<span class="divider">/</span>
							
								<span class="section">
									<a href="/Yoursmile7/TVBox/src/branch/master/js/lib" title="lib">lib</a></span>
						
							<span class="divider">/</span>
							
								<span class="active section" title="cheerio.min.js">cheerio.min.js</span>
							
						</span></div>
			
			<div class="right fitted item" id="file-buttons">
				<div>
					
						
						
					

					
					
				</div>
			</div>

			<div class="fitted item">
				
				
			</div>
		</div>
		
			<div class="tab-size-8 non-diff-file-content">
	<h4 class="file-header ui top attached header">
		<div class="file-header-left df ac">
			
				<div class="file-info text grey normal mono">
					
					
						<div class="file-info-entry">
							1 行
						</div>
					
					
						<div class="file-info-entry">
							357 KB
						</div>
					
					
				</div>
			
		</div>
		
		<div class="file-header-right df ac">
			<div class="ui right file-actions">
				<div class="ui buttons">
					<a class="ui button" href="/Yoursmile7/TVBox/raw/branch/master/js/lib/cheerio.min.js">原始文件</a>
					
						<a class="ui button" href="/Yoursmile7/TVBox/src/commit/fba2258c9cb102b1a318000bf3f829b2e334fe10/js/lib/cheerio.min.js">永久链接</a>
					
					
						<a class="ui button" href="/Yoursmile7/TVBox/blame/branch/master/js/lib/cheerio.min.js">Blame</a>
					
					<a class="ui button" href="/Yoursmile7/TVBox/commits/branch/master/js/lib/cheerio.min.js">文件历史</a>
				</div>
				
					
						<span class="btn-octicon poping up disabled" data-content="您必须在派生这个仓库才能对此文件进行修改操作" data-position="bottom center" data-variation="tiny inverted"><svg viewBox="0 0 16 16" class="svg octicon-pencil" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11.013 1.427a1.75 1.75 0 012.474 0l1.086 1.086a1.75 1.75 0 010 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 01-.927-.928l.929-3.25a1.75 1.75 0 01.445-.758l8.61-8.61zm1.414 1.06a.25.25 0 00-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 000-.354l-1.086-1.086zM11.189 6.25L9.75 4.81l-6.286 6.287a.25.25 0 00-.064.108l-.558 1.953 1.953-.558a.249.249 0 00.108-.064l6.286-6.286z"/></svg></span>
					
					
						<span class="btn-octicon poping up disabled" data-content="您必须具有写权限才能对此文件进行修改操作。" data-position="bottom center" data-variation="tiny inverted"><svg viewBox="0 0 16 16" class="svg octicon-trashcan" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6.5 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25V3h-3V1.75zm4.5 0V3h2.25a.75.75 0 010 1.5H2.75a.75.75 0 010-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75zM4.496 6.675a.75.75 0 10-1.492.15l.66 6.6A1.75 1.75 0 005.405 15h5.19c.9 0 1.652-.681 1.741-1.576l.66-6.6a.75.75 0 00-1.492-.149l-.66 6.6a.25.25 0 01-.249.225h-5.19a.25.25 0 01-.249-.225l-.66-6.6z"/></svg></span>
					
				
			</div>
		</div>
		
	</h4>
	<div class="ui attached table unstackable segment">
		<div class="file-view code-view">
			
				
				<table>
					<tbody>
						
						<tr>
							<td id="L1" class="lines-num">
								<span id="L1" data-line-number="1"></span>
							</td>
							<td rel="L1" class="lines-code chroma">
								<code><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">xml</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">decodeEntities</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="nx">_useHtmlParser2</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">xmlMode</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">xml</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;boolean&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">xml</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">t</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">xml</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">Root</span><span class="o">=</span><span class="s2">&#34;root&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="o">=</span><span class="s2">&#34;directive&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="o">=</span><span class="s2">&#34;comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Script</span><span class="o">=</span><span class="s2">&#34;script&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Style</span><span class="o">=</span><span class="s2">&#34;style&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="o">=</span><span class="s2">&#34;tag&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA</span><span class="o">=</span><span class="s2">&#34;cdata&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Doctype</span><span class="o">=</span><span class="s2">&#34;doctype&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Root</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Script</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Style</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Doctype</span><span class="p">;</span><span class="kr">class</span> <span class="nx">d</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">startIndex</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endIndex</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">get</span> <span class="nx">parentNode</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">}</span><span class="nx">set</span> <span class="nx">parentNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">previousSibling</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prev</span><span class="p">}</span><span class="nx">set</span> <span class="nx">previousSibling</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nextSibling</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="p">}</span><span class="nx">set</span> <span class="nx">nextSibling</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">cloneNode</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">v</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">E</span> <span class="kr">extends</span> <span class="nx">d</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeValue</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span><span class="nx">set</span> <span class="nx">nodeValue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">m</span> <span class="kr">extends</span> <span class="nx">E</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">...</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">3</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="nx">E</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">...</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">8</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">_</span> <span class="kr">extends</span> <span class="nx">E</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">A</span> <span class="kr">extends</span> <span class="nx">d</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">firstChild</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">get</span> <span class="nx">lastChild</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">get</span> <span class="nx">childNodes</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="nx">set</span> <span class="nx">childNodes</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">g</span> <span class="kr">extends</span> <span class="nx">A</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">...</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">4</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">N</span> <span class="kr">extends</span> <span class="nx">A</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="p">...</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">Root</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">9</span><span class="p">}</span><span class="p">}</span><span class="kr">class</span> <span class="nx">C</span> <span class="kr">extends</span> <span class="nx">A</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">Script</span><span class="o">:</span><span class="s2">&#34;style&#34;</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">Style</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">attribs</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="nx">get</span> <span class="nx">nodeType</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">}</span><span class="nx">get</span> <span class="nx">tagName</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="nx">set</span> <span class="nx">tagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">attributes</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="s2">&#34;x-attribsNamespace&#34;</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">prefix</span><span class="o">:</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="s2">&#34;x-attribsPrefix&#34;</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Script</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Style</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">S</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA</span><span class="p">}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span><span class="p">}</span><span class="kd">function</span> <span class="nx">O</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">}</span><span class="kd">function</span> <span class="nx">L</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Root</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;children&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">T</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">D</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">C</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="p">{</span><span class="p">...</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">namespace</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">namespace</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-attribsNamespace&#34;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="s2">&#34;x-attribsNamespace&#34;</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-attribsNamespace&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-attribsPrefix&#34;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="s2">&#34;x-attribsPrefix&#34;</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-attribsPrefix&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">D</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">g</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">L</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">D</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">N</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-mode&#34;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="s2">&#34;x-mode&#34;</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-mode&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">y</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Not implemented yet: </span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">_</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-name&#34;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="s2">&#34;x-name&#34;</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-name&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="s2">&#34;x-publicId&#34;</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-publicId&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="s2">&#34;x-systemId&#34;</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="s2">&#34;x-systemId&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">startIndex</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startIndex</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">endIndex</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">endIndex</span><span class="p">,</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">D</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">v</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kr">const</span> <span class="nx">R</span><span class="o">=</span><span class="p">{</span><span class="nx">withStartIndices</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">withEndIndices</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">xmlMode</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span><span class="kr">class</span> <span class="nx">M</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">dom</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="k">new</span> <span class="nx">N</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dom</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">done</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="o">=</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">R</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">R</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">elementCB</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">onparserinit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">onreset</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">dom</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="k">new</span> <span class="nx">N</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dom</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">done</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="o">=</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">onend</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">done</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">done</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handleCallback</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">onerror</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleCallback</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">onclosetag</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">withEndIndices</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">endIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">endIndex</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">elementCB</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">elementCB</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">onopentag</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">C</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="nx">ontext</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">lastNode</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">withEndIndices</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">endIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">endIndex</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="nx">oncomment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">T</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="nx">oncommentend</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">oncdatastart</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">g</span><span class="p">(</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">oncdataend</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">onprocessinginstruction</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">_</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="nx">handleCallback</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">dom</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="nx">e</span><span class="p">}</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">tagStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">withStartIndices</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">startIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">startIndex</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">withEndIndices</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">endIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">endIndex</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastNode</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">P</span><span class="o">=</span><span class="sr">/[&#34;&amp;&#39;&lt;&gt;$\x80-\uFFFF]/g</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">34</span><span class="p">,</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">39</span><span class="p">,</span><span class="s2">&#34;&amp;apos;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">60</span><span class="p">,</span><span class="s2">&#34;&amp;lt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">62</span><span class="p">,</span><span class="s2">&#34;&amp;gt;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">codePointAt</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">codePointAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="mi">55296</span><span class="o">==</span><span class="p">(</span><span class="mi">64512</span><span class="o">&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="mi">1024</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">-</span><span class="mi">55296</span><span class="p">)</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="mi">56320</span><span class="o">+</span><span class="mi">65536</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">B</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">n</span><span class="o">+=</span><span class="sb">`</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="si">}</span><span class="sb">&amp;#x</span><span class="si">${</span><span class="nx">w</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="sb">;</span><span class="sb">`</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">+=</span><span class="nb">Number</span><span class="p">(</span><span class="mi">55296</span><span class="o">==</span><span class="p">(</span><span class="mi">64512</span><span class="o">&amp;</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">F</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">i</span><span class="o">!==</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">+=</span><span class="nx">n</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">+=</span><span class="nx">t</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">U</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="sr">/[&#34;&amp;\u00A0]/g</span><span class="p">,</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">34</span><span class="p">,</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">160</span><span class="p">,</span><span class="s2">&#34;&amp;nbsp;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="sr">/[&amp;&lt;&gt;\u00A0]/g</span><span class="p">,</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">60</span><span class="p">,</span><span class="s2">&#34;&amp;lt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">62</span><span class="p">,</span><span class="s2">&#34;&amp;gt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">160</span><span class="p">,</span><span class="s2">&#34;&amp;nbsp;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;altGlyph&#34;</span><span class="p">,</span><span class="s2">&#34;altGlyphDef&#34;</span><span class="p">,</span><span class="s2">&#34;altGlyphItem&#34;</span><span class="p">,</span><span class="s2">&#34;animateColor&#34;</span><span class="p">,</span><span class="s2">&#34;animateMotion&#34;</span><span class="p">,</span><span class="s2">&#34;animateTransform&#34;</span><span class="p">,</span><span class="s2">&#34;clipPath&#34;</span><span class="p">,</span><span class="s2">&#34;feBlend&#34;</span><span class="p">,</span><span class="s2">&#34;feColorMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;feComponentTransfer&#34;</span><span class="p">,</span><span class="s2">&#34;feComposite&#34;</span><span class="p">,</span><span class="s2">&#34;feConvolveMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;feDiffuseLighting&#34;</span><span class="p">,</span><span class="s2">&#34;feDisplacementMap&#34;</span><span class="p">,</span><span class="s2">&#34;feDistantLight&#34;</span><span class="p">,</span><span class="s2">&#34;feDropShadow&#34;</span><span class="p">,</span><span class="s2">&#34;feFlood&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncA&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncB&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncG&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncR&#34;</span><span class="p">,</span><span class="s2">&#34;feGaussianBlur&#34;</span><span class="p">,</span><span class="s2">&#34;feImage&#34;</span><span class="p">,</span><span class="s2">&#34;feMerge&#34;</span><span class="p">,</span><span class="s2">&#34;feMergeNode&#34;</span><span class="p">,</span><span class="s2">&#34;feMorphology&#34;</span><span class="p">,</span><span class="s2">&#34;feOffset&#34;</span><span class="p">,</span><span class="s2">&#34;fePointLight&#34;</span><span class="p">,</span><span class="s2">&#34;feSpecularLighting&#34;</span><span class="p">,</span><span class="s2">&#34;feSpotLight&#34;</span><span class="p">,</span><span class="s2">&#34;feTile&#34;</span><span class="p">,</span><span class="s2">&#34;feTurbulence&#34;</span><span class="p">,</span><span class="s2">&#34;foreignObject&#34;</span><span class="p">,</span><span class="s2">&#34;glyphRef&#34;</span><span class="p">,</span><span class="s2">&#34;linearGradient&#34;</span><span class="p">,</span><span class="s2">&#34;radialGradient&#34;</span><span class="p">,</span><span class="s2">&#34;textPath&#34;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;definitionURL&#34;</span><span class="p">,</span><span class="s2">&#34;attributeName&#34;</span><span class="p">,</span><span class="s2">&#34;attributeType&#34;</span><span class="p">,</span><span class="s2">&#34;baseFrequency&#34;</span><span class="p">,</span><span class="s2">&#34;baseProfile&#34;</span><span class="p">,</span><span class="s2">&#34;calcMode&#34;</span><span class="p">,</span><span class="s2">&#34;clipPathUnits&#34;</span><span class="p">,</span><span class="s2">&#34;diffuseConstant&#34;</span><span class="p">,</span><span class="s2">&#34;edgeMode&#34;</span><span class="p">,</span><span class="s2">&#34;filterUnits&#34;</span><span class="p">,</span><span class="s2">&#34;glyphRef&#34;</span><span class="p">,</span><span class="s2">&#34;gradientTransform&#34;</span><span class="p">,</span><span class="s2">&#34;gradientUnits&#34;</span><span class="p">,</span><span class="s2">&#34;kernelMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;kernelUnitLength&#34;</span><span class="p">,</span><span class="s2">&#34;keyPoints&#34;</span><span class="p">,</span><span class="s2">&#34;keySplines&#34;</span><span class="p">,</span><span class="s2">&#34;keyTimes&#34;</span><span class="p">,</span><span class="s2">&#34;lengthAdjust&#34;</span><span class="p">,</span><span class="s2">&#34;limitingConeAngle&#34;</span><span class="p">,</span><span class="s2">&#34;markerHeight&#34;</span><span class="p">,</span><span class="s2">&#34;markerUnits&#34;</span><span class="p">,</span><span class="s2">&#34;markerWidth&#34;</span><span class="p">,</span><span class="s2">&#34;maskContentUnits&#34;</span><span class="p">,</span><span class="s2">&#34;maskUnits&#34;</span><span class="p">,</span><span class="s2">&#34;numOctaves&#34;</span><span class="p">,</span><span class="s2">&#34;pathLength&#34;</span><span class="p">,</span><span class="s2">&#34;patternContentUnits&#34;</span><span class="p">,</span><span class="s2">&#34;patternTransform&#34;</span><span class="p">,</span><span class="s2">&#34;patternUnits&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtX&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtY&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtZ&#34;</span><span class="p">,</span><span class="s2">&#34;preserveAlpha&#34;</span><span class="p">,</span><span class="s2">&#34;preserveAspectRatio&#34;</span><span class="p">,</span><span class="s2">&#34;primitiveUnits&#34;</span><span class="p">,</span><span class="s2">&#34;refX&#34;</span><span class="p">,</span><span class="s2">&#34;refY&#34;</span><span class="p">,</span><span class="s2">&#34;repeatCount&#34;</span><span class="p">,</span><span class="s2">&#34;repeatDur&#34;</span><span class="p">,</span><span class="s2">&#34;requiredExtensions&#34;</span><span class="p">,</span><span class="s2">&#34;requiredFeatures&#34;</span><span class="p">,</span><span class="s2">&#34;specularConstant&#34;</span><span class="p">,</span><span class="s2">&#34;specularExponent&#34;</span><span class="p">,</span><span class="s2">&#34;spreadMethod&#34;</span><span class="p">,</span><span class="s2">&#34;startOffset&#34;</span><span class="p">,</span><span class="s2">&#34;stdDeviation&#34;</span><span class="p">,</span><span class="s2">&#34;stitchTiles&#34;</span><span class="p">,</span><span class="s2">&#34;surfaceScale&#34;</span><span class="p">,</span><span class="s2">&#34;systemLanguage&#34;</span><span class="p">,</span><span class="s2">&#34;tableValues&#34;</span><span class="p">,</span><span class="s2">&#34;targetX&#34;</span><span class="p">,</span><span class="s2">&#34;targetY&#34;</span><span class="p">,</span><span class="s2">&#34;textLength&#34;</span><span class="p">,</span><span class="s2">&#34;viewBox&#34;</span><span class="p">,</span><span class="s2">&#34;viewTarget&#34;</span><span class="p">,</span><span class="s2">&#34;xChannelSelector&#34;</span><span class="p">,</span><span class="s2">&#34;yChannelSelector&#34;</span><span class="p">,</span><span class="s2">&#34;zoomAndPan&#34;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;style&#34;</span><span class="p">,</span><span class="s2">&#34;script&#34;</span><span class="p">,</span><span class="s2">&#34;xmp&#34;</span><span class="p">,</span><span class="s2">&#34;iframe&#34;</span><span class="p">,</span><span class="s2">&#34;noembed&#34;</span><span class="p">,</span><span class="s2">&#34;noframes&#34;</span><span class="p">,</span><span class="s2">&#34;plaintext&#34;</span><span class="p">,</span><span class="s2">&#34;noscript&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">K</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&#34;/g</span><span class="p">,</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;area&#34;</span><span class="p">,</span><span class="s2">&#34;base&#34;</span><span class="p">,</span><span class="s2">&#34;basefont&#34;</span><span class="p">,</span><span class="s2">&#34;br&#34;</span><span class="p">,</span><span class="s2">&#34;col&#34;</span><span class="p">,</span><span class="s2">&#34;command&#34;</span><span class="p">,</span><span class="s2">&#34;embed&#34;</span><span class="p">,</span><span class="s2">&#34;frame&#34;</span><span class="p">,</span><span class="s2">&#34;hr&#34;</span><span class="p">,</span><span class="s2">&#34;img&#34;</span><span class="p">,</span><span class="s2">&#34;input&#34;</span><span class="p">,</span><span class="s2">&#34;isindex&#34;</span><span class="p">,</span><span class="s2">&#34;keygen&#34;</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="s2">&#34;meta&#34;</span><span class="p">,</span><span class="s2">&#34;param&#34;</span><span class="p">,</span><span class="s2">&#34;source&#34;</span><span class="p">,</span><span class="s2">&#34;track&#34;</span><span class="p">,</span><span class="s2">&#34;wbr&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">V</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="s2">&#34;length&#34;</span><span class="k">in</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="o">+=</span><span class="nx">W</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="kd">function</span> <span class="nx">W</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">s</span><span class="o">:</span><span class="k">return</span> <span class="nx">V</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">f</span><span class="o">:</span><span class="k">case</span> <span class="nx">o</span><span class="o">:</span><span class="k">return</span><span class="sb">`</span><span class="sb">&lt;</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="si">}</span><span class="sb">&gt;</span><span class="sb">`</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="sb">`</span><span class="err">\</span><span class="sb">x3c!--</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="si">}</span><span class="sb">--</span><span class="err">\</span><span class="sb">x3e</span><span class="sb">`</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">p</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="sb">`</span><span class="sb">&lt;![CDATA[</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">data</span><span class="si">}</span><span class="sb">]]&gt;</span><span class="sb">`</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">l</span><span class="o">:</span><span class="k">case</span> <span class="nx">h</span><span class="o">:</span><span class="k">case</span> <span class="nx">u</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="s2">&#34;foreign&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">t</span><span class="p">,</span><span class="nx">xmlMode</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="nx">X</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">t</span><span class="p">,</span><span class="nx">xmlMode</span><span class="o">:</span><span class="s2">&#34;foreign&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="sb">`</span><span class="sb">&lt;</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeEntities</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeEntities</span><span class="p">)</span><span class="o">?</span><span class="nx">K</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">||</span><span class="s2">&#34;utf8&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeEntities</span><span class="o">?</span><span class="nx">B</span><span class="o">:</span><span class="nx">U</span><span class="p">;</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;foreign&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">Y</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="o">?</span><span class="nx">s</span><span class="o">:</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">emptyAttrs</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="sb">`</span><span class="si">${</span><span class="nx">n</span><span class="si">}</span><span class="sb">=&#34;</span><span class="si">${</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="si">}</span><span class="sb">&#34;</span><span class="sb">`</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="sb">`</span><span class="sb"> </span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">?</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">selfClosingTags</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">selfClosingTags</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">+=</span><span class="s2">&#34;/&gt;&#34;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="s2">&#34;&gt;&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="nx">V</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="sb">`</span><span class="sb">&lt;/</span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">&gt;</span><span class="sb">`</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeEntities</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeEntities</span><span class="p">)</span><span class="o">||</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">||</span><span class="s2">&#34;utf8&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeEntities</span><span class="o">?</span><span class="nx">B</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="nx">H</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Q</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;mi&#34;</span><span class="p">,</span><span class="s2">&#34;mo&#34;</span><span class="p">,</span><span class="s2">&#34;mn&#34;</span><span class="p">,</span><span class="s2">&#34;ms&#34;</span><span class="p">,</span><span class="s2">&#34;mtext&#34;</span><span class="p">,</span><span class="s2">&#34;annotation-xml&#34;</span><span class="p">,</span><span class="s2">&#34;foreignObject&#34;</span><span class="p">,</span><span class="s2">&#34;desc&#34;</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;svg&#34;</span><span class="p">,</span><span class="s2">&#34;math&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">V</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">z</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">z</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">O</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">z</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="kd">function</span> <span class="nx">J</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">J</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="o">||</span><span class="nx">S</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="nx">J</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Z</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ee</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">||</span><span class="kc">null</span><span class="p">}</span><span class="kd">function</span> <span class="nx">te</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">ee</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">Z</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">prev</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">next</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">r</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="p">{</span><span class="nx">prev</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">i</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="p">{</span><span class="nx">next</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ne</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span><span class="p">{</span><span class="nx">next</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">(</span><span class="p">{</span><span class="nx">next</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">re</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span><span class="p">{</span><span class="nx">prev</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">(</span><span class="p">{</span><span class="nx">prev</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ie</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">se</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">ae</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ae</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">s</span> <span class="k">of</span> <span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="o">--</span><span class="nx">r</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">ae</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">...</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">-=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">}</span><span class="kd">function</span> <span class="nx">oe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="nx">I</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="nx">s</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">oe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="kr">const</span> <span class="nx">ce</span><span class="o">=</span><span class="p">{</span><span class="nx">tag_name</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;*&#34;</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nx">I</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">e</span><span class="p">,</span><span class="nx">tag_type</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">,</span><span class="nx">tag_contains</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">le</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">===</span><span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">he</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ce</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">ce</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">le</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">he</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">pe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">se</span><span class="p">(</span><span class="nx">ce</span><span class="p">.</span><span class="nx">tag_name</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">fe</span><span class="p">;</span><span class="kd">function</span> <span class="nx">de</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">i</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">i</span><span class="p">;</span><span class="p">)</span><span class="nx">r</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="nx">r</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="p">)</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">fe</span><span class="p">.</span><span class="nx">DISCONNECTED</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">?</span><span class="nx">o</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">fe</span><span class="p">.</span><span class="nx">FOLLOWING</span><span class="o">|</span><span class="nx">fe</span><span class="p">.</span><span class="nx">CONTAINED_BY</span><span class="o">:</span><span class="nx">fe</span><span class="p">.</span><span class="nx">FOLLOWING</span><span class="o">:</span><span class="nx">o</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nx">fe</span><span class="p">.</span><span class="nx">PRECEDING</span><span class="o">|</span><span class="nx">fe</span><span class="p">.</span><span class="nx">CONTAINS</span><span class="o">:</span><span class="nx">fe</span><span class="p">.</span><span class="nx">PRECEDING</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ee</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">=&gt;</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">de</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;</span><span class="nx">fe</span><span class="p">.</span><span class="nx">PRECEDING</span><span class="o">?</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;</span><span class="nx">fe</span><span class="p">.</span><span class="nx">FOLLOWING</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DISCONNECTED</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DISCONNECTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">PRECEDING</span><span class="o">=</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;PRECEDING&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FOLLOWING</span><span class="o">=</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FOLLOWING&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CONTAINS</span><span class="o">=</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CONTAINS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CONTAINED_BY</span><span class="o">=</span><span class="mi">16</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CONTAINED_BY&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">fe</span><span class="o">||</span><span class="p">(</span><span class="nx">fe</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">me</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;url&#34;</span><span class="p">,</span><span class="s2">&#34;type&#34;</span><span class="p">,</span><span class="s2">&#34;lang&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">Te</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;fileSize&#34;</span><span class="p">,</span><span class="s2">&#34;bitrate&#34;</span><span class="p">,</span><span class="s2">&#34;framerate&#34;</span><span class="p">,</span><span class="s2">&#34;samplingrate&#34;</span><span class="p">,</span><span class="s2">&#34;channels&#34;</span><span class="p">,</span><span class="s2">&#34;duration&#34;</span><span class="p">,</span><span class="s2">&#34;height&#34;</span><span class="p">,</span><span class="s2">&#34;width&#34;</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">_e</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">pe</span><span class="p">(</span><span class="s2">&#34;media:content&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">attribs</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">medium</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">medium</span><span class="p">,</span><span class="nx">isDefault</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">isDefault</span><span class="p">}</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">e</span> <span class="k">of</span> <span class="nx">me</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">e</span> <span class="k">of</span> <span class="nx">Te</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">expression</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">expression</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">expression</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ae</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">pe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ge</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">z</span><span class="p">(</span><span class="nx">pe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ne</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ce</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;rss&#34;</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;feed&#34;</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;rdf:RDF&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ie</span><span class="p">,</span><span class="nx">Se</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">isTag</span><span class="o">:</span><span class="nx">I</span><span class="p">,</span><span class="nx">isCDATA</span><span class="o">:</span><span class="nx">S</span><span class="p">,</span><span class="nx">isText</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">isComment</span><span class="o">:</span><span class="nx">O</span><span class="p">,</span><span class="nx">isDocument</span><span class="o">:</span><span class="nx">L</span><span class="p">,</span><span class="nx">hasChildren</span><span class="o">:</span><span class="nx">k</span><span class="p">,</span><span class="nx">getOuterHTML</span><span class="o">:</span><span class="nx">$</span><span class="p">,</span><span class="nx">getInnerHTML</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">getText</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;br&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">?</span><span class="s2">&#34;\n&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="nx">S</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">textContent</span><span class="o">:</span><span class="nx">z</span><span class="p">,</span><span class="nx">innerText</span><span class="o">:</span><span class="nx">J</span><span class="p">,</span><span class="nx">getChildren</span><span class="o">:</span><span class="nx">Z</span><span class="p">,</span><span class="nx">getParent</span><span class="o">:</span><span class="nx">ee</span><span class="p">,</span><span class="nx">getSiblings</span><span class="o">:</span><span class="nx">te</span><span class="p">,</span><span class="nx">getAttributeValue</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">hasAttrib</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">getName</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="p">,</span><span class="nx">nextElementSibling</span><span class="o">:</span><span class="nx">ne</span><span class="p">,</span><span class="nx">prevElementSibling</span><span class="o">:</span><span class="nx">re</span><span class="p">,</span><span class="nx">removeElement</span><span class="o">:</span><span class="nx">ie</span><span class="p">,</span><span class="nx">replaceElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="nx">n</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">appendChild</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">ie</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="k">else</span> <span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">append</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">ie</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">prependChild</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">ie</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="mi">1</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="k">else</span> <span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">prepend</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">ie</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">filter</span><span class="o">:</span><span class="nx">se</span><span class="p">,</span><span class="nx">find</span><span class="o">:</span><span class="nx">ae</span><span class="p">,</span><span class="nx">findOneChild</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">findOne</span><span class="o">:</span><span class="nx">oe</span><span class="p">,</span><span class="nx">existsOne</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">findAll</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">s</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">shift</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="p">...</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">testElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">ue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">getElements</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">ue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">?</span><span class="nx">se</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">getElementById</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">oe</span><span class="p">(</span><span class="nx">le</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">getElementsByTagName</span><span class="o">:</span><span class="nx">pe</span><span class="p">,</span><span class="nx">getElementsByTagType</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">se</span><span class="p">(</span><span class="nx">ce</span><span class="p">.</span><span class="nx">tag_type</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">removeSubsets</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="o">--</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">r</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">get</span> <span class="nx">DocumentPosition</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">fe</span><span class="p">}</span><span class="p">,</span><span class="nx">compareDocumentPosition</span><span class="o">:</span><span class="nx">de</span><span class="p">,</span><span class="nx">uniqueSort</span><span class="o">:</span><span class="nx">Ee</span><span class="p">,</span><span class="nx">getFeed</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Ae</span><span class="p">(</span><span class="nx">Ce</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="s2">&#34;feed&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&#34;atom&#34;</span><span class="p">,</span><span class="nx">items</span><span class="o">:</span><span class="nx">pe</span><span class="p">(</span><span class="s2">&#34;entry&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">children</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="nx">media</span><span class="o">:</span><span class="nx">_e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">Ae</span><span class="p">(</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">link</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;summary&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;content&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">description</span><span class="o">=</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;updated&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">pubDate</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">Ae</span><span class="p">(</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">link</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;description&#34;</span><span class="p">,</span><span class="s2">&#34;subtitle&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;updated&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">updated</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ne</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;author&#34;</span><span class="p">,</span><span class="s2">&#34;email&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">Ae</span><span class="p">(</span><span class="s2">&#34;channel&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="p">,</span><span class="nx">id</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">items</span><span class="o">:</span><span class="nx">pe</span><span class="p">(</span><span class="s2">&#34;item&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">children</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">media</span><span class="o">:</span><span class="nx">_e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="s2">&#34;guid&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="s2">&#34;description&#34;</span><span class="p">,</span><span class="s2">&#34;description&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;pubDate&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">pubDate</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">Ne</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&#34;description&#34;</span><span class="p">,</span><span class="s2">&#34;description&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">ge</span><span class="p">(</span><span class="s2">&#34;lastBuildDate&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">updated</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ne</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&#34;author&#34;</span><span class="p">,</span><span class="s2">&#34;managingEditor&#34;</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">be</span><span class="o">=</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">global</span><span class="o">?</span><span class="nx">global</span><span class="o">:</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">self</span><span class="o">?</span><span class="nx">self</span><span class="o">:</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">?</span><span class="nb">window</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Oe</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">)</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ye</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Le</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;_&#34;</span><span class="p">,</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">writable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">ke</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Array&#34;</span><span class="p">,</span><span class="s2">&#34;Boolean&#34;</span><span class="p">,</span><span class="s2">&#34;Date&#34;</span><span class="p">,</span><span class="s2">&#34;Error&#34;</span><span class="p">,</span><span class="s2">&#34;EvalError&#34;</span><span class="p">,</span><span class="s2">&#34;Function&#34;</span><span class="p">,</span><span class="s2">&#34;Infinity&#34;</span><span class="p">,</span><span class="s2">&#34;JSON&#34;</span><span class="p">,</span><span class="s2">&#34;Math&#34;</span><span class="p">,</span><span class="s2">&#34;NaN&#34;</span><span class="p">,</span><span class="s2">&#34;Number&#34;</span><span class="p">,</span><span class="s2">&#34;Object&#34;</span><span class="p">,</span><span class="s2">&#34;RangeError&#34;</span><span class="p">,</span><span class="s2">&#34;ReferenceError&#34;</span><span class="p">,</span><span class="s2">&#34;RegExp&#34;</span><span class="p">,</span><span class="s2">&#34;String&#34;</span><span class="p">,</span><span class="s2">&#34;SyntaxError&#34;</span><span class="p">,</span><span class="s2">&#34;TypeError&#34;</span><span class="p">,</span><span class="s2">&#34;URIError&#34;</span><span class="p">,</span><span class="s2">&#34;decodeURI&#34;</span><span class="p">,</span><span class="s2">&#34;decodeURIComponent&#34;</span><span class="p">,</span><span class="s2">&#34;encodeURI&#34;</span><span class="p">,</span><span class="s2">&#34;encodeURIComponent&#34;</span><span class="p">,</span><span class="s2">&#34;escape&#34;</span><span class="p">,</span><span class="s2">&#34;eval&#34;</span><span class="p">,</span><span class="s2">&#34;isFinite&#34;</span><span class="p">,</span><span class="s2">&#34;isNaN&#34;</span><span class="p">,</span><span class="s2">&#34;parseFloat&#34;</span><span class="p">,</span><span class="s2">&#34;parseInt&#34;</span><span class="p">,</span><span class="s2">&#34;undefined&#34;</span><span class="p">,</span><span class="s2">&#34;unescape&#34;</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ve</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="kd">function</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">De</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Re</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Me</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">ve</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">ye</span><span class="p">(</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Me</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">ve</span><span class="p">}</span><span class="nx">ve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">De</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">runInContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">ve</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;needs a &#39;context&#39; argument.&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">be</span><span class="p">.</span><span class="nb">document</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">be</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;iframe&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">style</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span><span class="nx">be</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nb">eval</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">execScript</span><span class="p">;</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="s2">&#34;null&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nb">eval</span><span class="p">)</span><span class="p">,</span><span class="nx">ye</span><span class="p">(</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ye</span><span class="p">(</span><span class="nx">ke</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">ye</span><span class="p">(</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="p">(</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">e</span><span class="o">||</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">xe</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">n</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ye</span><span class="p">(</span><span class="nx">ke</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Ie</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ie</span><span class="o">=</span><span class="nx">Le</span><span class="p">)</span><span class="p">,</span><span class="nx">Ie</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">be</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">}</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">be</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;with (this.__ctx__){return eval(this.__code__)}&#34;</span><span class="p">)</span><span class="p">,</span><span class="nb">Function</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="p">{</span><span class="nx">__code__</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">__ctx__</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">De</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">runInThisContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&#34;code&#34;</span><span class="p">,</span><span class="s2">&#34;return eval(code);&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">be</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">De</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">runInNewContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Re</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">runInContext</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">ye</span><span class="p">(</span><span class="nx">Oe</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Pe</span><span class="o">=</span><span class="p">{</span><span class="nx">runInContext</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">runInContext</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">isContext</span><span class="o">:</span><span class="nx">Me</span><span class="p">,</span><span class="nx">createContext</span><span class="o">:</span><span class="nx">Re</span><span class="p">,</span><span class="nx">createScript</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Script</span><span class="o">:</span><span class="nx">De</span><span class="p">,</span><span class="nx">runInThisContext</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">runInThisContext</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">runInNewContext</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">De</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">runInNewContext</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">xe</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">hasOwnProperty</span><span class="o">:</span><span class="nx">we</span><span class="p">}</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Be</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Fe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="kr">class</span> <span class="nx">Ue</span> <span class="kr">extends</span> <span class="nb">Error</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">super</span><span class="p">(</span><span class="s1">&#39;JSONPath should not be called with &#34;new&#34; (it prevents return of (unwrapped) scalar values)&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">avoidNew</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&#34;NewError&#34;</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">He</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">He</span><span class="p">)</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">He</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">avoidNew</span><span class="p">)</span><span class="k">throw</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">json</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">json</span><span class="o">||</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">||</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">resultType</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">resultType</span><span class="o">||</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">flatten</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">flatten</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">wrap</span><span class="o">=</span><span class="o">!</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;wrap&#34;</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">wrap</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sandbox</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">sandbox</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preventEval</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">preventEval</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parentProperty</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentProperty</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">callback</span><span class="o">||</span><span class="nx">r</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">otherTypeCallback</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">otherTypeCallback</span><span class="o">||</span><span class="nx">i</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;You must supply an otherTypeCallback callback option with the @other() operator.&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">autostart</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">s</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">;</span><span class="nx">s</span><span class="o">?</span><span class="s2">&#34;json&#34;</span><span class="k">in</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">json</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">json</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">json</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="o">||</span><span class="s2">&#34;object&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">Ue</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">}</span><span class="p">}</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">evaluate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parentProperty</span><span class="p">,</span><span class="p">{</span><span class="nx">flatten</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">wrap</span><span class="o">:</span><span class="nx">o</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currResultType</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resultType</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currPreventEval</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preventEval</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sandbox</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">callback</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currOtherTypeCallback</span><span class="o">=</span><span class="nx">r</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">otherTypeCallback</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">json</span><span class="p">,</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">&amp;&amp;</span><span class="s2">&#34;&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;You must supply a &#34;path&#34; property when providing an object argument to JSONPath.evaluate().&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;json&#34;</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;You must supply a &#34;json&#34; property when providing an object argument to JSONPath.evaluate().&#39;</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="p">{</span><span class="nx">json</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;flatten&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">flatten</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currResultType</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;resultType&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">resultType</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currResultType</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;sandbox&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">sandbox</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;wrap&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">wrap</span><span class="o">:</span><span class="nx">o</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currPreventEval</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;preventEval&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">preventEval</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currPreventEval</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;callback&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">callback</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currOtherTypeCallback</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;otherTypeCallback&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">otherTypeCallback</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currOtherTypeCallback</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;parentProperty&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentProperty</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="s2">&#34;&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="o">||</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">c</span><span class="o">=</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="s2">&#34;$&#34;</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">shift</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasParentSelector</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="kr">const</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;$&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">isParentSelector</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">o</span><span class="o">||</span><span class="mi">1</span><span class="o">!==</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">hasArrExpr</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getPreferredOutput</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_getPreferredOutput</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="nx">o</span><span class="o">?</span><span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getPreferredOutput</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currResultType</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;all&#34;</span><span class="o">:</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">:</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pointer</span><span class="o">=</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPointer</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">:</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="k">case</span><span class="s2">&#34;value&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;parent&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;parentProperty&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;path&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;pointer&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">He</span><span class="p">.</span><span class="nx">toPointer</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;Unknown result type&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_handleCallback</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getPreferredOutput</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="o">:</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_trace</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">parent</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">parentProperty</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">hasArrExpr</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_handleCallback</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="kr">const</span> <span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="nx">u</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">u</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">l</span><span class="o">||</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">)</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;*&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_walk</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_walk</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">(</span><span class="nx">r</span><span class="p">=&gt;</span><span class="p">{</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;^&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_hasParentSelector</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">expr</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">isParentSelector</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;~&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">parent</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">parentProperty</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_handleCallback</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;property&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="sr">/^(-?\d*):(-?\d*):?(\d*)$/u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="p">)</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_slice</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">l</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;?(&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currPreventEval</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Eval [?(expr)] prevented in JSONPath expression.&#34;</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\?\((.*?)\)$/u</span><span class="p">,</span><span class="s2">&#34;$1&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_walk</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">(</span><span class="nx">a</span><span class="p">=&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_eval</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;(&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currPreventEval</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Eval [(expr)] prevented in JSONPath expression.&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">Fe</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_eval</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;@&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;scalar&#34;</span><span class="o">:</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">[</span><span class="s2">&#34;object&#34;</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="p">]</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;boolean&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;string&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;undefined&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;function&#34;</span><span class="o">:</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;integer&#34;</span><span class="o">:</span><span class="o">!</span><span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="o">%</span><span class="mi">1</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;number&#34;</span><span class="o">:</span><span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;nonFinite&#34;</span><span class="o">:</span><span class="s2">&#34;number&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">||</span><span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;object&#34;</span><span class="o">:</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;array&#34;</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;other&#34;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currOtherTypeCallback</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;null&#34;</span><span class="o">:</span><span class="kc">null</span><span class="o">===</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;Unknown value type &#34;</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">parent</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">parentProperty</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_handleCallback</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;`&#34;</span><span class="o">===</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">e</span><span class="p">)</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">Fe</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="o">!</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">we</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="p">,</span><span class="nx">Be</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_hasParentSelector</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">isParentSelector</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">expr</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">u</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">++</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">u</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">u</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_walk</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_slice</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nb">Number</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="kd">let</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nb">Number</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nb">Number</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="nx">o</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">u</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">u</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">u</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">p</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="nx">l</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_trace</span><span class="p">(</span><span class="nx">Fe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">p</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_eval</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_parentProperty</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_parent</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_property</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_root</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">json</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_v</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;@path&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">.</span><span class="nx">_$_path</span><span class="o">=</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="s2">&#34;script:&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">He</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@parentProperty/gu</span><span class="p">,</span><span class="s2">&#34;_$_parentProperty&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@parent/gu</span><span class="p">,</span><span class="s2">&#34;_$_parent&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@property/gu</span><span class="p">,</span><span class="s2">&#34;_$_property&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@root/gu</span><span class="p">,</span><span class="s2">&#34;_$_root&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@([.\s)[])/gu</span><span class="p">,</span><span class="s2">&#34;_$_v$1&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@path/gu</span><span class="p">,</span><span class="s2">&#34;_$_path&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">vm</span><span class="p">.</span><span class="nx">Script</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">He</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">.</span><span class="nx">runInNewContext</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currSandbox</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;jsonPath: &#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">message</span><span class="o">+</span><span class="s2">&#34;: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">cache</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&#34;$&#34;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="o">/</span><span class="o">^</span><span class="p">(</span><span class="o">~</span><span class="o">|</span><span class="err">\</span><span class="o">^</span><span class="o">|</span><span class="err">@</span><span class="p">.</span><span class="o">*</span><span class="o">?</span><span class="err">\</span><span class="p">(</span><span class="err">\</span><span class="p">)</span><span class="p">)</span><span class="nx">$</span><span class="o">/</span><span class="nx">u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="sr">/^[0-9*]+$/u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">+</span><span class="s2">&#34;]&#34;</span><span class="o">:</span><span class="s2">&#34;[&#39;&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">+</span><span class="s2">&#34;&#39;]&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPointer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="o">/</span><span class="o">^</span><span class="p">(</span><span class="o">~</span><span class="o">|</span><span class="err">\</span><span class="o">^</span><span class="o">|</span><span class="err">@</span><span class="p">.</span><span class="o">*</span><span class="o">?</span><span class="err">\</span><span class="p">(</span><span class="err">\</span><span class="p">)</span><span class="p">)</span><span class="nx">$</span><span class="o">/</span><span class="nx">u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="s2">&#34;/&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/~/gu</span><span class="p">,</span><span class="s2">&#34;~0&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//gu</span><span class="p">,</span><span class="s2">&#34;~1&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">toPathArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">cache</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">He</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/gu</span><span class="p">,</span><span class="s2">&#34;;$&amp;;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[[&#39;](\??\(.*?\))[\]&#39;]/gu</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[#&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;]&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\[[&#39;&#34;]([^&#39;\]]*)[&#39;&#34;]\]/gu</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[&#39;&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\./gu</span><span class="p">,</span><span class="s2">&#34;%@%&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/~/gu</span><span class="p">,</span><span class="s2">&#34;%%@@%%&#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&#39;]&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/~/gu</span><span class="p">,</span><span class="s2">&#34;;~;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[&#39;&#34;]?\.[&#39;&#34;]?(?![^[]*\])|\[[&#39;&#34;]?/gu</span><span class="p">,</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%@%/gu</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%%@@%%/gu</span><span class="p">,</span><span class="s2">&#34;~&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(?:;)?(\^+)(?:;)?/gu</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;;&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/;;;|;;/gu</span><span class="p">,</span><span class="s2">&#34;;..;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/;$|&#39;?\]|&#39;$/gu</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(\d+)/u</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">?</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">He</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">vm</span><span class="o">=</span><span class="nx">Pe</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ge</span><span class="o">=</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">globalThis</span><span class="o">?</span><span class="nx">globalThis</span><span class="o">:</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">?</span><span class="nb">window</span><span class="o">:</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">global</span><span class="o">?</span><span class="nx">global</span><span class="o">:</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">self</span><span class="o">?</span><span class="nx">self</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ye</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Dynamic requires are not currently supported by rollup-plugin-commonjs&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">qe</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">__esModule</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;default&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ke</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="nx">exports</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">exports</span><span class="p">}</span><span class="kd">var</span> <span class="nx">je</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;&amp;&#34;</span><span class="o">:</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span><span class="o">:</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">,</span><span class="s2">&#34;&#39;&#34;</span><span class="o">:</span><span class="s2">&#34;&amp;#39;&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;&#34;</span><span class="o">:</span><span class="s2">&#34;&amp;lt;&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;&#34;</span><span class="o">:</span><span class="s2">&#34;&amp;gt;&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="sr">/[&amp;&#34;&#39;&lt;&gt;]/g</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&#34;: &#34;</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;message&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="s2">&#34;Template render error&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nb">Error</span><span class="p">.</span><span class="nx">captureStackTrace</span><span class="o">&amp;&amp;</span><span class="nb">Error</span><span class="p">.</span><span class="nx">captureStackTrace</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&#34;stack&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">get</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">stack</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">stack</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">o</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;stack&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="s2">&#34;cause&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">firstUpdate</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">Update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&#34;(&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;unknown path&#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;)&#34;</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">?</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34; [Line &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">+</span><span class="s2">&#34;, Column &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">+</span><span class="s2">&#34;]&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34; [Line &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">+</span><span class="s2">&#34;]&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34;\n &#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">firstUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">message</span><span class="o">=</span><span class="nx">t</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">message</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">firstUpdate</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[object Function]&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[object Array]&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[object String]&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[object Object]&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">E</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="nx">s</span><span class="p">.</span><span class="nx">hasOwnProp</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">_prettifyError</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">Update</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">Update</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nb">Error</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Error</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">TemplateError</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">escape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">isFunction</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">isString</span><span class="o">=</span><span class="nx">u</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">isObject</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">getAttrGetter</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">groupBy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;groupby: attribute &#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34; resolved to undefined&#39;</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">toArray</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">without</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">++</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">E</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">each</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">forEach</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">forEach</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">asyncIter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="o">++</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">asyncFor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">s</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">i</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="nx">E</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">_entries</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">m</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">[</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">_values</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">m</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">_assign</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">m</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">inOperator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="nx">u</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">t</span><span class="p">;</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Cannot use &#34;in&#34; operator to search for &#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s1">&#39;&#34; in unexpected types.&#39;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ve</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;setTimeout has not been defined&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">We</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;clearTimeout has not been defined&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Qe</span><span class="o">=</span><span class="nx">Ve</span><span class="p">,</span><span class="nx">Xe</span><span class="o">=</span><span class="nx">We</span><span class="p">;</span><span class="kd">function</span> <span class="nx">$e</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Qe</span><span class="o">===</span><span class="nx">setTimeout</span><span class="p">)</span><span class="k">return</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">Qe</span><span class="o">===</span><span class="nx">Ve</span><span class="o">||</span><span class="o">!</span><span class="nx">Qe</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">setTimeout</span><span class="p">)</span><span class="k">return</span> <span class="nx">Qe</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">,</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">Qe</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">Qe</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Qe</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">be</span><span class="p">.</span><span class="nx">setTimeout</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Qe</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">be</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Xe</span><span class="o">=</span><span class="nx">clearTimeout</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">ze</span><span class="p">,</span><span class="nx">Je</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">Ze</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">et</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">function</span> <span class="nx">tt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">Ze</span><span class="o">&amp;&amp;</span><span class="nx">ze</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ze</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">ze</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">Je</span><span class="o">=</span><span class="nx">ze</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">Je</span><span class="p">)</span><span class="o">:</span><span class="nx">et</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Je</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">nt</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">nt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">Ze</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">$e</span><span class="p">(</span><span class="nx">tt</span><span class="p">)</span><span class="p">;</span><span class="nx">Ze</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Je</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">ze</span><span class="o">=</span><span class="nx">Je</span><span class="p">,</span><span class="nx">Je</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="o">++</span><span class="nx">et</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="p">)</span><span class="nx">ze</span><span class="o">&amp;&amp;</span><span class="nx">ze</span><span class="p">[</span><span class="nx">et</span><span class="p">]</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">et</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">Je</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="nx">ze</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Ze</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Xe</span><span class="o">===</span><span class="nx">clearTimeout</span><span class="p">)</span><span class="k">return</span> <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">Xe</span><span class="o">===</span><span class="nx">We</span><span class="o">||</span><span class="o">!</span><span class="nx">Xe</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">clearTimeout</span><span class="p">)</span><span class="k">return</span> <span class="nx">Xe</span><span class="o">=</span><span class="nx">clearTimeout</span><span class="p">,</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">Xe</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">Xe</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Xe</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">rt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fun</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="nx">rt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">run</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fun</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">it</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="kd">var</span> <span class="nx">st</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">at</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">ot</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">ct</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">lt</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">ht</span><span class="o">=</span><span class="nx">it</span><span class="p">,</span><span class="nx">ut</span><span class="o">=</span><span class="nx">it</span><span class="p">;</span><span class="kd">var</span> <span class="nx">pt</span><span class="o">=</span><span class="nx">be</span><span class="p">.</span><span class="nx">performance</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">ft</span><span class="o">=</span><span class="nx">pt</span><span class="p">.</span><span class="nx">now</span><span class="o">||</span><span class="nx">pt</span><span class="p">.</span><span class="nx">mozNow</span><span class="o">||</span><span class="nx">pt</span><span class="p">.</span><span class="nx">msNow</span><span class="o">||</span><span class="nx">pt</span><span class="p">.</span><span class="nx">oNow</span><span class="o">||</span><span class="nx">pt</span><span class="p">.</span><span class="nx">webkitNow</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">)</span><span class="p">.</span><span class="nx">getTime</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">dt</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Et</span><span class="o">=</span><span class="p">{</span><span class="nx">nextTick</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="nx">Je</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">rt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="mi">1</span><span class="o">!==</span><span class="nx">Je</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">Ze</span><span class="o">||</span><span class="nx">$e</span><span class="p">(</span><span class="nx">nt</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">title</span><span class="o">:</span><span class="s2">&#34;browser&#34;</span><span class="p">,</span><span class="nx">browser</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">env</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">argv</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">version</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">versions</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">on</span><span class="o">:</span><span class="nx">st</span><span class="p">,</span><span class="nx">addListener</span><span class="o">:</span><span class="nx">at</span><span class="p">,</span><span class="nx">once</span><span class="o">:</span><span class="nx">ot</span><span class="p">,</span><span class="nx">off</span><span class="o">:</span><span class="nx">ct</span><span class="p">,</span><span class="nx">removeListener</span><span class="o">:</span><span class="nx">lt</span><span class="p">,</span><span class="nx">removeAllListeners</span><span class="o">:</span><span class="nx">ht</span><span class="p">,</span><span class="nx">emit</span><span class="o">:</span><span class="nx">ut</span><span class="p">,</span><span class="nx">binding</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;process.binding is not supported&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">cwd</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;/&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">chdir</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;process.chdir is not supported&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">umask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">hrtime</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mf">.001</span><span class="o">*</span><span class="nx">ft</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">pt</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">t</span><span class="o">%</span><span class="mi">1</span><span class="o">*</span><span class="mi">1</span><span class="nx">e9</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">-=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="p">(</span><span class="nx">r</span><span class="o">-=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">--</span><span class="p">,</span><span class="nx">r</span><span class="o">+=</span><span class="mi">1</span><span class="nx">e9</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">platform</span><span class="o">:</span><span class="s2">&#34;browser&#34;</span><span class="p">,</span><span class="nx">release</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">config</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">uptime</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">-</span><span class="nx">dt</span><span class="p">)</span><span class="o">/</span><span class="mi">1</span><span class="nx">e3</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">mt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Tt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">_t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">?</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">defaultMaxListeners</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="p">}</span><span class="kd">function</span> <span class="nx">At</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="o">++</span><span class="nx">s</span><span class="p">)</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">gt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Nt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="o">++</span><span class="nx">o</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ct</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="nx">o</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">It</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">St</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&#34;listener&#34; argument must be a function&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">newListener</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;newListener&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">listener</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">listener</span><span class="o">:</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="o">?</span><span class="p">[</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">n</span><span class="p">]</span><span class="o">:</span><span class="nx">r</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">warned</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">_t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="nx">a</span><span class="p">.</span><span class="nx">warned</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Possible EventEmitter memory leak detected. &#34;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34; listeners added. Use emitter.setMaxListeners() to increase limit&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&#34;MaxListenersExceededWarning&#34;</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">emitter</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">count</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="o">?</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="o">++</span><span class="nx">e</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">bt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">listener</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ot</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">yt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Lt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;error&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">kt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">Lt</span><span class="p">}</span><span class="nx">mt</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="o">=</span><span class="nx">Tt</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">usingDomains</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">defaultMaxListeners</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">usingDomains</span><span class="o">&amp;&amp;</span><span class="kc">undefined</span><span class="p">.</span><span class="nx">active</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">!==</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;number&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&#34;n&#34; argument must be a positive number&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_maxListeners</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMaxListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">_t</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">emit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="s2">&#34;error&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">error</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="o">!</span><span class="nx">o</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="p">)</span><span class="k">throw</span> <span class="nx">t</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Uncaught, unspecified &#34;error&#34; event. (&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">throw</span> <span class="nx">l</span><span class="p">.</span><span class="nx">context</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">}</span><span class="k">return</span> <span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Uncaught, unspecified &#34;error&#34; event&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">domainEmitter</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">domainThrown</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;error&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">At</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">gt</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nx">Nt</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">4</span><span class="o">:</span><span class="nx">Ct</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">,</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="nx">It</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">St</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span><span class="o">=</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addListener</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prependListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">St</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">once</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&#34;listener&#34; argument must be a function&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">bt</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prependOnceListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&#34;listener&#34; argument must be a function&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prependListener</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">bt</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&#34;listener&#34; argument must be a function&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">t</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">listener</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">listener</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="mi">0</span><span class="o">==</span><span class="o">--</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="o">:</span><span class="p">(</span><span class="k">delete</span> <span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;removeListener&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">listener</span><span class="o">||</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">--</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">===</span><span class="nx">t</span><span class="o">||</span><span class="nx">n</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">.</span><span class="nx">listener</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">.</span><span class="nx">listener</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">.</span><span class="nx">listener</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">==</span><span class="o">--</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="p">,</span><span class="k">this</span><span class="p">;</span><span class="k">delete</span> <span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="k">else</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;removeListener&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="o">||</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="o">--</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="o">:</span><span class="k">delete</span> <span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">s</span><span class="p">)</span><span class="s2">&#34;removeListener&#34;</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="p">(</span><span class="s2">&#34;removeListener&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="k">new</span> <span class="nx">mt</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="k">do</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">listeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">listener</span><span class="o">||</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">n</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">.</span><span class="nx">listener</span><span class="o">||</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">listenerCount</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">listenerCount</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">listenerCount</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">Ot</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">listenerCount</span><span class="o">=</span><span class="nx">Ot</span><span class="p">,</span><span class="nx">Tt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">eventNames</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventsCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">ownKeys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">super_</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">writable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">super_</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="nx">Lt</span><span class="p">,</span><span class="nx">Tt</span><span class="p">)</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;error&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s2">&#34;error&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">intercept</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">run</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__emitError</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">e</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">dispose</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">enter</span><span class="o">=</span><span class="nx">Lt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">exit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">vt</span><span class="p">,</span><span class="nx">Dt</span><span class="o">=</span><span class="p">{</span><span class="nx">Domain</span><span class="o">:</span><span class="nx">Lt</span><span class="p">,</span><span class="nx">createDomain</span><span class="o">:</span><span class="nx">kt</span><span class="p">,</span><span class="nx">create</span><span class="o">:</span><span class="nx">kt</span><span class="p">}</span><span class="p">,</span><span class="nx">Rt</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">setImmediate</span><span class="p">,</span><span class="nx">Mt</span><span class="o">=</span><span class="nx">Pt</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Pt</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="p">(</span><span class="nx">Ut</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">wt</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">xt</span><span class="p">[</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="kd">var</span> <span class="nx">xt</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">wt</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">Bt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ft</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">Bt</span><span class="o">&lt;</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">Bt</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Bt</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">xt</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Bt</span><span class="o">&gt;</span><span class="mi">1024</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">Bt</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="nx">xt</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">xt</span><span class="p">[</span><span class="nx">t</span><span class="o">+</span><span class="nx">Bt</span><span class="p">]</span><span class="p">;</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="o">-=</span><span class="nx">Bt</span><span class="p">,</span><span class="nx">Bt</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="nx">xt</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Bt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">wt</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ut</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">Et</span><span class="p">.</span><span class="nx">domain</span><span class="p">;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">vt</span><span class="o">||</span><span class="p">(</span><span class="nx">vt</span><span class="o">=</span><span class="nx">Dt</span><span class="p">)</span><span class="p">,</span><span class="nx">vt</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="nx">Et</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">wt</span><span class="o">&amp;&amp;</span><span class="nx">Rt</span><span class="o">?</span><span class="nx">setImmediate</span><span class="p">(</span><span class="nx">Ft</span><span class="p">)</span><span class="o">:</span><span class="nx">Et</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">Ft</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">vt</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="nx">Et</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">Pt</span><span class="p">.</span><span class="nx">requestFlush</span><span class="o">=</span><span class="nx">Ut</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ht</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">Gt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">Ht</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">Ht</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">Yt</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">task</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="nx">Et</span><span class="p">.</span><span class="nx">domain</span><span class="p">,</span><span class="nx">Mt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Yt</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">task</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">Yt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="p">.</span><span class="nx">enter</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">finally</span><span class="p">{</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">Mt</span><span class="p">.</span><span class="nx">requestFlush</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">task</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domain</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Ht</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">qt</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span><span class="p">;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">setImmediate</span><span class="o">?</span><span class="nx">setImmediate</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">Et</span><span class="o">&amp;&amp;</span><span class="nx">Et</span><span class="p">.</span><span class="nx">nextTick</span><span class="o">?</span><span class="nx">Et</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;[object Array]&#34;</span><span class="o">===</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="o">!</span><span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;First argument to waterfall must be an array of functions&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="nx">c</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">exports</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">s</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">waterfall</span><span class="o">=</span><span class="nx">s</span><span class="p">}</span><span class="p">(</span><span class="nx">Ge</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Kt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">lineno</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">colno</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">jt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">tags</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="o">=</span><span class="p">{</span><span class="nx">BLOCK_START</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">blockStart</span><span class="o">||</span><span class="s2">&#34;{%&#34;</span><span class="p">,</span><span class="nx">BLOCK_END</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">blockEnd</span><span class="o">||</span><span class="s2">&#34;%}&#34;</span><span class="p">,</span><span class="nx">VARIABLE_START</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">variableStart</span><span class="o">||</span><span class="s2">&#34;{{&#34;</span><span class="p">,</span><span class="nx">VARIABLE_END</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">variableEnd</span><span class="o">||</span><span class="s2">&#34;}}&#34;</span><span class="p">,</span><span class="nx">COMMENT_START</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">commentStart</span><span class="o">||</span><span class="s2">&#34;{#&#34;</span><span class="p">,</span><span class="nx">COMMENT_END</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">commentEnd</span><span class="o">||</span><span class="s2">&#34;#}&#34;</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">trimBlocks</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">trimBlocks</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lstripBlocks</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">lstripBlocks</span><span class="p">}</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">nextToken</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s1">&#39;&#34;&#39;</span><span class="o">===</span><span class="nx">r</span><span class="o">||</span><span class="s2">&#34;&#39;&#34;</span><span class="o">===</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_parseString</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extract</span><span class="p">(</span><span class="s2">&#34; \n\t\r &#34;</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;whitespace&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_END</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_END</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">trimBlocks</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="o">===</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;\r&#34;</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;\n&#34;</span><span class="o">===</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">back</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;block-end&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_END</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_END</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;variable-end&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;r&#34;</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="s2">&#34;/&#34;</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">forwardN</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&#34;\\&#34;</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">i</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;g&#34;</span><span class="p">,</span><span class="s2">&#34;i&#34;</span><span class="p">,</span><span class="s2">&#34;m&#34;</span><span class="p">,</span><span class="s2">&#34;y&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">a</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;regex&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">body</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">flags</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="s2">&#34;()[]{}%*-+~/#,:|.&lt;&gt;=!&#34;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;==&#34;</span><span class="p">,</span><span class="s2">&#34;===&#34;</span><span class="p">,</span><span class="s2">&#34;!=&#34;</span><span class="p">,</span><span class="s2">&#34;!==&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;=&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;=&#34;</span><span class="p">,</span><span class="s2">&#34;//&#34;</span><span class="p">,</span><span class="s2">&#34;**&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;(&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;left-paren&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;)&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;right-paren&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;[&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;left-bracket&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;]&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;right-bracket&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;{&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;left-curly&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;}&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;right-curly&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;,&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;comma&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;:&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;colon&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;~&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;tilde&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;|&#34;</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;pipe&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">o</span><span class="o">=</span><span class="s2">&#34;operator&#34;</span><span class="p">}</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractUntil</span><span class="p">(</span><span class="s2">&#34; \n\t\r ()[]{}%*-+~/#,:|.&lt;&gt;=!&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^[-+]?[0-9]+$/</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="s2">&#34;.&#34;</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;float&#34;</span><span class="p">,</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34;.&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_extract</span><span class="p">(</span><span class="s2">&#34;0123456789&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;int&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^(true|false)$/</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;boolean&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;none&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;none&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;null&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;none&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;symbol&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Unexpected value while parsing: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_START</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_START</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_START</span><span class="o">+</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_START</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;block-start&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_START</span><span class="o">+</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_START</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_code</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">Kt</span><span class="p">(</span><span class="s2">&#34;variable-start&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractUntil</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">+=</span><span class="nx">h</span><span class="p">,</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_START</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_START</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">p</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lstripBlocks</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">BLOCK_START</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^\s+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;unexpected end of comment&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">_extractString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">e</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;expected end of comment, got end of file&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Kt</span><span class="p">(</span><span class="nx">p</span><span class="o">?</span><span class="s2">&#34;comment&#34;</span><span class="o">:</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_parseString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="o">!==</span><span class="nx">e</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;\\&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;n&#34;</span><span class="o">:</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34;\n&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;t&#34;</span><span class="o">:</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34;\t&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;r&#34;</span><span class="o">:</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34;\r&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">t</span><span class="o">+=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_matches</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_extractString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_matches</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forwardN</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_extractUntil</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_extractMatching</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_extract</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_extractMatching</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_extractMatching</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">n</span><span class="o">||</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">i</span><span class="o">||</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">r</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="k">return</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_extractRegex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentStr</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forwardN</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">isFinished</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forwardN</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forward</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">++</span><span class="p">,</span><span class="s2">&#34;\n&#34;</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">++</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">backN</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">back</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">back</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">--</span><span class="p">,</span><span class="s2">&#34;\n&#34;</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">--</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">--</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">currentStr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isFinished</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">previous</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Vt</span><span class="o">=</span><span class="p">{</span><span class="nx">lex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">jt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">TOKEN_STRING</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="p">,</span><span class="nx">TOKEN_WHITESPACE</span><span class="o">:</span><span class="s2">&#34;whitespace&#34;</span><span class="p">,</span><span class="nx">TOKEN_DATA</span><span class="o">:</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">TOKEN_BLOCK_START</span><span class="o">:</span><span class="s2">&#34;block-start&#34;</span><span class="p">,</span><span class="nx">TOKEN_BLOCK_END</span><span class="o">:</span><span class="s2">&#34;block-end&#34;</span><span class="p">,</span><span class="nx">TOKEN_VARIABLE_START</span><span class="o">:</span><span class="s2">&#34;variable-start&#34;</span><span class="p">,</span><span class="nx">TOKEN_VARIABLE_END</span><span class="o">:</span><span class="s2">&#34;variable-end&#34;</span><span class="p">,</span><span class="nx">TOKEN_COMMENT</span><span class="o">:</span><span class="s2">&#34;comment&#34;</span><span class="p">,</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="o">:</span><span class="s2">&#34;left-paren&#34;</span><span class="p">,</span><span class="nx">TOKEN_RIGHT_PAREN</span><span class="o">:</span><span class="s2">&#34;right-paren&#34;</span><span class="p">,</span><span class="nx">TOKEN_LEFT_BRACKET</span><span class="o">:</span><span class="s2">&#34;left-bracket&#34;</span><span class="p">,</span><span class="nx">TOKEN_RIGHT_BRACKET</span><span class="o">:</span><span class="s2">&#34;right-bracket&#34;</span><span class="p">,</span><span class="nx">TOKEN_LEFT_CURLY</span><span class="o">:</span><span class="s2">&#34;left-curly&#34;</span><span class="p">,</span><span class="nx">TOKEN_RIGHT_CURLY</span><span class="o">:</span><span class="s2">&#34;right-curly&#34;</span><span class="p">,</span><span class="nx">TOKEN_OPERATOR</span><span class="o">:</span><span class="s2">&#34;operator&#34;</span><span class="p">,</span><span class="nx">TOKEN_COMMA</span><span class="o">:</span><span class="s2">&#34;comma&#34;</span><span class="p">,</span><span class="nx">TOKEN_COLON</span><span class="o">:</span><span class="s2">&#34;colon&#34;</span><span class="p">,</span><span class="nx">TOKEN_TILDE</span><span class="o">:</span><span class="s2">&#34;tilde&#34;</span><span class="p">,</span><span class="nx">TOKEN_PIPE</span><span class="o">:</span><span class="s2">&#34;pipe&#34;</span><span class="p">,</span><span class="nx">TOKEN_INT</span><span class="o">:</span><span class="s2">&#34;int&#34;</span><span class="p">,</span><span class="nx">TOKEN_FLOAT</span><span class="o">:</span><span class="s2">&#34;float&#34;</span><span class="p">,</span><span class="nx">TOKEN_BOOLEAN</span><span class="o">:</span><span class="s2">&#34;boolean&#34;</span><span class="p">,</span><span class="nx">TOKEN_NONE</span><span class="o">:</span><span class="s2">&#34;none&#34;</span><span class="p">,</span><span class="nx">TOKEN_SYMBOL</span><span class="o">:</span><span class="s2">&#34;symbol&#34;</span><span class="p">,</span><span class="nx">TOKEN_SPECIAL</span><span class="o">:</span><span class="s2">&#34;special&#34;</span><span class="p">,</span><span class="nx">TOKEN_REGEX</span><span class="o">:</span><span class="s2">&#34;regex&#34;</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Wt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">enumerable</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">enumerable</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">configurable</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="k">in</span> <span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">writable</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Qt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">Wt</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">Wt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Xt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">$t</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$t</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">$t</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">$t</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">zt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="k">return</span> <span class="nx">Xt</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">Qt</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">_assign</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Jt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="s2">&#34;anonymous&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">zt</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Qt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Zt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="k">return</span> <span class="nx">Xt</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="s2">&#34;anonymous&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">zt</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Qt</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">Tt</span><span class="p">)</span><span class="p">,</span><span class="nx">en</span><span class="o">=</span><span class="p">{</span><span class="nx">Obj</span><span class="o">:</span><span class="nx">Jt</span><span class="p">,</span><span class="nx">EmitterObj</span><span class="o">:</span><span class="nx">Zt</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">tn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">enumerable</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">enumerable</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">configurable</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="k">in</span> <span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">writable</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">nn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">tn</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">tn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">rn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">sn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">sn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">sn</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">sn</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">an</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">on</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">findAll</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">on</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">rn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">arguments</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">?</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="o">:</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lineno</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">colno</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">findAll</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">ln</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">an</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">an</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">iterFields</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">en</span><span class="p">.</span><span class="nx">Obj</span><span class="p">)</span><span class="p">,</span><span class="nx">cn</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="k">return</span> <span class="nx">rn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">nn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;Value&#34;</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;fields&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">[</span><span class="s2">&#34;value&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">on</span><span class="p">)</span><span class="p">,</span><span class="nx">ln</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">rn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addChild</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">nn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;NodeList&#34;</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;fields&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">[</span><span class="s2">&#34;children&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">on</span><span class="p">)</span><span class="p">,</span><span class="nx">hn</span><span class="o">=</span><span class="nx">ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Root&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">un</span><span class="o">=</span><span class="nx">cn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Literal&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">pn</span><span class="o">=</span><span class="nx">cn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Symbol&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">fn</span><span class="o">=</span><span class="nx">ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Group&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">dn</span><span class="o">=</span><span class="nx">ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Array&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">En</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Pair&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">mn</span><span class="o">=</span><span class="nx">ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Dict&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Tn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;LookupVal&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;target&#34;</span><span class="p">,</span><span class="s2">&#34;val&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">_n</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;If&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;cond&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">,</span><span class="s2">&#34;else_&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">An</span><span class="o">=</span><span class="nx">_n</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;IfAsync&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">gn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;InlineIf&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;cond&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">,</span><span class="s2">&#34;else_&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Nn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;For&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;arr&#34;</span><span class="p">,</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">,</span><span class="s2">&#34;else_&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Cn</span><span class="o">=</span><span class="nx">Nn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;AsyncEach&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">In</span><span class="o">=</span><span class="nx">Nn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;AsyncAll&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Sn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Macro&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;args&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">bn</span><span class="o">=</span><span class="nx">Sn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Caller&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">On</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Import&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;template&#34;</span><span class="p">,</span><span class="s2">&#34;target&#34;</span><span class="p">,</span><span class="s2">&#34;withContext&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">yn</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="k">return</span> <span class="nx">rn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">||</span><span class="k">new</span> <span class="nx">ln</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">nn</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">[</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;typename&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;FromImport&#34;</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="s2">&#34;fields&#34;</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">[</span><span class="s2">&#34;template&#34;</span><span class="p">,</span><span class="s2">&#34;names&#34;</span><span class="p">,</span><span class="s2">&#34;withContext&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">}</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">on</span><span class="p">)</span><span class="p">,</span><span class="nx">Ln</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;FunCall&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;args&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">kn</span><span class="o">=</span><span class="nx">Ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Filter&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">vn</span><span class="o">=</span><span class="nx">kn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;FilterAsync&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;args&#34;</span><span class="p">,</span><span class="s2">&#34;symbol&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Dn</span><span class="o">=</span><span class="nx">mn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;KeywordArgs&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Rn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Block&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Mn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Super&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;blockName&#34;</span><span class="p">,</span><span class="s2">&#34;symbol&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Pn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;TemplateRef&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;template&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Extends&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">xn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Include&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;template&#34;</span><span class="p">,</span><span class="s2">&#34;ignoreMissing&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">wn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Set&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;targets&#34;</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Bn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Switch&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;expr&#34;</span><span class="p">,</span><span class="s2">&#34;cases&#34;</span><span class="p">,</span><span class="s2">&#34;default&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Fn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;cond&#34;</span><span class="p">,</span><span class="s2">&#34;body&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Un</span><span class="o">=</span><span class="nx">ln</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Output&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Hn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Capture&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Gn</span><span class="o">=</span><span class="nx">un</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;TemplateData&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Yn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;UnaryOp&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;target&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">qn</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;BinOp&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;left&#34;</span><span class="p">,</span><span class="s2">&#34;right&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Kn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;In&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">jn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Is&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Vn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Or&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Wn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;And&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Qn</span><span class="o">=</span><span class="nx">Yn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Not&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Xn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Add&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">$n</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Concat&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">zn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Sub&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Jn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Mul&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">Zn</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Div&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">er</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;FloorDiv&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">tr</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Mod&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">nr</span><span class="o">=</span><span class="nx">qn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Pow&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">rr</span><span class="o">=</span><span class="nx">Yn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Neg&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">ir</span><span class="o">=</span><span class="nx">Yn</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Pos&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">sr</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;Compare&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;expr&#34;</span><span class="p">,</span><span class="s2">&#34;ops&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">ar</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;CompareOperand&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;expr&#34;</span><span class="p">,</span><span class="s2">&#34;type&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">or</span><span class="o">=</span><span class="nx">on</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;CallExtension&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">init</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extName</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__name</span><span class="o">||</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">prop</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="k">new</span> <span class="nx">ln</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">contentArgs</span><span class="o">=</span><span class="nx">r</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">autoescape</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">autoescape</span><span class="p">}</span><span class="p">,</span><span class="nx">fields</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;extName&#34;</span><span class="p">,</span><span class="s2">&#34;prop&#34;</span><span class="p">,</span><span class="s2">&#34;args&#34;</span><span class="p">,</span><span class="s2">&#34;contentArgs&#34;</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">cr</span><span class="o">=</span><span class="nx">or</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&#34;CallExtensionAsync&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">lr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="o">!</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Et</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="s2">&#34;\n&#34;</span><span class="p">;</span><span class="nx">Et</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">hr</span><span class="o">=</span><span class="p">{</span><span class="nx">Node</span><span class="o">:</span><span class="nx">on</span><span class="p">,</span><span class="nx">Root</span><span class="o">:</span><span class="nx">hn</span><span class="p">,</span><span class="nx">NodeList</span><span class="o">:</span><span class="nx">ln</span><span class="p">,</span><span class="nx">Value</span><span class="o">:</span><span class="nx">cn</span><span class="p">,</span><span class="nx">Literal</span><span class="o">:</span><span class="nx">un</span><span class="p">,</span><span class="nx">Symbol</span><span class="o">:</span><span class="nx">pn</span><span class="p">,</span><span class="nx">Group</span><span class="o">:</span><span class="nx">fn</span><span class="p">,</span><span class="nb">Array</span><span class="o">:</span><span class="nx">dn</span><span class="p">,</span><span class="nx">Pair</span><span class="o">:</span><span class="nx">En</span><span class="p">,</span><span class="nx">Dict</span><span class="o">:</span><span class="nx">mn</span><span class="p">,</span><span class="nx">Output</span><span class="o">:</span><span class="nx">Un</span><span class="p">,</span><span class="nx">Capture</span><span class="o">:</span><span class="nx">Hn</span><span class="p">,</span><span class="nx">TemplateData</span><span class="o">:</span><span class="nx">Gn</span><span class="p">,</span><span class="nx">If</span><span class="o">:</span><span class="nx">_n</span><span class="p">,</span><span class="nx">IfAsync</span><span class="o">:</span><span class="nx">An</span><span class="p">,</span><span class="nx">InlineIf</span><span class="o">:</span><span class="nx">gn</span><span class="p">,</span><span class="nx">For</span><span class="o">:</span><span class="nx">Nn</span><span class="p">,</span><span class="nx">AsyncEach</span><span class="o">:</span><span class="nx">Cn</span><span class="p">,</span><span class="nx">AsyncAll</span><span class="o">:</span><span class="nx">In</span><span class="p">,</span><span class="nx">Macro</span><span class="o">:</span><span class="nx">Sn</span><span class="p">,</span><span class="nx">Caller</span><span class="o">:</span><span class="nx">bn</span><span class="p">,</span><span class="nx">Import</span><span class="o">:</span><span class="nx">On</span><span class="p">,</span><span class="nx">FromImport</span><span class="o">:</span><span class="nx">yn</span><span class="p">,</span><span class="nx">FunCall</span><span class="o">:</span><span class="nx">Ln</span><span class="p">,</span><span class="nx">Filter</span><span class="o">:</span><span class="nx">kn</span><span class="p">,</span><span class="nx">FilterAsync</span><span class="o">:</span><span class="nx">vn</span><span class="p">,</span><span class="nx">KeywordArgs</span><span class="o">:</span><span class="nx">Dn</span><span class="p">,</span><span class="nx">Block</span><span class="o">:</span><span class="nx">Rn</span><span class="p">,</span><span class="nx">Super</span><span class="o">:</span><span class="nx">Mn</span><span class="p">,</span><span class="nx">Extends</span><span class="o">:</span><span class="nx">Pn</span><span class="p">,</span><span class="nx">Include</span><span class="o">:</span><span class="nx">xn</span><span class="p">,</span><span class="nx">Set</span><span class="o">:</span><span class="nx">wn</span><span class="p">,</span><span class="nx">Switch</span><span class="o">:</span><span class="nx">Bn</span><span class="p">,</span><span class="nx">Case</span><span class="o">:</span><span class="nx">Fn</span><span class="p">,</span><span class="nx">LookupVal</span><span class="o">:</span><span class="nx">Tn</span><span class="p">,</span><span class="nx">BinOp</span><span class="o">:</span><span class="nx">qn</span><span class="p">,</span><span class="nx">In</span><span class="o">:</span><span class="nx">Kn</span><span class="p">,</span><span class="nx">Is</span><span class="o">:</span><span class="nx">jn</span><span class="p">,</span><span class="nx">Or</span><span class="o">:</span><span class="nx">Vn</span><span class="p">,</span><span class="nx">And</span><span class="o">:</span><span class="nx">Wn</span><span class="p">,</span><span class="nx">Not</span><span class="o">:</span><span class="nx">Qn</span><span class="p">,</span><span class="nx">Add</span><span class="o">:</span><span class="nx">Xn</span><span class="p">,</span><span class="nx">Concat</span><span class="o">:</span><span class="nx">$n</span><span class="p">,</span><span class="nx">Sub</span><span class="o">:</span><span class="nx">zn</span><span class="p">,</span><span class="nx">Mul</span><span class="o">:</span><span class="nx">Jn</span><span class="p">,</span><span class="nx">Div</span><span class="o">:</span><span class="nx">Zn</span><span class="p">,</span><span class="nx">FloorDiv</span><span class="o">:</span><span class="nx">er</span><span class="p">,</span><span class="nx">Mod</span><span class="o">:</span><span class="nx">tr</span><span class="p">,</span><span class="nx">Pow</span><span class="o">:</span><span class="nx">nr</span><span class="p">,</span><span class="nx">Neg</span><span class="o">:</span><span class="nx">rr</span><span class="p">,</span><span class="nx">Pos</span><span class="o">:</span><span class="nx">ir</span><span class="p">,</span><span class="nx">Compare</span><span class="o">:</span><span class="nx">sr</span><span class="p">,</span><span class="nx">CompareOperand</span><span class="o">:</span><span class="nx">ar</span><span class="p">,</span><span class="nx">CallExtension</span><span class="o">:</span><span class="nx">or</span><span class="p">,</span><span class="nx">CallExtensionAsync</span><span class="o">:</span><span class="nx">cr</span><span class="p">,</span><span class="nx">printNodes</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">lr</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">typename</span><span class="o">+</span><span class="s2">&#34;: &#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">ln</span><span class="p">)</span><span class="nx">lr</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">or</span><span class="p">)</span><span class="nx">lr</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">extName</span><span class="o">+</span><span class="s2">&#34;.&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">prop</span><span class="o">+</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">args</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">contentArgs</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">contentArgs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">iterFields</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">on</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">[</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">?</span><span class="nx">lr</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;\n&#34;</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">lr</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="nx">lr</span><span class="p">(</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;] =&gt;&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ur</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ur</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">ur</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Root</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Dict</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Capture</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">TemplateData</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">If</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">IfAsync</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">InlineIf</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">For</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncEach</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncAll</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Macro</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Caller</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Import</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FromImport</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FunCall</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Filter</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FilterAsync</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">KeywordArgs</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Block</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Super</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Extends</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Include</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Switch</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Case</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">LookupVal</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">BinOp</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">In</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Is</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Or</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">And</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Not</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Add</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Concat</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Sub</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Mul</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Div</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FloorDiv</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Mod</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Pow</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Neg</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Pos</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Compare</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">CompareOperand</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtension</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtensionAsync</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">printNodes</span><span class="p">;</span><span class="kd">var</span> <span class="nx">pr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">ur</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">nextToken</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_WHITESPACE</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_WHITESPACE</span><span class="p">;</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">peekToken</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">pushToken</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;pushToken: can only push one token on between reads&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">peeked</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">error</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">}</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">fail</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">this</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">skip</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">expect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected &#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34;, got &#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">skipValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">e</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">!==</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;unexpected end of file&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;advanceAfterBlockEnd: expected symbol token or explicit name to be passed&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_END</span><span class="o">?</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected block end in &#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34; statement&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">advanceAfterVariableEnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_VARIABLE_END</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_END</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected variable end&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;for&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">For</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;endfor&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;asyncEach&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncEach</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;endeach&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;asyncAll&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncAll</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;endall&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFor: expected for{Async}&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFor: variable name expected for loop&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nb">Array</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;in&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s1">&#39;parseFor: expected &#34;in&#34; keyword for loop&#39;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">arr</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;else&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;else&#34;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="s2">&#34;else&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseMacro</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;macro&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected macro&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseSignature</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Macro</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endmacro&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseCall</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;call&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected call&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseSignature</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">||</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endcall&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="s2">&#34;caller&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">KeywordArgs</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">KeywordArgs</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseWithContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;with&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;without&#34;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;context&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: expected context after with/without&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseImport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;import&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseImport: expected import&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;as&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s1">&#39;parseImport: expected &#34;as&#34; keyword&#39;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseWithContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Import</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFrom</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;from&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: expected from&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;import&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: expected import&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">;</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_END</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: Expected at least one import name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: expected comma&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;_&#34;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFrom: names starting with an underscore cannot be imported&#34;</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;as&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">r</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseWithContext</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FromImport</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseBlock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;block&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseBlock: expected block&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Block</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseBlock: variable name expected&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endblock&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;endblock&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseBlock: expected endblock, got end of file&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseExtends</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">&#34;extends&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseTemplateRef: expected extends&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Extends</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">template</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseInclude</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">&#34;include&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseInclude: expected include&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Include</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">template</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;missing&#34;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">ignoreMissing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseIf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;if&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;elif&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;elseif&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">If</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;ifAsync&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">IfAsync</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseIf: expected if, elif, or elseif&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;elif&#34;</span><span class="p">,</span><span class="s2">&#34;elseif&#34;</span><span class="p">,</span><span class="s2">&#34;else&#34;</span><span class="p">,</span><span class="s2">&#34;endif&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;elseif&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;elif&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseIf</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;else&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endif&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;endif&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseIf: expected elif, else, or endif, got end of file&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseSet</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseSet: expected set&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;=&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_END</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Capture</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endset&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseSet: expected = or block end in set tag&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseSwitch</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">&#34;switch&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;endswitch&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="s2">&#34;case&#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="s2">&#34;default&#34;</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s1">&#39;parseSwitch: expected &#34;switch,&#34; &#34;case&#34; or &#34;default&#34;&#39;</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Case</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">line</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">col</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">value</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">r</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">t</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s1">&#39;parseSwitch: expected &#34;case,&#34; &#34;default&#34; or &#34;endswitch,&#34; got EOF.&#39;</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Switch</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseStatement</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;tag name expected&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;raw&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseRaw</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;verbatim&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseRaw</span><span class="p">(</span><span class="s2">&#34;verbatim&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;if&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;ifAsync&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseIf</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;for&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;asyncEach&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;asyncAll&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseFor</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;block&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseBlock</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;extends&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseExtends</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;include&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseInclude</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;set&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseSet</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;macro&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseMacro</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;call&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseCall</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;import&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseImport</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;from&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseFrom</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;filter&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseFilterStatement</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;switch&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseSwitch</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">tags</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">hr</span><span class="p">,</span><span class="nx">Vt</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;unknown block tag: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseRaw</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&#34;end&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;raw&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&#34;([\\s\\S]*?){%\\s*(&#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34;|&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;)\\s*(?=%})%}&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">_extractRegex</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">;</span><span class="nx">l</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nx">r</span><span class="o">+=</span><span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="o">===</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">-=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="o">+=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">backN</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="o">+=</span><span class="nx">o</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">TemplateData</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parsePostfix</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FunCall</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseSignature</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_BRACKET</span><span class="p">)</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAggregate</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;invalid index&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">LookupVal</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="o">||</span><span class="s2">&#34;.&#34;</span><span class="o">!==</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected name as lookup value, got &#34;</span><span class="o">+</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">LookupVal</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseExpression</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseInlineIf</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseInlineIf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseOr</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;if&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseOr</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">InlineIf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;else&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseOr</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseOr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;or&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Or</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseAnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseNot</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;and&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseNot</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">And</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseNot</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;not&#34;</span><span class="p">)</span><span class="o">?</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Not</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseNot</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">parseIn</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseIn</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseIs</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="o">&amp;&amp;</span><span class="s2">&#34;not&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;in&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseIs</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">In</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Not</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseIs</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseCompare</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;is&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;not&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseCompare</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Is</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Not</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseCompare</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;==&#34;</span><span class="p">,</span><span class="s2">&#34;===&#34;</span><span class="p">,</span><span class="s2">&#34;!=&#34;</span><span class="p">,</span><span class="s2">&#34;!==&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;=&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;=&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseConcat</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">CompareOperand</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseConcat</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Compare</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseConcat</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAdd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_TILDE</span><span class="p">,</span><span class="s2">&#34;~&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAdd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseAdd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseSub</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;+&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseSub</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseSub</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseMul</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseMul</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseMul</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseDiv</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;*&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseDiv</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Mul</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseDiv</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFloorDiv</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFloorDiv</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Div</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFloorDiv</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseMod</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;//&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseMod</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FloorDiv</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseMod</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePow</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;%&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePow</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Mod</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parsePow</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUnary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;**&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUnary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pow</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseUnary</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="o">?</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Neg</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUnary</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;+&#34;</span><span class="p">)</span><span class="o">?</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pos</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUnary</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFilter</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_STRING</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_INT</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_FLOAT</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BOOLEAN</span><span class="o">?</span><span class="s2">&#34;true&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="o">:</span><span class="s2">&#34;false&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;invalid boolean: &#34;</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_NONE</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_REGEX</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">flags</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected expression, got end of file&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pushToken</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseAggregate</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePostfix</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span> <span class="nx">r</span><span class="p">;</span><span class="k">throw</span> <span class="k">this</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&#34;unexpected token: &#34;</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFilterName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;.&#34;</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">t</span><span class="o">+=</span><span class="s2">&#34;.&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_SYMBOL</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFilterArgs</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePostfix</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">children</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFilter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_PIPE</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFilterName</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFilterArgs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseFilterStatement</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipSymbol</span><span class="p">(</span><span class="s2">&#34;filter&#34;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseFilterStatement: expected filter&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFilterName</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseFilterArgs</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Capture</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="p">(</span><span class="s2">&#34;endfilter&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterBlockEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseAggregate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Group</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_BRACKET</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nb">Array</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_CURLY</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Dict</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_RIGHT_PAREN</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_RIGHT_BRACKET</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_RIGHT_CURLY</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseAggregate: expected comma after expression&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Dict</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parsePrimary</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COLON</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseAggregate: expected colon after dict key&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseSignature</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;expected arguments&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">}</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_LEFT_PAREN</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">KeywordArgs</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_RIGHT_PAREN</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_END</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMA</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;parseSignature: expected comma after expression&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipValue</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_OPERATOR</span><span class="p">,</span><span class="s2">&#34;=&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="nx">s</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseUntilBlocks</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">breakOnBlocks</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseNodes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">nextToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_DATA</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">peekToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_START</span><span class="o">&amp;&amp;</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">||</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_VARIABLE_START</span><span class="o">&amp;&amp;</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">VARIABLE_START</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">||</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMENT</span><span class="o">&amp;&amp;</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">TemplateData</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_BLOCK_START</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseStatement</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_VARIABLE_START</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseExpression</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advanceAfterVariableEnd</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">TOKEN_COMMENT</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">dropLeadingWhitespace</span><span class="o">=</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;Unexpected token at top-level: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseNodes</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parseAsRoot</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Root</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parseNodes</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">en</span><span class="p">.</span><span class="nx">Obj</span><span class="p">)</span><span class="p">,</span><span class="nx">fr</span><span class="o">=</span><span class="p">{</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">pr</span><span class="p">(</span><span class="nx">Vt</span><span class="p">.</span><span class="nx">lex</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">extensions</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">parseAsRoot</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Parser</span><span class="o">:</span><span class="nx">pr</span><span class="p">}</span><span class="p">,</span><span class="nx">dr</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Er</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;hole_&#34;</span><span class="o">+</span><span class="nx">dr</span><span class="o">++</span><span class="p">}</span><span class="kd">function</span> <span class="nx">mr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="o">!==</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="o">||</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">mr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtension</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">mr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">contentArgs</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">contentArgs</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">extName</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prop</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">mr</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">c</span><span class="o">!==</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">_r</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">_r</span><span class="p">(</span><span class="nx">n</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Block</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Filter</span><span class="o">&amp;&amp;</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtensionAsync</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">Er</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FilterAsync</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">gr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">_r</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">If</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">For</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FilterAsync</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">IfAsync</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncEach</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncAll</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtensionAsync</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">If</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">IfAsync</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">For</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncAll</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">AsyncEach</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">arr</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">Er</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="nx">Tr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">FunCall</span><span class="o">&amp;&amp;</span><span class="s2">&#34;super&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Super</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">_r</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Output</span><span class="o">?</span><span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Set</span><span class="o">?</span><span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">For</span><span class="o">?</span><span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;arr&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">If</span><span class="o">?</span><span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;cond&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">CallExtension</span><span class="o">?</span><span class="nx">Ar</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;args&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Nr</span><span class="o">=</span><span class="p">{</span><span class="nx">transform</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">gr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">Cr</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">,</span><span class="nx">Ir</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Symbol</span><span class="o">&amp;&amp;</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="o">&amp;&amp;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Cr</span><span class="p">,</span><span class="nx">Sr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">topLevel</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">isolateWrites</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="nx">i</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">}</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">get</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">resolve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">isolateWrites</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">pop</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">}</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">br</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;__keywords&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Or</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">br</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">yr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">br</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Lr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">val</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&#34;length&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">writable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="nx">Lr</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="p">{</span><span class="nx">writable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Lr</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">valueOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">val</span><span class="p">}</span><span class="p">,</span><span class="nx">Lr</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">val</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">kr</span><span class="o">=</span><span class="p">{</span><span class="nx">Frame</span><span class="o">:</span><span class="nx">Sr</span><span class="p">,</span><span class="nx">makeMacro</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">yr</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">Or</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="k">delete</span> <span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">makeKeywordArgs</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__keywords</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">numArgs</span><span class="o">:</span><span class="nx">yr</span><span class="p">,</span><span class="nx">suppressValue</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">?</span><span class="k">new</span> <span class="nx">Lr</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Lr</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">escape</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">ensureDefined</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="s2">&#34;attempted to output null or undefined value&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">memberLookup</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">contextOrFrameLookup</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">callWrap</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Unable to call `&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;`, which is undefined or falsey&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Unable to call `&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;`, which is not a function&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">handleError</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">isArray</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">,</span><span class="nx">keys</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">,</span><span class="nx">SafeString</span><span class="o">:</span><span class="nx">Lr</span><span class="p">,</span><span class="nx">copySafeness</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Lr</span><span class="o">?</span><span class="k">new</span> <span class="nx">Lr</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">markSafe</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;string&#34;</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">new</span> <span class="nx">Lr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;function&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="o">?</span><span class="k">new</span> <span class="nx">Lr</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">asyncEach</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">je</span><span class="p">.</span><span class="nx">asyncIter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">je</span><span class="p">.</span><span class="nx">asyncFor</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">asyncAll</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">a</span><span class="o">++</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">a</span><span class="o">===</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="nx">r</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="nx">r</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">u</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">u</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">inOperator</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">inOperator</span><span class="p">,</span><span class="nx">fromIterator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;object&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">Ir</span><span class="o">&amp;&amp;</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span> <span class="k">in</span> <span class="nx">e</span><span class="o">?</span><span class="nx">Cr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">vr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">vr</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">vr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">kr</span><span class="p">.</span><span class="nx">Frame</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">makeMacro</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">makeKeywordArgs</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">numArgs</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">suppressValue</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">ensureDefined</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">memberLookup</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">contextOrFrameLookup</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">callWrap</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">handleError</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">isArray</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">keys</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">markSafe</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">asyncEach</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">asyncAll</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">inOperator</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">fromIterator</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Dr</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">,</span><span class="nx">Rr</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">Frame</span><span class="p">,</span><span class="nx">Mr</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;==&#34;</span><span class="o">:</span><span class="s2">&#34;==&#34;</span><span class="p">,</span><span class="s2">&#34;===&#34;</span><span class="o">:</span><span class="s2">&#34;===&#34;</span><span class="p">,</span><span class="s2">&#34;!=&#34;</span><span class="o">:</span><span class="s2">&#34;!=&#34;</span><span class="p">,</span><span class="s2">&#34;!==&#34;</span><span class="o">:</span><span class="s2">&#34;!==&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;&#34;</span><span class="o">:</span><span class="s2">&#34;&lt;&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;&#34;</span><span class="o">:</span><span class="s2">&#34;&gt;&#34;</span><span class="p">,</span><span class="s2">&#34;&lt;=&#34;</span><span class="o">:</span><span class="s2">&#34;&lt;=&#34;</span><span class="p">,</span><span class="s2">&#34;&gt;=&#34;</span><span class="o">:</span><span class="s2">&#34;&gt;=&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">Pr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">vr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">templateName</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">codebuf</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastId</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bufferStack</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inBlock</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">fail</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">new</span> <span class="nx">Dr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_pushBuffer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">bufferStack</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s1">&#39; = &#34;&#34;;&#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_popBuffer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bufferStack</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">codebuf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitLine</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitLines</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitFuncBegin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="s2">&#34;output&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;function &#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;(env, context, frame, runtime, cb) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var lineno = &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var colno = &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s1">&#39; = &#34;&#34;;&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;try {&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitFuncEnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;cb(null, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_closeScopeLevels</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;} catch (e) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;  cb(runtime.handleError(e, lineno, colno));&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">+=</span><span class="s2">&#34;})&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_closeScopeLevels</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_closeScopeLevels</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_scopeClosers</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;function(&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;,&#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;) {\nif(&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;) { cb(&#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;); return; }&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_tmpid</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastId</span><span class="o">++</span><span class="p">,</span><span class="s2">&#34;t_&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastId</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_templateName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">templateName</span><span class="o">?</span><span class="s2">&#34;undefined&#34;</span><span class="o">:</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">templateName</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileChildren</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">assertType</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nb">Array</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Dict</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FunCall</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Caller</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Filter</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">LookupVal</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Compare</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">InlineIf</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">In</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Is</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">And</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Or</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Not</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Add</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Concat</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Sub</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Mul</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Div</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">FloorDiv</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Mod</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Pow</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Neg</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Pos</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Compare</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">assertType</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;assertType: invalid type: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileCallExtension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">contentArgs</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;boolean&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">autoescape</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">autoescape</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += runtime.suppressValue(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;env.getExtension(&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">extName</span><span class="o">+</span><span class="s1">&#39;&#34;)[&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">prop</span><span class="o">+</span><span class="s1">&#39;&#34;](&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;context&#34;</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">i</span><span class="o">||</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">NodeList</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;compileCallExtension: arguments must be a NodeList, use `parser.parseSignature`&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">n</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">||</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;function(cb) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(!cb) { cb = function(err) { if(err) { throw err; }}}&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">_pushBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;cb(null, &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_popBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;return &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;null&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += runtime.suppressValue(&#34;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34; &amp;&amp; env.opts.autoescape);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34; &amp;&amp; env.opts.autoescape);\n&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileCallExtensionAsync</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compileCallExtension</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileNodeList</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileChildren</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileLiteral</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\\/g</span><span class="p">,</span><span class="s2">&#34;\\\\&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&#34;/g</span><span class="p">,</span><span class="s1">&#39;\\&#34;&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">,</span><span class="s2">&#34;\\n&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\r/g</span><span class="p">,</span><span class="s2">&#34;\\r&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\t/g</span><span class="p">,</span><span class="s2">&#34;\\t&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\u2028/g</span><span class="p">,</span><span class="s2">&#34;\\u2028&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;null&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileSymbol</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;runtime.contextOrFrameLookup(context, frame, &#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;)&#39;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileGroup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;(&#34;</span><span class="p">,</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;[&#34;</span><span class="p">,</span><span class="s2">&#34;]&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileDict</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;{&#34;</span><span class="p">,</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compilePair</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Literal</span><span class="o">&amp;&amp;</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;compilePair: Dict keys must be strings or names&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileInlineIf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;?&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;&#34;&#34;&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileIn</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.inOperator(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileIs</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">name</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;env.getTest(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;).call(context, &#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">args</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;) === true&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileOr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; || &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileAnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; &amp;&amp; &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileAdd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; + &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileConcat</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s1">&#39; + &#34;&#34; + &#39;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileSub</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; - &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileMul</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; * &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileDiv</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; / &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileMod</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_binOpEmitter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34; % &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileNot</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;!&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFloorDiv</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;Math.floor(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34; / &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compilePow</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;Math.pow(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileNeg</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compilePos</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;+&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileCompare</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">expr</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ops</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">Mr</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">]</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">expr</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileLookupVal</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.memberLookup((&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;),&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">val</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_getNodeName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;Symbol&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;FunCall&#34;</span><span class="o">:</span><span class="k">return</span><span class="s2">&#34;the return value of (&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_getNodeName</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;)&#34;</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;LookupVal&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getNodeName</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;[&#34;&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_getNodeName</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">val</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#34;]&#39;</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;Literal&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span><span class="s2">&#34;--expression--&#34;</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFunCall</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;(lineno = &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="o">+</span><span class="s2">&#34;, colno = &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.callWrap(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;, &#34;&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_getNodeName</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&#34;/g</span><span class="p">,</span><span class="s1">&#39;\\&#34;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#34;, context, &#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;[&#34;</span><span class="p">,</span><span class="s2">&#34;])&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFilter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">assertType</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;env.getFilter(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;).call(context, &#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFilterAsync</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">symbol</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">assertType</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;env.getFilter(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;).call(context, &#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAggregate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileKeywordArgs</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.makeKeywordArgs(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compileDict</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileSet</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; = &#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; = &#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">targets</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;, true);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(frame.topLevel) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.setVariable(&#34;&#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;_&#34;</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(frame.topLevel) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.addExport(&#34;&#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileSwitch</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;switch (&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">expr</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cases</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;case &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;break;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="k">default</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;default:&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="k">default</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileIf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;if(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">cond</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;cb()&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}\nelse {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;cb()&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}\nelse {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;cb()&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileIfAsync</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;(function(cb) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compileIf</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;})(&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitLoopBindings</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="p">[</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;index&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34; + 1&#34;</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;index0&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;revindex&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; - &#34;</span><span class="o">+</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;revindex0&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; - &#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34; - 1&#34;</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;first&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34; === 0&#34;</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;last&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34; === &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; - 1&#34;</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;length&#34;</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">]</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;loop.&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">val</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;frame = frame.push();&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">arr</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;if(&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34; = runtime.fromIterator(&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nb">Array</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(runtime.isArray(&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;)) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;.length;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;for(&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;=0; &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; &lt; &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;.length; &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;++) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;][&#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;];&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;][&#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;]);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLoopBindings</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;} else {&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; = -1;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34; = runtime.keys(&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;).length;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;for(var &#34;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&#34; in &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;++;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">h</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&#34;];&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">h</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLoopBindings</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">u</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;.length;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;for(var &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;=0; &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; &lt; &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;.length; &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;++) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">u</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;];&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">u</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLoopBindings</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if (!&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;frame = frame.pop();&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileAsyncLoop</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="o">?</span><span class="s2">&#34;asyncAll&#34;</span><span class="o">:</span><span class="s2">&#34;asyncEach&#34;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;frame = frame.push();&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34; = runtime.fromIterator(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">arr</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nb">Array</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.&#34;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&#34;(&#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&#34;, function(&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;,&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;,next) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;runtime.&#34;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&#34;(&#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;, 1, function(&#34;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;,next) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLoopBindings</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">_pushBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;next(&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="p">(</span><span class="nx">s</span><span class="o">?</span><span class="s2">&#34;,&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">_popBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += &#34;</span><span class="o">+</span><span class="nx">h</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if (!&#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;.length) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">else_</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;frame = frame.pop();&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileAsyncEach</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAsyncLoop</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileAsyncAll</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileAsyncLoop</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileMacro</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="s2">&#34;macro_&#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="nx">s</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Dict</span><span class="o">?</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="o">:</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">assertType</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Symbol</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;l_&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;kwargs&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">Rr</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLines</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34; = runtime.makeMacro(&#34;</span><span class="p">,</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">l</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;], &#34;</span><span class="p">,</span><span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;], &#34;</span><span class="p">,</span><span class="s2">&#34;function (&#34;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;) {&#34;</span><span class="p">,</span><span class="s2">&#34;var callerFrame = frame;&#34;</span><span class="p">,</span><span class="s2">&#34;frame = &#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="s2">&#34;frame.push(true);&#34;</span><span class="o">:</span><span class="s2">&#34;new runtime.Frame();&#34;</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;kwargs = kwargs || {};&#34;</span><span class="p">,</span><span class="s1">&#39;if (Object.prototype.hasOwnProperty.call(kwargs, &#34;caller&#34;)) {&#39;</span><span class="p">,</span><span class="s1">&#39;frame.set(&#34;caller&#34;, kwargs.caller); }&#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;, l_&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="s2">&#34;l_&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;Object.prototype.hasOwnProperty.call(kwargs, &#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34;)&#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39; ? kwargs[&#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34;] : &#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_pushBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;frame = &#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="s2">&#34;frame.pop();&#34;</span><span class="o">:</span><span class="s2">&#34;callerFrame;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;return new runtime.SafeString(&#34;</span><span class="o">+</span><span class="nx">u</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;});&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_popBuffer</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileMacro</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileMacro</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="s2">&#34;_&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.addExport(&#34;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;);&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.setVariable(&#34;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileCaller</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;(function (){&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileMacro</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;return &#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;;})()&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_compileGetTemplate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_templateName</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="o">?</span><span class="s2">&#34;true&#34;</span><span class="o">:</span><span class="s2">&#34;false&#34;</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">r</span><span class="o">?</span><span class="s2">&#34;true&#34;</span><span class="o">:</span><span class="s2">&#34;false&#34;</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;env.getTemplate(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileExpression</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">o</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&#34;, &#34;</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileImport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileGetTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;.getExported(&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">withContext</span><span class="o">?</span><span class="s2">&#34;context.getVariables(), frame, &#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.setVariable(&#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileFromImport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileGetTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;.getExported(&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">withContext</span><span class="o">?</span><span class="s2">&#34;context.getVariables(), frame, &#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">names</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">Pair</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(Object.prototype.hasOwnProperty.call(&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;, &#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s1">&#39;&#34;)) {&#39;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var &#34;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34; = &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;.&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;} else {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;cb(new Error(\&#34;cannot import &#39;&#34;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;&#39;\&#34;)); return;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;frame.set(&#34;&#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.setVariable(&#34;&#39;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s1">&#39;&#34;, &#39;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileBlock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inBlock</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;(parentTemplate ? function(e, c, f, r, cb) { cb(&#34;&#34;); } : &#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s1">&#39;context.getBlock(&#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&#34;)&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inBlock</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;(env, context, frame, runtime, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += &#34;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileSuper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">blockName</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">symbol</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;context.getSuper(env, &#34;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#34;, b_&#39;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;, frame, runtime, &#34;</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34; = runtime.markSafe(&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileExtends</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileGetTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;parentTemplate = &#34;</span><span class="o">+</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;for(var &#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34; in parentTemplate.blocks) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;context.addBlock(&#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;, parentTemplate.blocks[&#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;]);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileInclude</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var tasks = [];&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;tasks.push(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;function(callback) {&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileGetTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ignoreMissing</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;callback(null,&#34;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&#34;);});&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;});&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_tmpid</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;tasks.push(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;function(template, callback){&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;template.render(context.getVariables(), frame, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeCallback</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;callback(null,&#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;);});&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;});&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;tasks.push(&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;function(result, callback){&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += result;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;callback(null);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;});&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;env.waterfall(tasks, function(){&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addScopeLevel</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileTemplateData</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compileLiteral</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileCapture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="s2">&#34;output&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;(function() {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s1">&#39;var output = &#34;&#34;;&#39;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_withScopedSyntax</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;return output;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;})()&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileOutput</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span> <span class="k">instanceof</span> <span class="nx">hr</span><span class="p">.</span><span class="nx">TemplateData</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compileLiteral</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34; += runtime.suppressValue(&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;runtime.ensureDefined(&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="o">+</span><span class="s2">&#34;,&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="o">+</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emit</span><span class="p">(</span><span class="s2">&#34;, env.opts.autoescape);\n&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileRoot</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;compileRoot: root node can&#39;t have frame&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">Rr</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitFuncBegin</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;root&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var parentTemplate = null;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_compileChildren</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;if(parentTemplate) {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;} else {&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;cb(null, &#34;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="o">+</span><span class="s2">&#34;);&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;}&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitFuncEnd</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inBlock</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">findAll</span><span class="p">(</span><span class="nx">hr</span><span class="p">.</span><span class="nx">Block</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">r</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Block &#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s1">&#39;&#34; defined more than once.&#39;</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitFuncBegin</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;b_&#34;</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">Rr</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;var frame = frame.push(true);&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitFuncEnd</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;return {&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&#34;b_&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;: &#34;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitLine</span><span class="p">(</span><span class="s2">&#34;root: root\n};&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">compile</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="s2">&#34;compile&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="s2">&#34;compile: Cannot compile node: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">typename</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineno</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">colno</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">getCode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">codebuf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">en</span><span class="p">.</span><span class="nx">Obj</span><span class="p">)</span><span class="p">,</span><span class="nx">xr</span><span class="o">=</span><span class="p">{</span><span class="nx">compile</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">Pr</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">preprocess</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">Nr</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">fr</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">getCode</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Compiler</span><span class="o">:</span><span class="nx">Pr</span><span class="p">}</span><span class="p">,</span><span class="nx">wr</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">!=</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">_entries</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">key</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="s2">&#34;list filter: type not iterable&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="s2">&#34;truthy&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">getTest</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s*|\s*$/g</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">t</span><span class="p">.</span><span class="nx">abs</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">batch</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="o">%</span><span class="nx">t</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">capitalize</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">center</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="mi">80</span><span class="p">,</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">-</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="nx">r</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="o">?</span><span class="nx">e</span><span class="o">||</span><span class="nx">t</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">dictsort</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">je</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="s2">&#34;dictsort filter: val must be an object&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span> <span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">[</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">||</span><span class="s2">&#34;key&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="o">!==</span><span class="nx">n</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">je</span><span class="p">.</span><span class="nx">TemplateError</span><span class="p">(</span><span class="s2">&#34;dictsort filter: You can only sort by either key or value&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">&gt;</span><span class="nx">s</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">i</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">dump</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">markSafe</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">escape</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">safe</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">markSafe</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">first</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceescape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">markSafe</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">escape</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">groupby</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">groupBy</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">indent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="mi">4</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">||</span><span class="nx">r</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">join</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">last</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Map</span><span class="o">&amp;&amp;</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">Map</span><span class="o">||</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">Set</span><span class="o">&amp;&amp;</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">Set</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">size</span><span class="o">:</span><span class="o">!</span><span class="nx">je</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">list</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lower</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">nl2br</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\r\n|\n/g</span><span class="p">,</span><span class="s2">&#34;&lt;br /&gt;\n&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">random</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="p">)</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">reject</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">rejectattr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">select</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">selectattr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">replace</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;number&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;number&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">+</span><span class="nx">n</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">||</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">r</span><span class="o">||</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">s</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">++</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">o</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">reverse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">s</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">round</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="s2">&#34;ceil&#34;</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="o">:</span><span class="s2">&#34;floor&#34;</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">)</span><span class="p">(</span><span class="nx">e</span><span class="o">*</span><span class="nx">r</span><span class="p">)</span><span class="o">/</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">%</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">o</span><span class="o">*</span><span class="nx">r</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="p">(</span><span class="nx">o</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">s</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">sum</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">+</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">sort</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">makeMacro</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="s2">&#34;reverse&#34;</span><span class="p">,</span><span class="s2">&#34;case_sensitive&#34;</span><span class="p">,</span><span class="s2">&#34;attribute&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">getAttrGetter</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="o">?</span><span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">r</span><span class="o">?</span><span class="nx">a</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">o</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;sort: attribute &#34;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34; resolved to undefined&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">t</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">o</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">t</span><span class="o">?</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">string</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">striptags</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">o</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;\/?([a-z][a-z0-9]*)\b[^&gt;]*&gt;|&lt;!--[\s\S]*?--&gt;/gi</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^ +| +$/gm</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ +/g</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\r\n)/g</span><span class="p">,</span><span class="s2">&#34;\n&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n\n\n+/g</span><span class="p">,</span><span class="s2">&#34;\n\n&#34;</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s+/gi</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">title</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">trim</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">truncate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="mi">255</span><span class="p">,</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;=</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="o">+=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="s2">&#34;...&#34;</span><span class="p">,</span><span class="nx">kr</span><span class="p">.</span><span class="nx">copySafeness</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">upper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">urlencode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nb">encodeURIComponent</span><span class="p">;</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">je</span><span class="p">.</span><span class="nx">_entries</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;=&#34;</span><span class="o">+</span><span class="nx">t</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&amp;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="sr">/^(?:\(|&lt;|&amp;lt;)?(.*?)(?:\.|,|\)|\n|&amp;gt;)?$/</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="sr">/^[\w.!#$%&amp;&#39;*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="sr">/^https?:\/\/.*$/</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="sr">/^www\./</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="sr">/\.(?:org|net|com)(?:\:|\/|$)/</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">urlize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="s1">&#39; rel=&#34;nofollow&#34;&#39;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/(\s+)/</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;&lt;a href=&#34;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;&gt;&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;&lt;/a&gt;&#34;</span><span class="o">:</span><span class="nx">u</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;&lt;a href=&#34;http://&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;&gt;&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;&lt;/a&gt;&#34;</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;&lt;a href=&#34;mailto:&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;&gt;&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;&lt;/a&gt;&#34;</span><span class="o">:</span><span class="nx">p</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;&lt;a href=&#34;http://&#39;</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s2">&#34;&gt;&#34;</span><span class="o">+</span><span class="nx">s</span><span class="o">+</span><span class="s2">&#34;&lt;/a&gt;&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">wordcount</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\w+/g</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="kr">float</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">makeMacro</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="s2">&#34;default&#34;</span><span class="p">,</span><span class="s2">&#34;base&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="kr">int</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">escape</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Br</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Fr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="s2">&#34;.&#34;</span><span class="o">===</span><span class="nx">i</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;..&#34;</span><span class="o">===</span><span class="nx">i</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">;</span><span class="nx">n</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ur</span><span class="o">=</span><span class="sr">/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/</span><span class="p">,</span><span class="nx">Hr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Ur</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Gr</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">t</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;/&#34;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">r</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;Arguments to path.resolve must be strings&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="s2">&#34;/&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="s2">&#34;/&#34;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span><span class="p">(</span><span class="nx">t</span><span class="o">?</span><span class="s2">&#34;/&#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">Fr</span><span class="p">(</span><span class="nx">jr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="s2">&#34;.&#34;</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Yr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">qr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="s2">&#34;/&#34;</span><span class="o">===</span><span class="nx">Vr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">Fr</span><span class="p">(</span><span class="nx">jr</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="s2">&#34;.&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">+=</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">?</span><span class="s2">&#34;/&#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">qr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;/&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Kr</span><span class="o">=</span><span class="p">{</span><span class="nx">extname</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Hr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">basename</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Hr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">===</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">dirname</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Hr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">||</span><span class="nx">r</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;.&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">sep</span><span class="o">:</span><span class="s2">&#34;/&#34;</span><span class="p">,</span><span class="nx">delimiter</span><span class="o">:</span><span class="s2">&#34;:&#34;</span><span class="p">,</span><span class="nx">relative</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&gt;</span><span class="nx">n</span><span class="o">?</span><span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">-</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="nx">Gr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">Gr</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">!==</span><span class="nx">i</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">join</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Yr</span><span class="p">(</span><span class="nx">jr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;Arguments to path.join must be strings&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">isAbsolute</span><span class="o">:</span><span class="nx">qr</span><span class="p">,</span><span class="nx">normalize</span><span class="o">:</span><span class="nx">Yr</span><span class="p">,</span><span class="nx">resolve</span><span class="o">:</span><span class="nx">Gr</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">jr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Vr</span><span class="o">=</span><span class="s2">&#34;b&#34;</span><span class="o">===</span><span class="s2">&#34;ab&#34;</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Wr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Wr</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">Wr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Qr</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">Wr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">resolve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Kr</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">Kr</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">isRelative</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;./&#34;</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;../&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">en</span><span class="p">.</span><span class="nx">EmitterObj</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Xr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Xr</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">Xr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">$r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">precompiled</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">Xr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSource</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">precompiled</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">?</span><span class="p">{</span><span class="nx">src</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&#34;code&#34;</span><span class="p">,</span><span class="nx">obj</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">precompiled</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">(</span><span class="nx">Qr</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">zr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">Jr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Jr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Jr</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">Jr</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Zr</span><span class="o">=</span><span class="p">{</span><span class="nx">PrecompiledLoader</span><span class="o">:</span><span class="nx">$r</span><span class="p">}</span><span class="p">.</span><span class="nx">PrecompiledLoader</span><span class="p">,</span><span class="nx">ei</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">pathsToNames</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">noCache</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">noCache</span><span class="p">,</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">searchPaths</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">Kr</span><span class="p">.</span><span class="nx">normalize</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">searchPaths</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;.&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="k">return</span> <span class="nx">zr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSource</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">searchPaths</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Kr</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">Kr</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Br</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">pathsToNames</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="nx">src</span><span class="o">:</span><span class="nx">Br</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">noCache</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">noCache</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">Qr</span><span class="p">)</span><span class="p">,</span><span class="nx">ti</span><span class="o">=</span><span class="p">{</span><span class="nx">FileSystemLoader</span><span class="o">:</span><span class="nx">ei</span><span class="p">,</span><span class="nx">PrecompiledLoader</span><span class="o">:</span><span class="nx">Zr</span><span class="p">,</span><span class="nx">NodeResolveLoader</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">pathsToNames</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">noCache</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">noCache</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="k">return</span> <span class="nx">zr</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSource</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="sr">/^\.?\.?(\/|\\)/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^[A-Z]:/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">Ye</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">pathsToNames</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">src</span><span class="o">:</span><span class="nx">Br</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">noCache</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">noCache</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">Qr</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">ni</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">callable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">defined</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">divisibleby</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">%</span><span class="nx">t</span><span class="o">==</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escaped</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">equalto</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">eq</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">equalto</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">sameas</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">equalto</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">even</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">falsy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ge</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">greaterthan</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">gt</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">greaterthan</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">le</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&lt;=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lessthan</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lt</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">lessthan</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">lower</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ne</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">!==</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="kc">null</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">number</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;number&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">odd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">string</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">truthy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="kc">undefined</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">upper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">iterable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">Symbol</span><span class="o">?</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Set</span><span class="o">?</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Set</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ri</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">current</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">reset</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">next</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">++</span><span class="nx">t</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="nx">ni</span><span class="p">.</span><span class="nx">callable</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">defined</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">divisibleby</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">escaped</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">equalto</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">eq</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">sameas</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">even</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">falsy</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">ge</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">greaterthan</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">gt</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">le</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">lessthan</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">lt</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">lower</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">ne</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">odd</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">truthy</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="kc">undefined</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">upper</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">iterable</span><span class="p">,</span><span class="nx">ni</span><span class="p">.</span><span class="nx">mapping</span><span class="p">;</span><span class="kd">var</span> <span class="nx">ii</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">range</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="o">+=</span><span class="nx">n</span><span class="p">)</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">s</span><span class="o">&gt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">s</span><span class="o">+=</span><span class="nx">n</span><span class="p">)</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">cycler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ri</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">joiner</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;,&#34;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">si</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">ai</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ai</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ai</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">ai</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">oi</span><span class="o">=</span><span class="nx">ti</span><span class="p">.</span><span class="nx">FileSystemLoader</span><span class="p">,</span><span class="nx">ci</span><span class="o">=</span><span class="nx">ti</span><span class="p">.</span><span class="nx">WebLoader</span><span class="p">,</span><span class="nx">li</span><span class="o">=</span><span class="nx">ti</span><span class="p">.</span><span class="nx">PrecompiledLoader</span><span class="p">,</span><span class="nx">hi</span><span class="o">=</span><span class="nx">en</span><span class="p">.</span><span class="nx">Obj</span><span class="p">,</span><span class="nx">ui</span><span class="o">=</span><span class="nx">en</span><span class="p">.</span><span class="nx">EmitterObj</span><span class="p">,</span><span class="nx">pi</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">handleError</span><span class="p">,</span><span class="nx">fi</span><span class="o">=</span><span class="nx">kr</span><span class="p">.</span><span class="nx">Frame</span><span class="p">;</span><span class="kd">function</span> <span class="nx">di</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">Gt</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ei</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&#34;code&#34;</span><span class="p">,</span><span class="nx">obj</span><span class="o">:</span><span class="p">{</span><span class="nx">root</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="nx">i</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">i</span><span class="p">(</span><span class="nx">pi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">mi</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">si</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">dev</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">dev</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">autoescape</span><span class="o">=</span><span class="kc">null</span><span class="o">==</span><span class="nx">t</span><span class="p">.</span><span class="nx">autoescape</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">autoescape</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">throwOnUndefined</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">trimBlocks</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">trimBlocks</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">lstripBlocks</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">lstripBlocks</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="nx">oi</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">oi</span><span class="p">(</span><span class="s2">&#34;views&#34;</span><span class="p">)</span><span class="p">]</span><span class="o">:</span><span class="nx">ci</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">ci</span><span class="p">(</span><span class="s2">&#34;/views&#34;</span><span class="p">)</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nb">window</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">jinja2Precompiled</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">li</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jinja2Precompiled</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_initLoaders</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">globals</span><span class="o">=</span><span class="nx">ii</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">filters</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tests</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">asyncFilters</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extensionsList</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">_entries</span><span class="p">(</span><span class="nx">wr</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">addFilter</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">_entries</span><span class="p">(</span><span class="nx">ni</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">addTest</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_initLoaders</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">cache</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">.</span><span class="nx">on</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;update&#34;</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;update&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">invalidateCache</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">cache</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addExtension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">__name</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">extensionsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">removeExtension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">extensionsList</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">without</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">extensionsList</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getExtension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">hasExtension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addGlobal</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">globals</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getGlobal</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">globals</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;global not found: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">globals</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addFilter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">asyncFilters</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">filters</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getFilter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">filters</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;filter not found: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">filters</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;test not found: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">resolveTemplate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">isRelative</span><span class="o">||</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">isRelative</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">resolve</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getTemplate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">raw</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">raw</span><span class="p">)</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">_i</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;template names must be a string: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">resolveTemplate</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">]</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">?</span><span class="k">void</span> <span class="nx">i</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">asyncIter</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loaders</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">?</span><span class="nx">s</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">loader</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">resolveTemplate</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">async</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSource</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSource</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">||</span><span class="nx">n</span><span class="o">||</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;template not found: &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span> <span class="nx">i</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">throw</span> <span class="nx">n</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="nx">o</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">_i</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">src</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">noCache</span><span class="o">||</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">loader</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">_i</span><span class="p">(</span><span class="nx">Ei</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">express</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEngine</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">defaultEngine</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ext</span><span class="o">=</span><span class="nx">Kr</span><span class="p">.</span><span class="nx">extname</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">ext</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEngine</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;No default engine was specified and no extension was provided.&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">ext</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">ext</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEngine</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="s2">&#34;.&#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultEngine</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;view&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;jinja2Env&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">je</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">)</span><span class="nx">di</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="nx">e</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">renderString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="k">new</span> <span class="nx">_i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">waterfall</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">qt</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">ui</span><span class="p">)</span><span class="p">,</span><span class="nx">Ti</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">si</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="k">new</span> <span class="nx">mi</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">exported</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">addBlock</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">lookup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">globals</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">globals</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">setVariable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getVariables</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addBlock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getBlock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;unknown block &#34;&#39;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getSuper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">||</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="o">!</span><span class="nx">o</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;no super block available for &#34;&#39;</span><span class="o">+</span><span class="nx">t</span><span class="o">+</span><span class="s1">&#39;&#34;&#39;</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">addExport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">exported</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getExported</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">exported</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">ctx</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">hi</span><span class="p">)</span><span class="p">,</span><span class="nx">_i</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">}</span><span class="nx">si</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="k">new</span> <span class="nx">mi</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;code&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplProps</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">obj</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;string&#34;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplStr</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">obj</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Unexpected template object type &#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">+</span><span class="s2">&#34;; expected &#39;code&#39;, or &#39;string&#39;&#34;</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">je</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;src must be a string or an object describing the source&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplStr</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_compile</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">throw</span> <span class="nx">je</span><span class="p">.</span><span class="nx">_prettifyError</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">dev</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">compiled</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="o">!</span><span class="nx">t</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">_prettifyError</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">dev</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="nx">di</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">throw</span> <span class="nx">s</span><span class="p">}</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">Ti</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">fi</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">topLevel</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rootRenderFunc</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">kr</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="o">||</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">je</span><span class="p">.</span><span class="nx">_prettifyError</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">dev</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="nx">i</span><span class="o">?</span><span class="nx">di</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">getExported</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">throw</span> <span class="nx">e</span><span class="p">}</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">fi</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">topLevel</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">Ti</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rootRenderFunc</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">kr</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">?</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">getExported</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">compile</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">compiled</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_compile</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_compile</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplProps</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplProps</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">xr</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplStr</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">asyncFilters</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">extensionsList</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">opts</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">blocks</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getBlocks</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rootRenderFunc</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">compiled</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">_getBlocks</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="nx">je</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="s2">&#34;b_&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="p">(</span><span class="nx">hi</span><span class="p">)</span><span class="p">,</span><span class="nx">Ai</span><span class="o">=</span><span class="p">{</span><span class="nx">Environment</span><span class="o">:</span><span class="nx">mi</span><span class="p">,</span><span class="nx">Template</span><span class="o">:</span><span class="nx">_i</span><span class="p">}</span><span class="p">;</span><span class="nx">je</span><span class="p">.</span><span class="nx">_prettifyError</span><span class="p">;</span><span class="kd">var</span> <span class="nx">gi</span><span class="p">,</span><span class="nx">Ni</span><span class="o">=</span><span class="nx">Ai</span><span class="p">.</span><span class="nx">Environment</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ci</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">je</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">ti</span><span class="p">.</span><span class="nx">FileSystemLoader</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">ti</span><span class="p">.</span><span class="nx">FileSystemLoader</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">watch</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">watch</span><span class="p">,</span><span class="nx">noCache</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">noCache</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">ti</span><span class="p">.</span><span class="nx">WebLoader</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">ti</span><span class="p">.</span><span class="nx">WebLoader</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">useCache</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">web</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">useCache</span><span class="p">,</span><span class="nx">async</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">web</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">async</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">gi</span><span class="o">=</span><span class="k">new</span> <span class="nx">Ni</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">express</span><span class="o">&amp;&amp;</span><span class="nx">gi</span><span class="p">.</span><span class="nx">express</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">express</span><span class="p">)</span><span class="p">,</span><span class="nx">gi</span><span class="p">}</span><span class="nx">ti</span><span class="p">.</span><span class="nx">FileSystemLoader</span><span class="p">,</span><span class="nx">ti</span><span class="p">.</span><span class="nx">NodeResolveLoader</span><span class="p">,</span><span class="nx">ti</span><span class="p">.</span><span class="nx">PrecompiledLoader</span><span class="p">,</span><span class="nx">ti</span><span class="p">.</span><span class="nx">WebLoader</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ii</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">gi</span><span class="o">||</span><span class="nx">Ci</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">gi</span><span class="p">.</span><span class="nx">renderString</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Si</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Si</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">Si</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">bi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_root</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Oi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="s2">&#34;length&#34;</span><span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="s2">&#34;type&#34;</span><span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">void</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">Si</span><span class="p">(</span><span class="nx">Si</span><span class="p">(</span><span class="nx">Si</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">==</span><span class="k">this</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_options</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">yi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">Si</span><span class="p">(</span><span class="nx">Si</span><span class="p">(</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_options</span><span class="p">)</span><span class="p">,</span><span class="p">{</span><span class="nx">xmlMode</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Li</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="o">+=</span><span class="nx">z</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ki</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="s2">&#34;boolean&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="s2">&#34;boolean&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">||</span><span class="nx">i</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">root</span><span class="p">(</span><span class="p">)</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">vi</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Di</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ri</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Mi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Mi</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Mi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;length&#34;</span><span class="p">)</span><span class="o">||</span><span class="s2">&#34;number&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Pi</span><span class="p">,</span><span class="nx">xi</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">html</span><span class="o">:</span><span class="nx">Oi</span><span class="p">,</span><span class="nx">xml</span><span class="o">:</span><span class="nx">yi</span><span class="p">,</span><span class="nx">text</span><span class="o">:</span><span class="nx">Li</span><span class="p">,</span><span class="nx">parseHTML</span><span class="o">:</span><span class="nx">ki</span><span class="p">,</span><span class="nx">root</span><span class="o">:</span><span class="nx">vi</span><span class="p">,</span><span class="nx">contains</span><span class="o">:</span><span class="nx">Di</span><span class="p">,</span><span class="nx">merge</span><span class="o">:</span><span class="nx">Ri</span><span class="p">,</span><span class="nx">jp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">He</span><span class="p">(</span><span class="p">{</span><span class="nx">path</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">json</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">jpo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">He</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">jinja2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Ii</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">cheerio</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Bi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Fi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&#34;length&#34;</span><span class="k">in</span> <span class="nx">e</span><span class="o">?</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">v</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="nx">v</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">N</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ui</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">t</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">Pi</span><span class="p">.</span><span class="nx">LowerA</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&lt;=</span><span class="nx">Pi</span><span class="p">.</span><span class="nx">LowerZ</span><span class="o">||</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">Pi</span><span class="p">.</span><span class="nx">UpperA</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&lt;=</span><span class="nx">Pi</span><span class="p">.</span><span class="nx">UpperZ</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Pi</span><span class="p">.</span><span class="nx">Exclamation</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;&gt;&#34;</span><span class="p">,</span><span class="nx">t</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">}</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LowerA</span><span class="o">=</span><span class="mi">97</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LowerA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LowerZ</span><span class="o">=</span><span class="mi">122</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LowerZ&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">UpperA</span><span class="o">=</span><span class="mi">65</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;UpperA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">UpperZ</span><span class="o">=</span><span class="mi">90</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;UpperZ&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">Exclamation</span><span class="o">=</span><span class="mi">33</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;Exclamation&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Pi</span><span class="o">||</span><span class="p">(</span><span class="nx">Pi</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Hi</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">,</span><span class="nx">Gi</span><span class="o">=</span><span class="sr">/\s+/</span><span class="p">,</span><span class="nx">Yi</span><span class="o">=</span><span class="p">{</span><span class="kc">null</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="kc">true</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="kc">false</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="nx">qi</span><span class="o">=</span><span class="sr">/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i</span><span class="p">,</span><span class="nx">Ki</span><span class="o">=</span><span class="sr">/^{[^]*}$|^\[[^]*]$/</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ji</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">?</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="o">!</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">qi</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;option&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="s2">&#34;value&#34;</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">Li</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;input&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="s2">&#34;radio&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="s2">&#34;checkbox&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&#34;value&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="s2">&#34;on&#34;</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Vi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kc">null</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="nx">zi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Wi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span> <span class="k">in</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="o">!</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">qi</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">ji</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">ji</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Qi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="o">:</span><span class="nx">Vi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">qi</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">n</span><span class="o">?</span><span class="s2">&#34;&#34;</span><span class="o">:</span><span class="kc">null</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Xi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="kc">null</span><span class="o">==</span><span class="nx">t</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;data-&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="s2">&#34;data-&#34;</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[_.-](\w|$)/g</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;data-&#34;</span><span class="o">+</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[A-Z]/g</span><span class="p">,</span><span class="s2">&#34;-$&amp;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">,</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">Yi</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">Yi</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="nb">String</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">Ki</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="nx">i</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">t</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="kd">function</span> <span class="nx">zi</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="o">&amp;&amp;</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ji</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">Gi</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Zi</span><span class="p">,</span><span class="nx">es</span><span class="p">,</span><span class="nx">ts</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">attr</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Bad combination of arguments.&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Vi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">attribs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="nx">Vi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">Vi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="nx">ji</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">prop</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="o">||</span><span class="o">!</span><span class="nx">I</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;style&#34;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">s</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;tagName&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;nodeName&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;href&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;src&#34;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">attribs</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;undefined&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">URL</span><span class="o">||</span><span class="p">(</span><span class="s2">&#34;href&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;a&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="s2">&#34;link&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;src&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;img&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="s2">&#34;iframe&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="s2">&#34;audio&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="s2">&#34;video&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="o">&amp;&amp;</span><span class="s2">&#34;source&#34;</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">o</span><span class="o">||</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">baseURI</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">baseURI</span><span class="p">)</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;innerText&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">J</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;textContent&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">z</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;outerHTML&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s2">&#34;&lt;container /&gt;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;innerHTML&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="nx">Wi</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Bad combination of arguments.&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Qi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">Wi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="nx">Qi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">Qi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">Xi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">Xi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">Hi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="nx">$i</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">$i</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">val</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="o">!</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;textarea&#34;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;select&#34;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;option:selected&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;multiple&#34;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;option&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&#34;selected&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="s2">&#34;object&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;option[value=&#34;&#39;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">,</span><span class="s1">&#39;&#34;]&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;selected&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;multiple&#34;</span><span class="p">)</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Li</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;input&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;option&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">t</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">removeAttr</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Ji</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Bi</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">zi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">hasClass</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">||</span><span class="nx">Gi</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">Gi</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">addClass</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">||</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">Gi</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">ji</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;class&#34;</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="s2">&#34; &#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="p">,</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">o</span><span class="o">+=</span><span class="nx">l</span><span class="p">)</span><span class="p">}</span><span class="nx">Vi</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;class&#34;</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">Vi</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="s2">&#34;class&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">removeClass</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Ji</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Ji</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">--</span><span class="p">)</span><span class="p">}</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">toggleClass</span><span class="o">:</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="o">||</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">Gi</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="s2">&#34;boolean&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">Ji</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="o">&lt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">c</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="kr">class</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">Attribute</span><span class="o">=</span><span class="s2">&#34;attribute&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Pseudo</span><span class="o">=</span><span class="s2">&#34;pseudo&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">PseudoElement</span><span class="o">=</span><span class="s2">&#34;pseudo-element&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Tag</span><span class="o">=</span><span class="s2">&#34;tag&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Universal</span><span class="o">=</span><span class="s2">&#34;universal&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Adjacent</span><span class="o">=</span><span class="s2">&#34;adjacent&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Child</span><span class="o">=</span><span class="s2">&#34;child&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">=</span><span class="s2">&#34;descendant&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Parent</span><span class="o">=</span><span class="s2">&#34;parent&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Sibling</span><span class="o">=</span><span class="s2">&#34;sibling&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ColumnCombinator</span><span class="o">=</span><span class="s2">&#34;column-combinator&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Zi</span><span class="o">||</span><span class="p">(</span><span class="nx">Zi</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">Any</span><span class="o">=</span><span class="s2">&#34;any&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="o">=</span><span class="s2">&#34;element&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">End</span><span class="o">=</span><span class="s2">&#34;end&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Equals</span><span class="o">=</span><span class="s2">&#34;equals&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Exists</span><span class="o">=</span><span class="s2">&#34;exists&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Hyphen</span><span class="o">=</span><span class="s2">&#34;hyphen&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Not</span><span class="o">=</span><span class="s2">&#34;not&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">Start</span><span class="o">=</span><span class="s2">&#34;start&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">es</span><span class="o">||</span><span class="p">(</span><span class="nx">es</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">ns</span><span class="o">=</span><span class="sr">/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/</span><span class="p">,</span><span class="nx">rs</span><span class="o">=</span><span class="sr">/\\([\da-f]{1,6}\s?|(\s)|.)/gi</span><span class="p">,</span><span class="nx">is</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">126</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Element</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">94</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Start</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">36</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">End</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">42</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Any</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">33</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Not</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">124</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Hyphen</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">ss</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;has&#34;</span><span class="p">,</span><span class="s2">&#34;not&#34;</span><span class="p">,</span><span class="s2">&#34;matches&#34;</span><span class="p">,</span><span class="s2">&#34;is&#34;</span><span class="p">,</span><span class="s2">&#34;where&#34;</span><span class="p">,</span><span class="s2">&#34;host&#34;</span><span class="p">,</span><span class="s2">&#34;host-context&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">as</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Adjacent</span><span class="o">:</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Child</span><span class="o">:</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">:</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Parent</span><span class="o">:</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Sibling</span><span class="o">:</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">ColumnCombinator</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">os</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;contains&#34;</span><span class="p">,</span><span class="s2">&#34;icontains&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">cs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="mi">65536</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">!=</span><span class="nx">r</span><span class="o">||</span><span class="nx">n</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">r</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="mi">65536</span><span class="p">)</span><span class="o">:</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">r</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="o">|</span><span class="mi">55296</span><span class="p">,</span><span class="mi">1023</span><span class="o">&amp;</span><span class="nx">r</span><span class="o">|</span><span class="mi">56320</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ls</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">rs</span><span class="p">,</span><span class="nx">cs</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">hs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">39</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="mi">34</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">us</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">32</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="mi">9</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="mi">10</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="mi">12</span><span class="o">===</span><span class="nx">e</span><span class="o">||</span><span class="mi">13</span><span class="o">===</span><span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ps</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">fs</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="sb">`</span><span class="si">${</span><span class="nx">e</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Unmatched selector: </span><span class="si">${</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kd">function</span> <span class="nx">fs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">ns</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Expected name, found </span><span class="si">${</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">+=</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">ls</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">us</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="o">++</span><span class="p">}</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">r</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="mi">40</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="mi">41</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">r</span><span class="o">--</span><span class="o">:</span><span class="nx">r</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Parenthesis not matched&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">ls</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="mi">92</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="o">--</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="mi">1</span><span class="o">==</span><span class="p">(</span><span class="mi">1</span><span class="o">&amp;</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">as</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Did not expect successive traversals.&#34;</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">?</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Attribute</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">action</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">i</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">ignoreCase</span><span class="o">:</span><span class="s2">&#34;quirks&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Empty sub-selector&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="nx">e</span><span class="o">:</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="mi">32</span><span class="o">:</span><span class="k">case</span> <span class="mi">9</span><span class="o">:</span><span class="k">case</span> <span class="mi">10</span><span class="o">:</span><span class="k">case</span> <span class="mi">12</span><span class="o">:</span><span class="k">case</span> <span class="mi">13</span><span class="o">:</span><span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">62</span><span class="o">:</span><span class="nx">l</span><span class="p">(</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Child</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">60</span><span class="o">:</span><span class="nx">l</span><span class="p">(</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Parent</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">126</span><span class="o">:</span><span class="nx">l</span><span class="p">(</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Sibling</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">43</span><span class="o">:</span><span class="nx">l</span><span class="p">(</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Adjacent</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">46</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="s2">&#34;class&#34;</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Element</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">35</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span><span class="nx">es</span><span class="p">.</span><span class="nx">Equals</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">91</span><span class="o">:</span><span class="p">{</span><span class="kd">let</span> <span class="nx">e</span><span class="p">;</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="mi">124</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;*|&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;*&#34;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="mi">124</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">61</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">c</span><span class="o">=</span><span class="nx">es</span><span class="p">.</span><span class="nx">Exists</span><span class="p">;</span><span class="kr">const</span> <span class="nx">l</span><span class="o">=</span><span class="nx">is</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="mi">61</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Expected `=`&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="mi">61</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">es</span><span class="p">.</span><span class="nx">Equals</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">h</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;exists&#34;</span><span class="o">!==</span><span class="nx">c</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">hs</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">!==</span><span class="nx">e</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">r</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Attribute value didn&#39;t end&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">ls</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">us</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">93</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">ls</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">s</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="mi">32</span><span class="o">|</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="mi">115</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="mi">105</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="mi">93</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Attribute selector didn&#39;t terminate&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="kr">const</span> <span class="nx">p</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Attribute</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">action</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">ignoreCase</span><span class="o">:</span><span class="nx">u</span><span class="p">}</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">case</span> <span class="mi">58</span><span class="o">:</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="mi">58</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">PseudoElement</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="mi">40</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="k">continue</span><span class="p">}</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">40</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">ss</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">hs</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Pseudo-selector </span><span class="si">${</span><span class="nx">e</span><span class="si">}</span><span class="sb"> cannot be quoted</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">fs</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="mi">41</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Missing closing parenthesis in :</span><span class="si">${</span><span class="nx">e</span><span class="si">}</span><span class="sb"> (</span><span class="si">${</span><span class="nx">t</span><span class="si">}</span><span class="sb">)</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">os</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">hs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">s</span><span class="o">=</span><span class="nx">ls</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">case</span> <span class="mi">44</span><span class="o">:</span><span class="nx">u</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;/*&#34;</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;*/&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Comment was not terminated&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="kd">let</span> <span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">42</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;*&#34;</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">124</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="mi">124</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">l</span><span class="p">(</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">ColumnCombinator</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ns</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">break</span> <span class="nx">e</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="mi">124</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">124</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="mi">42</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;*&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;*&#34;</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Universal</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">o</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Tag</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">o</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="kd">var</span> <span class="nx">ds</span><span class="o">=</span><span class="p">{</span><span class="nx">trueFunc</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">,</span><span class="nx">falseFunc</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">Es</span><span class="o">=</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="p">;</span><span class="kr">const</span> <span class="nx">ms</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Universal</span><span class="p">,</span><span class="mi">50</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Tag</span><span class="p">,</span><span class="mi">30</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Attribute</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ts</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">ms</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">_s</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">Exists</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">Equals</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">Not</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">Start</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">End</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">es</span><span class="p">.</span><span class="nx">Any</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">As</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">gs</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">r</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">gs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">ms</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Attribute</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">_s</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">action</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">action</span><span class="o">===</span><span class="nx">es</span><span class="p">.</span><span class="nx">Equals</span><span class="o">&amp;&amp;</span><span class="s2">&#34;id&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="o">?</span><span class="s2">&#34;has&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="s2">&#34;contains&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="p">...</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="p">...</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">gs</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="o">=</span><span class="mi">2</span><span class="o">:</span><span class="nx">r</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Ns</span><span class="o">=</span><span class="sr">/[-[\]{}()*+?.,\\^$|#\s]/g</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Cs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">Ns</span><span class="p">,</span><span class="s2">&#34;\\$&amp;&#34;</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Is</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;accept&#34;</span><span class="p">,</span><span class="s2">&#34;accept-charset&#34;</span><span class="p">,</span><span class="s2">&#34;align&#34;</span><span class="p">,</span><span class="s2">&#34;alink&#34;</span><span class="p">,</span><span class="s2">&#34;axis&#34;</span><span class="p">,</span><span class="s2">&#34;bgcolor&#34;</span><span class="p">,</span><span class="s2">&#34;charset&#34;</span><span class="p">,</span><span class="s2">&#34;checked&#34;</span><span class="p">,</span><span class="s2">&#34;clear&#34;</span><span class="p">,</span><span class="s2">&#34;codetype&#34;</span><span class="p">,</span><span class="s2">&#34;color&#34;</span><span class="p">,</span><span class="s2">&#34;compact&#34;</span><span class="p">,</span><span class="s2">&#34;declare&#34;</span><span class="p">,</span><span class="s2">&#34;defer&#34;</span><span class="p">,</span><span class="s2">&#34;dir&#34;</span><span class="p">,</span><span class="s2">&#34;direction&#34;</span><span class="p">,</span><span class="s2">&#34;disabled&#34;</span><span class="p">,</span><span class="s2">&#34;enctype&#34;</span><span class="p">,</span><span class="s2">&#34;face&#34;</span><span class="p">,</span><span class="s2">&#34;frame&#34;</span><span class="p">,</span><span class="s2">&#34;hreflang&#34;</span><span class="p">,</span><span class="s2">&#34;http-equiv&#34;</span><span class="p">,</span><span class="s2">&#34;lang&#34;</span><span class="p">,</span><span class="s2">&#34;language&#34;</span><span class="p">,</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="s2">&#34;media&#34;</span><span class="p">,</span><span class="s2">&#34;method&#34;</span><span class="p">,</span><span class="s2">&#34;multiple&#34;</span><span class="p">,</span><span class="s2">&#34;nohref&#34;</span><span class="p">,</span><span class="s2">&#34;noresize&#34;</span><span class="p">,</span><span class="s2">&#34;noshade&#34;</span><span class="p">,</span><span class="s2">&#34;nowrap&#34;</span><span class="p">,</span><span class="s2">&#34;readonly&#34;</span><span class="p">,</span><span class="s2">&#34;rel&#34;</span><span class="p">,</span><span class="s2">&#34;rev&#34;</span><span class="p">,</span><span class="s2">&#34;rules&#34;</span><span class="p">,</span><span class="s2">&#34;scope&#34;</span><span class="p">,</span><span class="s2">&#34;scrolling&#34;</span><span class="p">,</span><span class="s2">&#34;selected&#34;</span><span class="p">,</span><span class="s2">&#34;shape&#34;</span><span class="p">,</span><span class="s2">&#34;target&#34;</span><span class="p">,</span><span class="s2">&#34;text&#34;</span><span class="p">,</span><span class="s2">&#34;type&#34;</span><span class="p">,</span><span class="s2">&#34;valign&#34;</span><span class="p">,</span><span class="s2">&#34;valuetype&#34;</span><span class="p">,</span><span class="s2">&#34;vlink&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ss</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;boolean&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">:</span><span class="s2">&#34;quirks&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">ignoreCase</span><span class="o">?</span><span class="o">!</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">quirksMode</span><span class="o">:</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="nx">Is</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">bs</span><span class="o">=</span><span class="p">{</span><span class="nx">equals</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">hyphen</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">element</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="sb">`</span><span class="sb">(?:^|</span><span class="sb">\\</span><span class="sb">s)</span><span class="si">${</span><span class="nx">Cs</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="si">}</span><span class="sb">(?:</span><span class="sb">$</span><span class="sb">|</span><span class="sb">\\</span><span class="sb">s)</span><span class="sb">`</span><span class="p">,</span><span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="s2">&#34;i&#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">exists</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">r</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">hasAttrib</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">start</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">end</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="o">-</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">any</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">s</span><span class="p">)</span><span class="k">return</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">Cs</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;i&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">not</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="nx">t</span><span class="p">=&gt;</span><span class="o">!</span><span class="o">!</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">Ss</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">!==</span><span class="nx">s</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">getAttributeValue</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">!==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Os</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">32</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="s2">&#34;0&#34;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&#34;9&#34;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;even&#34;</span><span class="o">===</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;odd&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="s2">&#34;n&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">++</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">o</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">h</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">===</span><span class="nx">o</span><span class="o">||</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;n-th rule couldn&#39;t be parsed (&#39;&#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34;&#39;)&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">[</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="o">*</span><span class="nx">o</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;-&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">++</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="s2">&#34;+&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">++</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&gt;=</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&lt;=</span><span class="nx">i</span><span class="p">;</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">-</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">t</span><span class="o">++</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">Os</span><span class="p">)</span><span class="p">,</span><span class="nx">Os</span><span class="p">.</span><span class="nx">parse</span><span class="p">;</span><span class="kd">var</span> <span class="nx">ys</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">compile</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">compile</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">}</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">n</span><span class="p">}</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">n</span><span class="p">}</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="nx">r</span><span class="o">+</span><span class="nx">r</span><span class="p">)</span><span class="o">%</span><span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">%</span><span class="nx">r</span><span class="o">===</span><span class="nx">i</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&lt;=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">%</span><span class="nx">r</span><span class="o">===</span><span class="nx">i</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">ys</span><span class="p">)</span><span class="p">,</span><span class="nx">ys</span><span class="p">.</span><span class="nx">compile</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ls</span><span class="o">=</span><span class="nx">Os</span><span class="p">,</span><span class="nx">ks</span><span class="o">=</span><span class="nx">ys</span><span class="p">,</span><span class="nx">vs</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">compile</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;parse&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Ls</span><span class="p">.</span><span class="nx">parse</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;compile&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">compile</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">ks</span><span class="p">.</span><span class="nx">compile</span><span class="p">)</span><span class="p">(</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ls</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Ds</span><span class="o">=</span><span class="nx">qe</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Rs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getParent</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">vs</span><span class="p">.</span><span class="nx">compile</span><span class="p">,</span><span class="nx">vs</span><span class="p">.</span><span class="nx">parse</span><span class="p">;</span><span class="kr">const</span> <span class="nx">Ms</span><span class="o">=</span><span class="p">{</span><span class="nx">contains</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">getText</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">icontains</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">getText</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;nth-child&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Ds</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">Rs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;nth-last-child&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Ds</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">Rs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;nth-of-type&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Ds</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">Rs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">++</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;nth-last-of-type&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Ds</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">i</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">Rs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">++</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">root</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">getParent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">r</span><span class="o">||</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">scope</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">equals</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="mi">1</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">i</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">Ms</span><span class="p">.</span><span class="nx">root</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">hover</span><span class="o">:</span><span class="nx">Ps</span><span class="p">(</span><span class="s2">&#34;isHovered&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">visited</span><span class="o">:</span><span class="nx">Ps</span><span class="p">(</span><span class="s2">&#34;isVisited&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">active</span><span class="o">:</span><span class="nx">Ps</span><span class="p">(</span><span class="s2">&#34;isActive&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ps</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">i</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">xs</span><span class="o">=</span><span class="p">{</span><span class="nx">empty</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">getText</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;first-child&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">prevElementSibling</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">t</span><span class="p">.</span><span class="nx">prevElementSibling</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;last-child&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;first-of-type&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;last-of-type&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">s</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;only-of-type&#34;</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="p">(</span><span class="nx">i</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">||</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">!==</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="s2">&#34;only-child&#34;</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="p">(</span><span class="nx">r</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="o">||</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ws</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">r</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Pseudo-class :</span><span class="si">${</span><span class="nx">t</span><span class="si">}</span><span class="sb"> requires an argument</span><span class="sb">`</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">r</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Pseudo-class :</span><span class="si">${</span><span class="nx">t</span><span class="si">}</span><span class="sb"> doesn&#39;t have any arguments</span><span class="sb">`</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Bs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;any-link&#34;</span><span class="o">:</span><span class="s2">&#34;:is(a, area, link)[href]&#34;</span><span class="p">,</span><span class="nx">link</span><span class="o">:</span><span class="s2">&#34;:any-link:not(:visited)&#34;</span><span class="p">,</span><span class="nx">disabled</span><span class="o">:</span><span class="s2">&#34;:is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] &gt; option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )&#34;</span><span class="p">,</span><span class="nx">enabled</span><span class="o">:</span><span class="s2">&#34;:not(:disabled)&#34;</span><span class="p">,</span><span class="nx">checked</span><span class="o">:</span><span class="s2">&#34;:is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)&#34;</span><span class="p">,</span><span class="nx">required</span><span class="o">:</span><span class="s2">&#34;:is(input, select, textarea)[required]&#34;</span><span class="p">,</span><span class="nx">optional</span><span class="o">:</span><span class="s2">&#34;:is(input, select, textarea):not([required])&#34;</span><span class="p">,</span><span class="nx">selected</span><span class="o">:</span><span class="s2">&#34;option:is([selected], select:not([multiple]):not(:has(&gt; option[selected])) &gt; :first-of-type)&#34;</span><span class="p">,</span><span class="nx">checkbox</span><span class="o">:</span><span class="s2">&#34;[type=checkbox]&#34;</span><span class="p">,</span><span class="nx">file</span><span class="o">:</span><span class="s2">&#34;[type=file]&#34;</span><span class="p">,</span><span class="nx">password</span><span class="o">:</span><span class="s2">&#34;[type=password]&#34;</span><span class="p">,</span><span class="nx">radio</span><span class="o">:</span><span class="s2">&#34;[type=radio]&#34;</span><span class="p">,</span><span class="nx">reset</span><span class="o">:</span><span class="s2">&#34;[type=reset]&#34;</span><span class="p">,</span><span class="nx">image</span><span class="o">:</span><span class="s2">&#34;[type=image]&#34;</span><span class="p">,</span><span class="nx">submit</span><span class="o">:</span><span class="s2">&#34;[type=submit]&#34;</span><span class="p">,</span><span class="nx">parent</span><span class="o">:</span><span class="s2">&#34;:not(:empty)&#34;</span><span class="p">,</span><span class="nx">header</span><span class="o">:</span><span class="s2">&#34;:is(h1, h2, h3, h4, h5, h6)&#34;</span><span class="p">,</span><span class="nx">button</span><span class="o">:</span><span class="s2">&#34;:is(button, input[type=button])&#34;</span><span class="p">,</span><span class="nx">input</span><span class="o">:</span><span class="s2">&#34;:is(input, textarea, select, button)&#34;</span><span class="p">,</span><span class="nx">text</span><span class="o">:</span><span class="s2">&#34;input:is(:not([type!=&#39;&#39;]), [type=text])&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">Fs</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Us</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;=</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Hs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">xmlMode</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">,</span><span class="nx">lowerCaseAttributeNames</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">lowerCaseAttributeNames</span><span class="p">,</span><span class="nx">lowerCaseTags</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">lowerCaseTags</span><span class="p">,</span><span class="nx">quirksMode</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">quirksMode</span><span class="p">,</span><span class="nx">cacheResults</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">cacheResults</span><span class="p">,</span><span class="nx">pseudos</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">pseudos</span><span class="p">,</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">adapter</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">equals</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Gs</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Hs</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">s</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">s</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Ys</span><span class="o">=</span><span class="p">{</span><span class="nx">is</span><span class="o">:</span><span class="nx">Gs</span><span class="p">,</span><span class="nx">matches</span><span class="o">:</span><span class="nx">Gs</span><span class="p">,</span><span class="nx">where</span><span class="o">:</span><span class="nx">Gs</span><span class="p">,</span><span class="nx">not</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Hs</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">s</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">t</span><span class="p">=&gt;</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">s</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">Hs</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">relativeSelector</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">Ts</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="p">[</span><span class="nx">Fs</span><span class="p">]</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">)</span><span class="k">return</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">;</span><span class="kr">const</span> <span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">!==</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">shouldTestNextSiblings</span><span class="o">:</span><span class="nx">t</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">=&gt;</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">o</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="o">?</span><span class="p">[</span><span class="p">...</span><span class="nx">r</span><span class="p">,</span><span class="p">...</span><span class="nx">Us</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">]</span><span class="o">:</span><span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">existsOne</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">t</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">existsOne</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">qs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getParent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ks</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">PseudoElement</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Pseudo-elements are not supported by css-select&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">ColumnCombinator</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Column combinators are not yet supported by css-select&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Attribute</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Namespaced attributes are not yet supported by css-select&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">lowerCaseAttributeNames</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">bs</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">action</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="nx">o</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">Ys</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Unknown pseudo-class :</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb">(</span><span class="si">${</span><span class="nx">o</span><span class="si">}</span><span class="sb">)</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ys</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">pseudos</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">Bs</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">l</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">o</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Pseudo </span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb"> doesn&#39;t have any arguments</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">ps</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ys</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">ws</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">c</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">Ms</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ms</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">xs</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">xs</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">ws</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`</span><span class="sb">Unknown pseudo-class :</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Tag</span><span class="o">:</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Namespaced tag names are not yet supported by css-select&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">xmlMode</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">lowerCaseTags</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">:</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">cacheResults</span><span class="o">||</span><span class="s2">&#34;undefined&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">WeakSet</span><span class="p">)</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">qs</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">WeakSet</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">qs</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">t</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="k">case</span><span class="s2">&#34;_flexibleDescendant&#34;</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">qs</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Parent</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Child</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">getParent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Sibling</span><span class="o">:</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Adjacent</span><span class="o">:</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">prevElementSibling</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">prevElementSibling</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">getSiblings</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">r</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="k">case</span> <span class="nx">Zi</span><span class="p">.</span><span class="nx">Universal</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="p">.</span><span class="nx">namespace</span><span class="o">&amp;&amp;</span><span class="s2">&#34;*&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Namespaced universal selectors are not yet supported by css-select&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">js</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&#34;scope&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">js</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Vs</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="p">}</span><span class="p">,</span><span class="nx">Ws</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&#34;_flexibleDescendant&#34;</span><span class="p">}</span><span class="p">,</span><span class="nx">Qs</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;scope&#34;</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Xs</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">As</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">context</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">relativeSelector</span><span class="p">)</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="o">!</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">getParent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">Fs</span><span class="o">||</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">isTag</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">t</span> <span class="k">of</span> <span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">Ts</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">js</span><span class="p">)</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">Vs</span><span class="p">)</span><span class="p">}</span><span class="nx">t</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">Qs</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">Ts</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Relative selectors are not allowed when the `relativeSelector` option is disabled&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">[</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="o">||</span><span class="s2">&#34;scope&#34;</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Descendant</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ws</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Adjacent</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Sibling</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">e</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">?</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">:</span><span class="nx">Ks</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">Xs</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">rootFunc</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">$s</span><span class="p">,</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">o</span><span class="p">.</span><span class="nx">shouldTestNextSiblings</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$s</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">falseFunc</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="nx">ds</span><span class="p">.</span><span class="nx">trueFunc</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">zs</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">e</span><span class="o">===</span><span class="nx">t</span><span class="p">,</span><span class="nx">Js</span><span class="o">=</span><span class="p">{</span><span class="nx">adapter</span><span class="o">:</span><span class="nx">Se</span><span class="p">,</span><span class="nx">equals</span><span class="o">:</span><span class="nx">zs</span><span class="p">}</span><span class="p">;</span><span class="kr">const</span> <span class="nx">Zs</span><span class="o">=</span><span class="p">(</span><span class="nx">ea</span><span class="o">=</span><span class="nx">Xs</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">Js</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">adapter</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">adapter</span><span class="o">=</span><span class="nx">Se</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">equals</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">equals</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">adapter</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">equals</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="nx">zs</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">ea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">ea</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ta</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">Us</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">...</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">removeSubsets</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">na</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;first&#34;</span><span class="p">,</span><span class="s2">&#34;last&#34;</span><span class="p">,</span><span class="s2">&#34;eq&#34;</span><span class="p">,</span><span class="s2">&#34;gt&#34;</span><span class="p">,</span><span class="s2">&#34;nth&#34;</span><span class="p">,</span><span class="s2">&#34;lt&#34;</span><span class="p">,</span><span class="s2">&#34;even&#34;</span><span class="p">,</span><span class="s2">&#34;odd&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">ra</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;pseudo&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="o">!</span><span class="nx">na</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="o">!</span><span class="p">(</span><span class="s2">&#34;not&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">ra</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ia</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">r</span> <span class="k">of</span> <span class="nx">e</span><span class="p">)</span><span class="nx">r</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">ra</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="p">[</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">]</span><span class="p">}</span><span class="kr">const</span> <span class="nx">sa</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Universal</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">,</span><span class="nx">aa</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Pseudo</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;scope&#34;</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">oa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ca</span><span class="p">(</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ca</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span><span class="p">[</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">(</span><span class="nx">ps</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">Zs</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">ua</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">la</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ha</span><span class="p">(</span><span class="nx">ps</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ha</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="kr">const</span><span class="p">[</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">Ea</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">s</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="o">!==</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">ua</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="nx">o</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="nx">o</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ua</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">as</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">n</span><span class="p">,</span><span class="nx">context</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">relativeSelector</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span><span class="p">,</span><span class="nx">pa</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">pa</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">pa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">ra</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">?</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="o">:</span><span class="kc">NaN</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;first&#34;</span><span class="o">:</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;nth&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;eq&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="nx">r</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;lt&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="nx">r</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;gt&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;odd&#34;</span><span class="o">:</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;even&#34;</span><span class="o">:</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;last&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;not&#34;</span><span class="o">:</span><span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="kr">const</span> <span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">as</span><span class="p">)</span><span class="o">?</span><span class="nx">fa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="nx">Ea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">Z</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">u</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="o">?</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="o">:</span><span class="kc">NaN</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span><span class="s2">&#34;first&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;lt&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">t</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;last&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="p">[</span><span class="nx">t</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="o">:</span><span class="nx">t</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;nth&#34;</span><span class="o">:</span><span class="k">case</span><span class="s2">&#34;eq&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">[</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">t</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">i</span><span class="p">]</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;gt&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;even&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">t</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;odd&#34;</span><span class="o">:</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">t</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">case</span><span class="s2">&#34;not&#34;</span><span class="o">:</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">ha</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="nx">u</span><span class="p">;</span><span class="kr">const</span> <span class="nx">p</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">as</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">as</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Sibling</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">Zi</span><span class="p">.</span><span class="nx">Adjacent</span><span class="o">||</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="nx">ta</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">Se</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">sa</span><span class="p">)</span><span class="p">}</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">n</span><span class="p">,</span><span class="nx">relativeSelector</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">rootFunc</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">u</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span> <span class="nx">n</span><span class="p">.</span><span class="nx">rootFunc</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">rootFunc</span><span class="o">!==</span><span class="nx">Es</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">n</span><span class="p">,</span><span class="nx">rootFunc</span><span class="o">:</span><span class="nx">Es</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">ra</span><span class="p">)</span><span class="o">?</span><span class="nx">pa</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">?</span><span class="nx">fa</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">Ea</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">fa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">da</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Zs</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">da</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ae</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ta</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Se</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">shouldTestNextSiblings</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">r</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Zs</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="o">===</span><span class="nx">Es</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">ma</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="mi">2</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="o">||</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">Ta</span><span class="o">=</span><span class="sr">/^\s*[~+]/</span><span class="p">;</span><span class="kd">function</span> <span class="nx">_a</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">xa</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">,</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Aa</span><span class="o">=</span><span class="nx">_a</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="k">return</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ga</span><span class="o">=</span><span class="nx">_a</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Na</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">_a</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">r</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">r</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ma</span><span class="p">(</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">oa</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="nx">e</span><span class="o">?</span><span class="nx">Pa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ca</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ia</span><span class="o">=</span><span class="nx">ga</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">L</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">,</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">Aa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">L</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ee</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ba</span><span class="o">=</span><span class="nx">Na</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">L</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ee</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Oa</span><span class="o">=</span><span class="nx">ga</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ne</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ya</span><span class="o">=</span><span class="nx">Aa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span><span class="p">)</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">,</span><span class="nx">La</span><span class="o">=</span><span class="nx">Na</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">ne</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="nx">ga</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">re</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="nx">Aa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">;</span><span class="p">)</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">,</span><span class="nx">Da</span><span class="o">=</span><span class="nx">Na</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">re</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">,</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">Aa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">te</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">!==</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ee</span><span class="p">)</span><span class="p">,</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">Aa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Z</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Ca</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Pa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">includes</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">xa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="nx">la</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">xmlMode</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">root</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">Pa</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">wa</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Di</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="nx">context</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">root</span><span class="o">:</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">xmlMode</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">,</span><span class="nx">lowerCaseTags</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">lowerCaseTags</span><span class="p">,</span><span class="nx">lowerCaseAttributeNames</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">lowerCaseAttributeNames</span><span class="p">,</span><span class="nx">pseudos</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">pseudos</span><span class="p">,</span><span class="nx">quirksMode</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">quirksMode</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">da</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span><span class="p">[</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">(</span><span class="nx">ps</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">pa</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fa</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">Ee</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">[</span><span class="p">...</span><span class="nx">e</span><span class="p">,</span><span class="p">...</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">parent</span><span class="o">:</span><span class="nx">Ia</span><span class="p">,</span><span class="nx">parents</span><span class="o">:</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">parentsUntil</span><span class="o">:</span><span class="nx">ba</span><span class="p">,</span><span class="nx">closest</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="nx">xmlMode</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">,</span><span class="nx">root</span><span class="o">:</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">oa</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="nx">Pa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">next</span><span class="o">:</span><span class="nx">Oa</span><span class="p">,</span><span class="nx">nextAll</span><span class="o">:</span><span class="nx">ya</span><span class="p">,</span><span class="nx">nextUntil</span><span class="o">:</span><span class="nx">La</span><span class="p">,</span><span class="nx">prev</span><span class="o">:</span><span class="nx">ka</span><span class="p">,</span><span class="nx">prevAll</span><span class="o">:</span><span class="nx">va</span><span class="p">,</span><span class="nx">prevUntil</span><span class="o">:</span><span class="nx">Da</span><span class="p">,</span><span class="nx">siblings</span><span class="o">:</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">children</span><span class="o">:</span><span class="nx">Ma</span><span class="p">,</span><span class="nx">contents</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">k</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">each</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="o">++</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">map</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">filter</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">xa</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">xmlMode</span><span class="p">,</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">filterArray</span><span class="o">:</span><span class="nx">xa</span><span class="p">,</span><span class="nx">is</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">ca</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">I</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="o">:</span><span class="o">!</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">Pa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">not</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">la</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">Pa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="nx">r</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">has</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="s2">&#34;:has(&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;)&#34;</span><span class="p">)</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">first</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">last</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">eq</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;=</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">slice</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">prevObject</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">Ee</span><span class="p">(</span><span class="nx">ma</span><span class="p">(</span><span class="nx">ma</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">addBack</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prevObject</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">prevObject</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">prevObject</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ba</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="nx">n</span><span class="o">:</span><span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="o">!==</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">ie</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">||</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">||</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="k">return</span> <span class="nx">t</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Fa</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="mi">2</span><span class="o">===</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="o">!</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="o">||</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Ua</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">_render</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ha</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">Fa</span><span class="p">(</span><span class="p">[</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">t</span><span class="o">+</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">+</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">h</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">===</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">--</span><span class="p">)</span><span class="p">}</span><span class="nx">u</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">prev</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">prev</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="o">?</span><span class="nx">s</span><span class="o">:</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">next</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">prev</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">h</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">r</span><span class="p">[</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">h</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">l</span><span class="o">:</span><span class="nx">r</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">}</span><span class="k">return</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ga</span><span class="o">=</span><span class="nx">Ua</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">Ua</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">qa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parents</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">||</span><span class="nx">Ui</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">)</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="p">;</span><span class="nx">I</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">l</span><span class="o">++</span><span class="p">}</span><span class="nx">e</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Ka</span><span class="o">=</span><span class="nx">qa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">Ba</span><span class="p">(</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">ja</span><span class="o">=</span><span class="nx">qa</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ba</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">Ba</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Va</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">_makeDomArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="p">[</span><span class="p">]</span><span class="o">:</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">t</span><span class="o">?</span><span class="nx">Fi</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_parse</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">.</span><span class="nx">children</span><span class="o">:</span><span class="nx">t</span><span class="o">?</span><span class="nx">Fi</span><span class="p">(</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">}</span><span class="p">,</span><span class="nx">appendTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">prependTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">append</span><span class="o">:</span><span class="nx">Ga</span><span class="p">,</span><span class="nx">prepend</span><span class="o">:</span><span class="nx">Ya</span><span class="p">,</span><span class="nx">wrap</span><span class="o">:</span><span class="nx">Ka</span><span class="p">,</span><span class="nx">wrapInner</span><span class="o">:</span><span class="nx">ja</span><span class="p">,</span><span class="nx">unwrap</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="s2">&#34;body&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">wrapAll</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="s2">&#34;tag&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="s2">&#34;tag&#34;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="o">++</span><span class="p">}</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">after</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">o</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_render</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">;</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">insertAfter</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">before</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">o</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_render</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">;</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">insertBefore</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">ie</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">}</span><span class="p">,</span><span class="nx">replaceWith</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">_makeDomArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="nx">Ba</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">Ha</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">empty</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">k</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">html</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_render</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="k">return</span> <span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="nx">k</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Ba</span><span class="p">(</span><span class="nx">wi</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">_parse</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">toString</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_render</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">text</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="nx">Li</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">Li</span><span class="p">(</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">k</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prev</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">Ba</span><span class="p">(</span><span class="k">new</span> <span class="nx">m</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">Fi</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Wa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Qa</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="s2">&#34;function&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">;</span><span class="s2">&#34;&#34;</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="k">delete</span> <span class="nx">i</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="o">!=</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">style</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="o">?</span><span class="s2">&#34; &#34;</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;: &#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">Wa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Qa</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">trimEnd</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">+=</span><span class="s2">&#34;;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attribs</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Xa</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">css</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">||</span><span class="s2">&#34;object&#34;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">Bi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">Wa</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">Qa</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">$a</span><span class="o">=</span><span class="sr">/%20/g</span><span class="p">,</span><span class="nx">za</span><span class="o">=</span><span class="sr">/\r?\n/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ja</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">serialize</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">serializeArray</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;=&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&amp;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">$a</span><span class="p">,</span><span class="s2">&#34;+&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">serializeArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">I</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&#34;form&#34;</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">name</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;input,select,textarea,keygen&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s2">&#34;input,select,textarea,keygen&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;[name!=&#34;&#34;]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_make</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">za</span><span class="p">,</span><span class="s2">&#34;\r\n&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">za</span><span class="p">,</span><span class="s2">&#34;\r\n&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">Za</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_root</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="nx">Za</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">cheerio</span><span class="o">=</span><span class="s2">&#34;[cheerio object]&#34;</span><span class="p">,</span><span class="nx">Za</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">,</span><span class="nx">Za</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">Za</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">ts</span><span class="p">,</span><span class="nx">wa</span><span class="p">,</span><span class="nx">Va</span><span class="p">,</span><span class="nx">Xa</span><span class="p">,</span><span class="nx">Ja</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">eo</span><span class="p">,</span><span class="nx">to</span><span class="o">=</span><span class="p">(</span><span class="nx">eo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">eo</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="o">||</span><span class="p">{</span><span class="nx">__proto__</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="k">instanceof</span> <span class="nb">Array</span><span class="o">&amp;&amp;</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">__proto__</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="k">in</span> <span class="nx">t</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">eo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;function&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">t</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;Class extends value &#34;</span><span class="o">+</span><span class="nb">String</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34; is not a constructor or null&#34;</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">eo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="k">new</span> <span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">no</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">no</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">t</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">no</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)</span><span class="p">}</span><span class="p">;</span><span class="kr">const</span> <span class="nx">ro</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="mi">65534</span><span class="p">,</span><span class="mi">65535</span><span class="p">,</span><span class="mi">131070</span><span class="p">,</span><span class="mi">131071</span><span class="p">,</span><span class="mi">196606</span><span class="p">,</span><span class="mi">196607</span><span class="p">,</span><span class="mi">262142</span><span class="p">,</span><span class="mi">262143</span><span class="p">,</span><span class="mi">327678</span><span class="p">,</span><span class="mi">327679</span><span class="p">,</span><span class="mi">393214</span><span class="p">,</span><span class="mi">393215</span><span class="p">,</span><span class="mi">458750</span><span class="p">,</span><span class="mi">458751</span><span class="p">,</span><span class="mi">524286</span><span class="p">,</span><span class="mi">524287</span><span class="p">,</span><span class="mi">589822</span><span class="p">,</span><span class="mi">589823</span><span class="p">,</span><span class="mi">655358</span><span class="p">,</span><span class="mi">655359</span><span class="p">,</span><span class="mi">720894</span><span class="p">,</span><span class="mi">720895</span><span class="p">,</span><span class="mi">786430</span><span class="p">,</span><span class="mi">786431</span><span class="p">,</span><span class="mi">851966</span><span class="p">,</span><span class="mi">851967</span><span class="p">,</span><span class="mi">917502</span><span class="p">,</span><span class="mi">917503</span><span class="p">,</span><span class="mi">983038</span><span class="p">,</span><span class="mi">983039</span><span class="p">,</span><span class="mi">1048574</span><span class="p">,</span><span class="mi">1048575</span><span class="p">,</span><span class="mi">1114110</span><span class="p">,</span><span class="mi">1114111</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">io</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EOF</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EOF&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NULL</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NULL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">=</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TABULATION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CARRIAGE_RETURN</span><span class="o">=</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CARRIAGE_RETURN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">=</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LINE_FEED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">=</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FORM_FEED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">=</span><span class="mi">32</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SPACE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EXCLAMATION_MARK</span><span class="o">=</span><span class="mi">33</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EXCLAMATION_MARK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">=</span><span class="mi">34</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;QUOTATION_MARK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NUMBER_SIGN</span><span class="o">=</span><span class="mi">35</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NUMBER_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">=</span><span class="mi">38</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AMPERSAND&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">=</span><span class="mi">39</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;APOSTROPHE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">=</span><span class="mi">45</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HYPHEN_MINUS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">=</span><span class="mi">47</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SOLIDUS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIGIT_0</span><span class="o">=</span><span class="mi">48</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DIGIT_0&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIGIT_9</span><span class="o">=</span><span class="mi">57</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DIGIT_9&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="o">=</span><span class="mi">59</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SEMICOLON&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">60</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">=</span><span class="mi">61</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EQUALS_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">=</span><span class="mi">62</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;GREATER_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">QUESTION_MARK</span><span class="o">=</span><span class="mi">63</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;QUESTION_MARK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_A</span><span class="o">=</span><span class="mi">65</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_CAPITAL_A&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_F</span><span class="o">=</span><span class="mi">70</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_CAPITAL_F&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_X</span><span class="o">=</span><span class="mi">88</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_CAPITAL_X&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_Z</span><span class="o">=</span><span class="mi">90</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_CAPITAL_Z&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RIGHT_SQUARE_BRACKET</span><span class="o">=</span><span class="mi">93</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RIGHT_SQUARE_BRACKET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">GRAVE_ACCENT</span><span class="o">=</span><span class="mi">96</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;GRAVE_ACCENT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_SMALL_A</span><span class="o">=</span><span class="mi">97</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_SMALL_A&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_SMALL_F</span><span class="o">=</span><span class="mi">102</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_SMALL_F&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_SMALL_X</span><span class="o">=</span><span class="mi">120</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_SMALL_X&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LATIN_SMALL_Z</span><span class="o">=</span><span class="mi">122</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LATIN_SMALL_Z&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">REPLACEMENT_CHARACTER</span><span class="o">=</span><span class="mi">65533</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;REPLACEMENT_CHARACTER&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">io</span><span class="o">=</span><span class="nx">io</span><span class="o">||</span><span class="p">(</span><span class="nx">io</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">so</span><span class="o">=</span><span class="s2">&#34;--&#34;</span><span class="p">,</span><span class="nx">ao</span><span class="o">=</span><span class="s2">&#34;[CDATA[&#34;</span><span class="p">,</span><span class="nx">oo</span><span class="o">=</span><span class="s2">&#34;doctype&#34;</span><span class="p">,</span><span class="nx">co</span><span class="o">=</span><span class="s2">&#34;script&#34;</span><span class="p">,</span><span class="nx">lo</span><span class="o">=</span><span class="s2">&#34;public&#34;</span><span class="p">,</span><span class="nx">ho</span><span class="o">=</span><span class="s2">&#34;system&#34;</span><span class="p">;</span><span class="kd">function</span> <span class="nx">uo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="mi">55296</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">57343</span><span class="p">}</span><span class="kd">function</span> <span class="nx">po</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">32</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">10</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">13</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">9</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">12</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">31</span><span class="o">||</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">127</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">159</span><span class="p">}</span><span class="kd">function</span> <span class="nx">fo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="mi">64976</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">65007</span><span class="o">||</span><span class="nx">ro</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Eo</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">controlCharacterInInputStream</span><span class="o">=</span><span class="s2">&#34;control-character-in-input-stream&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">noncharacterInInputStream</span><span class="o">=</span><span class="s2">&#34;noncharacter-in-input-stream&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">surrogateInInputStream</span><span class="o">=</span><span class="s2">&#34;surrogate-in-input-stream&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nonVoidHtmlElementStartTagWithTrailingSolidus</span><span class="o">=</span><span class="s2">&#34;non-void-html-element-start-tag-with-trailing-solidus&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">endTagWithAttributes</span><span class="o">=</span><span class="s2">&#34;end-tag-with-attributes&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">endTagWithTrailingSolidus</span><span class="o">=</span><span class="s2">&#34;end-tag-with-trailing-solidus&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedSolidusInTag</span><span class="o">=</span><span class="s2">&#34;unexpected-solidus-in-tag&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="o">=</span><span class="s2">&#34;unexpected-null-character&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedQuestionMarkInsteadOfTagName</span><span class="o">=</span><span class="s2">&#34;unexpected-question-mark-instead-of-tag-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">invalidFirstCharacterOfTagName</span><span class="o">=</span><span class="s2">&#34;invalid-first-character-of-tag-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedEqualsSignBeforeAttributeName</span><span class="o">=</span><span class="s2">&#34;unexpected-equals-sign-before-attribute-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingEndTagName</span><span class="o">=</span><span class="s2">&#34;missing-end-tag-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedCharacterInAttributeName</span><span class="o">=</span><span class="s2">&#34;unexpected-character-in-attribute-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unknownNamedCharacterReference</span><span class="o">=</span><span class="s2">&#34;unknown-named-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingSemicolonAfterCharacterReference</span><span class="o">=</span><span class="s2">&#34;missing-semicolon-after-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedCharacterAfterDoctypeSystemIdentifier</span><span class="o">=</span><span class="s2">&#34;unexpected-character-after-doctype-system-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">unexpectedCharacterInUnquotedAttributeValue</span><span class="o">=</span><span class="s2">&#34;unexpected-character-in-unquoted-attribute-value&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofBeforeTagName</span><span class="o">=</span><span class="s2">&#34;eof-before-tag-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInTag</span><span class="o">=</span><span class="s2">&#34;eof-in-tag&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingAttributeValue</span><span class="o">=</span><span class="s2">&#34;missing-attribute-value&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingWhitespaceBetweenAttributes</span><span class="o">=</span><span class="s2">&#34;missing-whitespace-between-attributes&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypePublicKeyword</span><span class="o">=</span><span class="s2">&#34;missing-whitespace-after-doctype-public-keyword&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers</span><span class="o">=</span><span class="s2">&#34;missing-whitespace-between-doctype-public-and-system-identifiers&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypeSystemKeyword</span><span class="o">=</span><span class="s2">&#34;missing-whitespace-after-doctype-system-keyword&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypePublicIdentifier</span><span class="o">=</span><span class="s2">&#34;missing-quote-before-doctype-public-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypeSystemIdentifier</span><span class="o">=</span><span class="s2">&#34;missing-quote-before-doctype-system-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingDoctypePublicIdentifier</span><span class="o">=</span><span class="s2">&#34;missing-doctype-public-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingDoctypeSystemIdentifier</span><span class="o">=</span><span class="s2">&#34;missing-doctype-system-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">abruptDoctypePublicIdentifier</span><span class="o">=</span><span class="s2">&#34;abrupt-doctype-public-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">abruptDoctypeSystemIdentifier</span><span class="o">=</span><span class="s2">&#34;abrupt-doctype-system-identifier&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">cdataInHtmlContent</span><span class="o">=</span><span class="s2">&#34;cdata-in-html-content&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">incorrectlyOpenedComment</span><span class="o">=</span><span class="s2">&#34;incorrectly-opened-comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="o">=</span><span class="s2">&#34;eof-in-script-html-comment-like-text&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="o">=</span><span class="s2">&#34;eof-in-doctype&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nestedComment</span><span class="o">=</span><span class="s2">&#34;nested-comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">abruptClosingOfEmptyComment</span><span class="o">=</span><span class="s2">&#34;abrupt-closing-of-empty-comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInComment</span><span class="o">=</span><span class="s2">&#34;eof-in-comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">incorrectlyClosedComment</span><span class="o">=</span><span class="s2">&#34;incorrectly-closed-comment&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInCdata</span><span class="o">=</span><span class="s2">&#34;eof-in-cdata&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">absenceOfDigitsInNumericCharacterReference</span><span class="o">=</span><span class="s2">&#34;absence-of-digits-in-numeric-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nullCharacterReference</span><span class="o">=</span><span class="s2">&#34;null-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">surrogateCharacterReference</span><span class="o">=</span><span class="s2">&#34;surrogate-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">characterReferenceOutsideUnicodeRange</span><span class="o">=</span><span class="s2">&#34;character-reference-outside-unicode-range&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">controlCharacterReference</span><span class="o">=</span><span class="s2">&#34;control-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">noncharacterCharacterReference</span><span class="o">=</span><span class="s2">&#34;noncharacter-character-reference&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingWhitespaceBeforeDoctypeName</span><span class="o">=</span><span class="s2">&#34;missing-whitespace-before-doctype-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingDoctypeName</span><span class="o">=</span><span class="s2">&#34;missing-doctype-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">invalidCharacterSequenceAfterDoctypeName</span><span class="o">=</span><span class="s2">&#34;invalid-character-sequence-after-doctype-name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">duplicateAttribute</span><span class="o">=</span><span class="s2">&#34;duplicate-attribute&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nonConformingDoctype</span><span class="o">=</span><span class="s2">&#34;non-conforming-doctype&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">missingDoctype</span><span class="o">=</span><span class="s2">&#34;missing-doctype&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">misplacedDoctype</span><span class="o">=</span><span class="s2">&#34;misplaced-doctype&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="o">=</span><span class="s2">&#34;end-tag-without-matching-open-element&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">closingOfElementWithOpenChildElements</span><span class="o">=</span><span class="s2">&#34;closing-of-element-with-open-child-elements&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">disallowedContentInNoscriptInHead</span><span class="o">=</span><span class="s2">&#34;disallowed-content-in-noscript-in-head&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElementsLeftAfterEof</span><span class="o">=</span><span class="s2">&#34;open-elements-left-after-eof&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">abandonedHeadElementChild</span><span class="o">=</span><span class="s2">&#34;abandoned-head-element-child&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">misplacedStartTagForHeadElement</span><span class="o">=</span><span class="s2">&#34;misplaced-start-tag-for-head-element&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">nestedNoscriptInHead</span><span class="o">=</span><span class="s2">&#34;nested-noscript-in-head&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">eofInElementThatCanContainOnlyText</span><span class="o">=</span><span class="s2">&#34;eof-in-element-that-can-contain-only-text&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Eo</span><span class="o">=</span><span class="nx">Eo</span><span class="o">||</span><span class="p">(</span><span class="nx">Eo</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">class</span> <span class="nx">mo</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="o">=</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">gapStack</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bufferWaterline</span><span class="o">=</span><span class="mi">65536</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lineStartPos</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">droppedBufferSize</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastErrOffset</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nx">get</span> <span class="nx">col</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">lineStartPos</span><span class="o">+</span><span class="nb">Number</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">)</span><span class="p">}</span><span class="nx">get</span> <span class="nx">offset</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">droppedBufferSize</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">}</span><span class="nx">getError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">line</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">col</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">offset</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">code</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">startLine</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">startCol</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">startOffset</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">}</span><span class="nx">_err</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onParseError</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">lastErrOffset</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastErrOffset</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onParseError</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_addGap</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">gapStack</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">}</span><span class="nx">_processSurrogate</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="mi">56320</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">57343</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addGap</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="mi">1024</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">55296</span><span class="p">)</span><span class="o">+</span><span class="mi">9216</span><span class="o">+</span><span class="nx">t</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">surrogateInInputStream</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="nx">willDropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">bufferWaterline</span><span class="p">}</span><span class="nx">dropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">willDropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lineStartPos</span><span class="o">-=</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">droppedBufferSize</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="o">=</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">gapStack</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">write</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="o">+=</span><span class="nx">e</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="nx">insertHtmlAtCurrentPos</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="mi">32</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">peek</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="p">,</span><span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">advance</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lineStartPos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">=</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">lastChunkWritten</span><span class="p">,</span><span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">;</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">CARRIAGE_RETURN</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="o">--</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_addGap</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">advance</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">uo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_processSurrogate</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onParseError</span><span class="o">||</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">31</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">127</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">CARRIAGE_RETURN</span><span class="o">||</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">159</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">64976</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_checkForProblematicCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">}</span><span class="nx">_checkForProblematicCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">po</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">controlCharacterInInputStream</span><span class="p">)</span><span class="o">:</span><span class="nx">fo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">noncharacterInInputStream</span><span class="p">)</span><span class="p">}</span><span class="nx">retreat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">-=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="p">;</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lastGapPos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gapStack</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="o">--</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isEol</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">To</span><span class="p">;</span><span class="kd">function</span> <span class="nx">_o</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CHARACTER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NULL_CHARACTER</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NULL_CHARACTER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">=</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;WHITESPACE_CHARACTER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">START_TAG</span><span class="o">=</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;START_TAG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">END_TAG</span><span class="o">=</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;END_TAG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT</span><span class="o">=</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="o">=</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EOF</span><span class="o">=</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EOF&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HIBERNATION</span><span class="o">=</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HIBERNATION&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">To</span><span class="o">=</span><span class="nx">To</span><span class="o">||</span><span class="p">(</span><span class="nx">To</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ao</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="s1">&#39;ᵁ&lt;Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&amp;䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻&gt;䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻&lt;䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻&#34;䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀&gt;;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀&lt;;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀&gt;⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀&lt;⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">Ao</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">go</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="s2">&#34;Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢&#34;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">go</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">No</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">65533</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">128</span><span class="p">,</span><span class="mi">8364</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">130</span><span class="p">,</span><span class="mi">8218</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">131</span><span class="p">,</span><span class="mi">402</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">132</span><span class="p">,</span><span class="mi">8222</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">133</span><span class="p">,</span><span class="mi">8230</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">134</span><span class="p">,</span><span class="mi">8224</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">135</span><span class="p">,</span><span class="mi">8225</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">136</span><span class="p">,</span><span class="mi">710</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">137</span><span class="p">,</span><span class="mi">8240</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">138</span><span class="p">,</span><span class="mi">352</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">139</span><span class="p">,</span><span class="mi">8249</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">140</span><span class="p">,</span><span class="mi">338</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">142</span><span class="p">,</span><span class="mi">381</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">145</span><span class="p">,</span><span class="mi">8216</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">146</span><span class="p">,</span><span class="mi">8217</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">147</span><span class="p">,</span><span class="mi">8220</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">148</span><span class="p">,</span><span class="mi">8221</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">149</span><span class="p">,</span><span class="mi">8226</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">150</span><span class="p">,</span><span class="mi">8211</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">151</span><span class="p">,</span><span class="mi">8212</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">152</span><span class="p">,</span><span class="mi">732</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">153</span><span class="p">,</span><span class="mi">8482</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">154</span><span class="p">,</span><span class="mi">353</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">155</span><span class="p">,</span><span class="mi">8250</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">156</span><span class="p">,</span><span class="mi">339</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">158</span><span class="p">,</span><span class="mi">382</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">159</span><span class="p">,</span><span class="mi">376</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="mi">55296</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="mi">57343</span><span class="o">||</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">1114111</span><span class="o">?</span><span class="mi">65533</span><span class="o">:</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="nx">t</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;</span><span class="mi">65535</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">-=</span><span class="mi">65536</span><span class="p">,</span><span class="nx">t</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;&gt;&gt;</span><span class="mi">10</span><span class="o">&amp;</span><span class="mi">1023</span><span class="o">|</span><span class="mi">55296</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">56320</span><span class="o">|</span><span class="mi">1023</span><span class="o">&amp;</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="k">default</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">)</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">No</span><span class="p">)</span><span class="p">,</span><span class="nx">No</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="p">,</span><span class="nx">No</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Co</span><span class="o">=</span><span class="nx">Ao</span><span class="p">,</span><span class="nx">Io</span><span class="o">=</span><span class="nx">go</span><span class="p">,</span><span class="nx">So</span><span class="o">=</span><span class="nx">No</span><span class="p">,</span><span class="nx">bo</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Ge</span><span class="o">&amp;&amp;</span><span class="nx">Ge</span><span class="p">.</span><span class="nx">__importDefault</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">__esModule</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">{</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">}</span><span class="p">;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeXML</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeHTMLStrict</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeHTML</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">determineBranch</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">BinTrieFlags</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeCodePoint</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlDecodeTree</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">htmlDecodeTree</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">Co</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">htmlDecodeTree</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="k">default</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">Io</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlDecodeTree</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="k">default</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">So</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeCodePoint</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="k">default</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">So</span><span class="p">;</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;&amp;&#34;</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">+=</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">NUM</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">,</span><span class="nx">u</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">E</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">SEMI</span><span class="o">||</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">&gt;&gt;</span><span class="mi">14</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">p</span><span class="o">+=</span><span class="nx">E</span><span class="p">}</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">!==</span><span class="nx">l</span><span class="p">)</span><span class="nx">r</span><span class="o">+=</span><span class="mi">1</span><span class="o">===</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">14</span><span class="p">)</span><span class="o">?</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">&amp;</span><span class="o">~</span><span class="nx">o</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="p">)</span><span class="o">:</span><span class="mi">2</span><span class="o">===</span><span class="nx">E</span><span class="o">?</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="o">:</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">u</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="nx">_</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="nx">_</span><span class="o">|</span><span class="nx">a</span><span class="p">.</span><span class="nx">To_LOWER_BIT</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">LOWER_X</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">T</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span><span class="nx">c</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="nx">_</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">_</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ZERO</span><span class="o">&amp;&amp;</span><span class="nx">_</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">NINE</span><span class="o">||</span><span class="mi">16</span><span class="o">===</span><span class="nx">T</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">_</span><span class="o">|</span><span class="nx">a</span><span class="p">.</span><span class="nx">To_LOWER_BIT</span><span class="p">)</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">LOWER_A</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">_</span><span class="o">|</span><span class="nx">a</span><span class="p">.</span><span class="nx">To_LOWER_BIT</span><span class="p">)</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">LOWER_F</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">!==</span><span class="nx">c</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">T</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">SEMI</span><span class="p">)</span><span class="nx">c</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">r</span><span class="o">+=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="k">default</span><span class="p">)</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">r</span><span class="o">+</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">BRANCH_LENGTH</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">7</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="o">&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">JUMP_TABLE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">s</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="o">-</span><span class="nx">s</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">i</span><span class="o">?</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="nx">a</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="nx">l</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">l</span><span class="o">&gt;&gt;&gt;</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">u</span><span class="o">&gt;</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;replaceCodePoint&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;fromCodePoint&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">enumerable</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NUM</span><span class="o">=</span><span class="mi">35</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NUM&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SEMI</span><span class="o">=</span><span class="mi">59</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SEMI&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ZERO</span><span class="o">=</span><span class="mi">48</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ZERO&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NINE</span><span class="o">=</span><span class="mi">57</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NINE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LOWER_A</span><span class="o">=</span><span class="mi">97</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LOWER_A&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LOWER_F</span><span class="o">=</span><span class="mi">102</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LOWER_F&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LOWER_X</span><span class="o">=</span><span class="mi">120</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LOWER_X&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">To_LOWER_BIT</span><span class="o">=</span><span class="mi">32</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;To_LOWER_BIT&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="o">=</span><span class="mi">49152</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;VALUE_LENGTH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BRANCH_LENGTH</span><span class="o">=</span><span class="mi">16256</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BRANCH_LENGTH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">JUMP_TABLE</span><span class="o">=</span><span class="mi">127</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;JUMP_TABLE&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">BinTrieFlags</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">BinTrieFlags</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">determineBranch</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="k">default</span><span class="p">)</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="k">default</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeHTML</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeHTMLStrict</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">decodeXML</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">p</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">bo</span><span class="p">)</span><span class="p">,</span><span class="nx">bo</span><span class="p">.</span><span class="nx">decodeXML</span><span class="p">,</span><span class="nx">bo</span><span class="p">.</span><span class="nx">decodeHTMLStrict</span><span class="p">,</span><span class="nx">bo</span><span class="p">.</span><span class="nx">decodeHTML</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Oo</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">determineBranch</span><span class="p">,</span><span class="nx">yo</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">BinTrieFlags</span><span class="p">,</span><span class="nx">Lo</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">,</span><span class="nx">ko</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">replaceCodePoint</span><span class="p">;</span><span class="nx">bo</span><span class="p">.</span><span class="nx">decodeCodePoint</span><span class="p">;</span><span class="kd">var</span> <span class="nx">vo</span><span class="p">,</span><span class="nx">Do</span><span class="p">,</span><span class="nx">Ro</span><span class="p">,</span><span class="nx">Mo</span><span class="p">,</span><span class="nx">Po</span><span class="p">,</span><span class="nx">xo</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">xmlDecodeTree</span><span class="p">,</span><span class="nx">wo</span><span class="o">=</span><span class="nx">bo</span><span class="p">.</span><span class="nx">htmlDecodeTree</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">HTML</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/1999/xhtml&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MATHML</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/1998/Math/MathML&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SVG</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/2000/svg&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">XLINK</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/1999/xlink&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">XML</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/XML/1998/namespace&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">XMLNS</span><span class="o">=</span><span class="s2">&#34;http://www.w3.org/2000/xmlns/&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">vo</span><span class="o">=</span><span class="nx">vo</span><span class="o">||</span><span class="p">(</span><span class="nx">vo</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">TYPE</span><span class="o">=</span><span class="s2">&#34;type&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ACTION</span><span class="o">=</span><span class="s2">&#34;action&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ENCODING</span><span class="o">=</span><span class="s2">&#34;encoding&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">PROMPT</span><span class="o">=</span><span class="s2">&#34;prompt&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NAME</span><span class="o">=</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">COLOR</span><span class="o">=</span><span class="s2">&#34;color&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FACE</span><span class="o">=</span><span class="s2">&#34;face&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SIZE</span><span class="o">=</span><span class="s2">&#34;size&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Do</span><span class="o">=</span><span class="nx">Do</span><span class="o">||</span><span class="p">(</span><span class="nx">Do</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">NO_QUIRKS</span><span class="o">=</span><span class="s2">&#34;no-quirks&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="o">=</span><span class="s2">&#34;quirks&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">LIMITED_QUIRKS</span><span class="o">=</span><span class="s2">&#34;limited-quirks&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Ro</span><span class="o">=</span><span class="nx">Ro</span><span class="o">||</span><span class="p">(</span><span class="nx">Ro</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">A</span><span class="o">=</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="o">=</span><span class="s2">&#34;address&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="o">=</span><span class="s2">&#34;annotation-xml&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">APPLET</span><span class="o">=</span><span class="s2">&#34;applet&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">AREA</span><span class="o">=</span><span class="s2">&#34;area&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="o">=</span><span class="s2">&#34;article&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ASIDE</span><span class="o">=</span><span class="s2">&#34;aside&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">B</span><span class="o">=</span><span class="s2">&#34;b&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BASE</span><span class="o">=</span><span class="s2">&#34;base&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">=</span><span class="s2">&#34;basefont&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">=</span><span class="s2">&#34;bgsound&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BIG</span><span class="o">=</span><span class="s2">&#34;big&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="o">=</span><span class="s2">&#34;blockquote&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BODY</span><span class="o">=</span><span class="s2">&#34;body&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BR</span><span class="o">=</span><span class="s2">&#34;br&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">=</span><span class="s2">&#34;button&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">=</span><span class="s2">&#34;caption&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">CENTER</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">CODE</span><span class="o">=</span><span class="s2">&#34;code&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">COL</span><span class="o">=</span><span class="s2">&#34;col&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">=</span><span class="s2">&#34;colgroup&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DD</span><span class="o">=</span><span class="s2">&#34;dd&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DESC</span><span class="o">=</span><span class="s2">&#34;desc&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DETAILS</span><span class="o">=</span><span class="s2">&#34;details&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIALOG</span><span class="o">=</span><span class="s2">&#34;dialog&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIR</span><span class="o">=</span><span class="s2">&#34;dir&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIV</span><span class="o">=</span><span class="s2">&#34;div&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DL</span><span class="o">=</span><span class="s2">&#34;dl&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">DT</span><span class="o">=</span><span class="s2">&#34;dt&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">EM</span><span class="o">=</span><span class="s2">&#34;em&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">EMBED</span><span class="o">=</span><span class="s2">&#34;embed&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="o">=</span><span class="s2">&#34;fieldset&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="o">=</span><span class="s2">&#34;figcaption&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIGURE</span><span class="o">=</span><span class="s2">&#34;figure&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FONT</span><span class="o">=</span><span class="s2">&#34;font&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FOOTER</span><span class="o">=</span><span class="s2">&#34;footer&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="o">=</span><span class="s2">&#34;foreignObject&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FORM</span><span class="o">=</span><span class="s2">&#34;form&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FRAME</span><span class="o">=</span><span class="s2">&#34;frame&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">=</span><span class="s2">&#34;frameset&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H1</span><span class="o">=</span><span class="s2">&#34;h1&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H2</span><span class="o">=</span><span class="s2">&#34;h2&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H3</span><span class="o">=</span><span class="s2">&#34;h3&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H4</span><span class="o">=</span><span class="s2">&#34;h4&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H5</span><span class="o">=</span><span class="s2">&#34;h5&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">H6</span><span class="o">=</span><span class="s2">&#34;h6&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">=</span><span class="s2">&#34;head&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEADER</span><span class="o">=</span><span class="s2">&#34;header&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">HGROUP</span><span class="o">=</span><span class="s2">&#34;hgroup&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">HR</span><span class="o">=</span><span class="s2">&#34;hr&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">HTML</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">I</span><span class="o">=</span><span class="s2">&#34;i&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">IMG</span><span class="o">=</span><span class="s2">&#34;img&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">IMAGE</span><span class="o">=</span><span class="s2">&#34;image&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">=</span><span class="s2">&#34;input&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">IFRAME</span><span class="o">=</span><span class="s2">&#34;iframe&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="o">=</span><span class="s2">&#34;keygen&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">LABEL</span><span class="o">=</span><span class="s2">&#34;label&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">LI</span><span class="o">=</span><span class="s2">&#34;li&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">LINK</span><span class="o">=</span><span class="s2">&#34;link&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">LISTING</span><span class="o">=</span><span class="s2">&#34;listing&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MAIN</span><span class="o">=</span><span class="s2">&#34;main&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MALIGNMARK</span><span class="o">=</span><span class="s2">&#34;malignmark&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="o">=</span><span class="s2">&#34;marquee&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MATH</span><span class="o">=</span><span class="s2">&#34;math&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MENU</span><span class="o">=</span><span class="s2">&#34;menu&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">META</span><span class="o">=</span><span class="s2">&#34;meta&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MGLYPH</span><span class="o">=</span><span class="s2">&#34;mglyph&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MI</span><span class="o">=</span><span class="s2">&#34;mi&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MO</span><span class="o">=</span><span class="s2">&#34;mo&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MN</span><span class="o">=</span><span class="s2">&#34;mn&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MS</span><span class="o">=</span><span class="s2">&#34;ms&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">MTEXT</span><span class="o">=</span><span class="s2">&#34;mtext&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NAV</span><span class="o">=</span><span class="s2">&#34;nav&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOBR</span><span class="o">=</span><span class="s2">&#34;nobr&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">=</span><span class="s2">&#34;noframes&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="o">=</span><span class="s2">&#34;noembed&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">=</span><span class="s2">&#34;noscript&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">OBJECT</span><span class="o">=</span><span class="s2">&#34;object&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">OL</span><span class="o">=</span><span class="s2">&#34;ol&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">=</span><span class="s2">&#34;optgroup&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">=</span><span class="s2">&#34;option&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">P</span><span class="o">=</span><span class="s2">&#34;p&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">PARAM</span><span class="o">=</span><span class="s2">&#34;param&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">=</span><span class="s2">&#34;plaintext&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">PRE</span><span class="o">=</span><span class="s2">&#34;pre&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">RB</span><span class="o">=</span><span class="s2">&#34;rb&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">RP</span><span class="o">=</span><span class="s2">&#34;rp&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">RT</span><span class="o">=</span><span class="s2">&#34;rt&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">RTC</span><span class="o">=</span><span class="s2">&#34;rtc&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">RUBY</span><span class="o">=</span><span class="s2">&#34;ruby&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">S</span><span class="o">=</span><span class="s2">&#34;s&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">=</span><span class="s2">&#34;script&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SECTION</span><span class="o">=</span><span class="s2">&#34;section&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">=</span><span class="s2">&#34;select&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SOURCE</span><span class="o">=</span><span class="s2">&#34;source&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SMALL</span><span class="o">=</span><span class="s2">&#34;small&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SPAN</span><span class="o">=</span><span class="s2">&#34;span&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">STRIKE</span><span class="o">=</span><span class="s2">&#34;strike&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">STRONG</span><span class="o">=</span><span class="s2">&#34;strong&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">=</span><span class="s2">&#34;style&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUB</span><span class="o">=</span><span class="s2">&#34;sub&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="o">=</span><span class="s2">&#34;summary&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUP</span><span class="o">=</span><span class="s2">&#34;sup&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">=</span><span class="s2">&#34;table&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">=</span><span class="s2">&#34;tbody&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">=</span><span class="s2">&#34;template&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="o">=</span><span class="s2">&#34;textarea&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">=</span><span class="s2">&#34;tfoot&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TD</span><span class="o">=</span><span class="s2">&#34;td&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TH</span><span class="o">=</span><span class="s2">&#34;th&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">=</span><span class="s2">&#34;thead&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">=</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TR</span><span class="o">=</span><span class="s2">&#34;tr&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TRACK</span><span class="o">=</span><span class="s2">&#34;track&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">TT</span><span class="o">=</span><span class="s2">&#34;tt&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">U</span><span class="o">=</span><span class="s2">&#34;u&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">UL</span><span class="o">=</span><span class="s2">&#34;ul&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">SVG</span><span class="o">=</span><span class="s2">&#34;svg&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">VAR</span><span class="o">=</span><span class="s2">&#34;var&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">WBR</span><span class="o">=</span><span class="s2">&#34;wbr&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">XMP</span><span class="o">=</span><span class="s2">&#34;xmp&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Mo</span><span class="o">=</span><span class="nx">Mo</span><span class="o">||</span><span class="p">(</span><span class="nx">Mo</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;UNKNOWN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">A</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;A&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="o">=</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ADDRESS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="o">=</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ANNOTATION_XML&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">APPLET</span><span class="o">=</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;APPLET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AREA</span><span class="o">=</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AREA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="o">=</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ARTICLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ASIDE</span><span class="o">=</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ASIDE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">B</span><span class="o">=</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;B&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BASE</span><span class="o">=</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BASE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">=</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BASEFONT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">=</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BGSOUND&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BIG</span><span class="o">=</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BIG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="o">=</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BLOCKQUOTE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BODY</span><span class="o">=</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BR</span><span class="o">=</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">=</span><span class="mi">16</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BUTTON&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">=</span><span class="mi">17</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CAPTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CENTER</span><span class="o">=</span><span class="mi">18</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CENTER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CODE</span><span class="o">=</span><span class="mi">19</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CODE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COL</span><span class="o">=</span><span class="mi">20</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">=</span><span class="mi">21</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COLGROUP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DD</span><span class="o">=</span><span class="mi">22</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DESC</span><span class="o">=</span><span class="mi">23</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DESC&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DETAILS</span><span class="o">=</span><span class="mi">24</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DETAILS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIALOG</span><span class="o">=</span><span class="mi">25</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DIALOG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIR</span><span class="o">=</span><span class="mi">26</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DIR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DIV</span><span class="o">=</span><span class="mi">27</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DIV&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DL</span><span class="o">=</span><span class="mi">28</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DT</span><span class="o">=</span><span class="mi">29</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EM</span><span class="o">=</span><span class="mi">30</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EM&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">EMBED</span><span class="o">=</span><span class="mi">31</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;EMBED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="o">=</span><span class="mi">32</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FIELDSET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="o">=</span><span class="mi">33</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FIGCAPTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FIGURE</span><span class="o">=</span><span class="mi">34</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FIGURE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FONT</span><span class="o">=</span><span class="mi">35</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FONT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FOOTER</span><span class="o">=</span><span class="mi">36</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FOOTER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="o">=</span><span class="mi">37</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FOREIGN_OBJECT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FORM</span><span class="o">=</span><span class="mi">38</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FORM&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FRAME</span><span class="o">=</span><span class="mi">39</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FRAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">=</span><span class="mi">40</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;FRAMESET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H1</span><span class="o">=</span><span class="mi">41</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H1&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H2</span><span class="o">=</span><span class="mi">42</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H2&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H3</span><span class="o">=</span><span class="mi">43</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H3&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H4</span><span class="o">=</span><span class="mi">44</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H4&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H5</span><span class="o">=</span><span class="mi">45</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H5&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">H6</span><span class="o">=</span><span class="mi">46</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;H6&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">=</span><span class="mi">47</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HEAD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEADER</span><span class="o">=</span><span class="mi">48</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HEADER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HGROUP</span><span class="o">=</span><span class="mi">49</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HGROUP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HR</span><span class="o">=</span><span class="mi">50</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HTML</span><span class="o">=</span><span class="mi">51</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">I</span><span class="o">=</span><span class="mi">52</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;I&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IMG</span><span class="o">=</span><span class="mi">53</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IMG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IMAGE</span><span class="o">=</span><span class="mi">54</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IMAGE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">=</span><span class="mi">55</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;INPUT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IFRAME</span><span class="o">=</span><span class="mi">56</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IFRAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="o">=</span><span class="mi">57</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;KEYGEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LABEL</span><span class="o">=</span><span class="mi">58</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LABEL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LI</span><span class="o">=</span><span class="mi">59</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LI&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LINK</span><span class="o">=</span><span class="mi">60</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LINK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">LISTING</span><span class="o">=</span><span class="mi">61</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;LISTING&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MAIN</span><span class="o">=</span><span class="mi">62</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MAIN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MALIGNMARK</span><span class="o">=</span><span class="mi">63</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MALIGNMARK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="o">=</span><span class="mi">64</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MARQUEE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MATH</span><span class="o">=</span><span class="mi">65</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MATH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MENU</span><span class="o">=</span><span class="mi">66</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MENU&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">META</span><span class="o">=</span><span class="mi">67</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;META&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MGLYPH</span><span class="o">=</span><span class="mi">68</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MGLYPH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MI</span><span class="o">=</span><span class="mi">69</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MI&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MO</span><span class="o">=</span><span class="mi">70</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MO&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MN</span><span class="o">=</span><span class="mi">71</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MS</span><span class="o">=</span><span class="mi">72</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MTEXT</span><span class="o">=</span><span class="mi">73</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MTEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NAV</span><span class="o">=</span><span class="mi">74</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NAV&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOBR</span><span class="o">=</span><span class="mi">75</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NOBR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">=</span><span class="mi">76</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NOFRAMES&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="o">=</span><span class="mi">77</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NOEMBED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">=</span><span class="mi">78</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NOSCRIPT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">OBJECT</span><span class="o">=</span><span class="mi">79</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;OBJECT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">OL</span><span class="o">=</span><span class="mi">80</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;OL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">=</span><span class="mi">81</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;OPTGROUP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">=</span><span class="mi">82</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;OPTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">P</span><span class="o">=</span><span class="mi">83</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;P&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">PARAM</span><span class="o">=</span><span class="mi">84</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;PARAM&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">=</span><span class="mi">85</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;PLAINTEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">PRE</span><span class="o">=</span><span class="mi">86</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;PRE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RB</span><span class="o">=</span><span class="mi">87</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RB&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RP</span><span class="o">=</span><span class="mi">88</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RT</span><span class="o">=</span><span class="mi">89</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RTC</span><span class="o">=</span><span class="mi">90</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RTC&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RUBY</span><span class="o">=</span><span class="mi">91</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RUBY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">S</span><span class="o">=</span><span class="mi">92</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;S&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">=</span><span class="mi">93</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SECTION</span><span class="o">=</span><span class="mi">94</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SECTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">=</span><span class="mi">95</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SELECT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SOURCE</span><span class="o">=</span><span class="mi">96</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SOURCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SMALL</span><span class="o">=</span><span class="mi">97</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SMALL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SPAN</span><span class="o">=</span><span class="mi">98</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SPAN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">STRIKE</span><span class="o">=</span><span class="mi">99</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;STRIKE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">STRONG</span><span class="o">=</span><span class="mi">100</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;STRONG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">=</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;STYLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUB</span><span class="o">=</span><span class="mi">102</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SUB&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="o">=</span><span class="mi">103</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SUMMARY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SUP</span><span class="o">=</span><span class="mi">104</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SUP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">=</span><span class="mi">105</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TABLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">=</span><span class="mi">106</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TBODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">=</span><span class="mi">107</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TEMPLATE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="o">=</span><span class="mi">108</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TEXTAREA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">=</span><span class="mi">109</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TFOOT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TD</span><span class="o">=</span><span class="mi">110</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TH</span><span class="o">=</span><span class="mi">111</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">=</span><span class="mi">112</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;THEAD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">=</span><span class="mi">113</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TITLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TR</span><span class="o">=</span><span class="mi">114</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TRACK</span><span class="o">=</span><span class="mi">115</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TRACK&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TT</span><span class="o">=</span><span class="mi">116</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">U</span><span class="o">=</span><span class="mi">117</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;U&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">UL</span><span class="o">=</span><span class="mi">118</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;UL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SVG</span><span class="o">=</span><span class="mi">119</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SVG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">VAR</span><span class="o">=</span><span class="mi">120</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;VAR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">WBR</span><span class="o">=</span><span class="mi">121</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;WBR&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">XMP</span><span class="o">=</span><span class="mi">122</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;XMP&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Po</span><span class="o">=</span><span class="nx">Po</span><span class="o">||</span><span class="p">(</span><span class="nx">Po</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">Bo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">A</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">APPLET</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">APPLET</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">AREA</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">AREA</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">ASIDE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ASIDE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">B</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">B</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BASE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BASE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BIG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BIG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BUTTON</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">CENTER</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CENTER</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">CODE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CODE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">COL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DESC</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DESC</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DETAILS</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DETAILS</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DIALOG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DIALOG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DIR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DIR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DIV</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DIV</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">DT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">EM</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">EM</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">EMBED</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">EMBED</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FIGURE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FIGURE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FONT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FONT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FOOTER</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FOOTER</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FORM</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FRAME</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FRAME</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H1</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H1</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H2</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H2</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H3</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H3</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H4</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H4</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H5</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H5</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">H6</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H6</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HEADER</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEADER</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HGROUP</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">I</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">I</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">IMG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IMAGE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">IMAGE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IFRAME</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">IFRAME</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">LABEL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LABEL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">LI</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">LINK</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">LISTING</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LISTING</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MAIN</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MAIN</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MALIGNMARK</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MALIGNMARK</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MATH</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MATH</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MENU</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MENU</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">META</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MGLYPH</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MGLYPH</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MI</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MI</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MO</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MO</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MN</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MN</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MS</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MS</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">MTEXT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MTEXT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NAV</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NAV</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOBR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOBR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">OBJECT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OBJECT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">OL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">OPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">P</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">PARAM</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">PARAM</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">PRE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">PRE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">RB</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RB</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">RP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RP</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">RT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">RTC</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RTC</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">RUBY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RUBY</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">S</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">S</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SECTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SECTION</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SOURCE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SOURCE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SMALL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SMALL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">STRIKE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">STRIKE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">STRONG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">STRONG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SUB</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SUB</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SUP</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TH</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TRACK</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TRACK</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TT</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">U</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">U</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UL</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SVG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">VAR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">VAR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">WBR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">WBR</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">XMP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">XMP</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Fo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">Bo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Uo</span><span class="o">=</span><span class="nx">Po</span><span class="p">,</span><span class="nx">Ho</span><span class="o">=</span><span class="p">{</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">APPLET</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">AREA</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">ASIDE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BASE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BODY</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BR</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">BUTTON</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">CENTER</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">COL</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DD</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DETAILS</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DIR</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DIV</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DL</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">EMBED</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FIGURE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FOOTER</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FORM</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FRAME</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H1</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H2</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H3</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H4</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H5</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H6</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">HEADER</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">HGROUP</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">HR</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">IFRAME</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">LI</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">LINK</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">LISTING</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MAIN</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MENU</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">META</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">NAV</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">OBJECT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">OL</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">P</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">PARAM</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">PRE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">SECTION</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">SOURCE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TH</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TR</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TRACK</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">WBR</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">XMP</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MI</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MO</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MN</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MS</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">MTEXT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="p">,</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">DESC</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">,</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XML</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">,</span><span class="p">[</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XMLNS</span><span class="p">]</span><span class="o">:</span><span class="k">new</span> <span class="nx">Set</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Go</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H1</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H2</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H3</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H4</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H5</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Uo</span><span class="p">.</span><span class="nx">H6</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Yo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">STYLE</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">XMP</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IFRAME</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">qo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">128</span><span class="p">,</span><span class="mi">8364</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">130</span><span class="p">,</span><span class="mi">8218</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">131</span><span class="p">,</span><span class="mi">402</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">132</span><span class="p">,</span><span class="mi">8222</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">133</span><span class="p">,</span><span class="mi">8230</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">134</span><span class="p">,</span><span class="mi">8224</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">135</span><span class="p">,</span><span class="mi">8225</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">136</span><span class="p">,</span><span class="mi">710</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">137</span><span class="p">,</span><span class="mi">8240</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">138</span><span class="p">,</span><span class="mi">352</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">139</span><span class="p">,</span><span class="mi">8249</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">140</span><span class="p">,</span><span class="mi">338</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">142</span><span class="p">,</span><span class="mi">381</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">145</span><span class="p">,</span><span class="mi">8216</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">146</span><span class="p">,</span><span class="mi">8217</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">147</span><span class="p">,</span><span class="mi">8220</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">148</span><span class="p">,</span><span class="mi">8221</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">149</span><span class="p">,</span><span class="mi">8226</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">150</span><span class="p">,</span><span class="mi">8211</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">151</span><span class="p">,</span><span class="mi">8212</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">152</span><span class="p">,</span><span class="mi">732</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">153</span><span class="p">,</span><span class="mi">8482</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">154</span><span class="p">,</span><span class="mi">353</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">155</span><span class="p">,</span><span class="mi">8250</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">156</span><span class="p">,</span><span class="mi">339</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">158</span><span class="p">,</span><span class="mi">382</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">159</span><span class="p">,</span><span class="mi">376</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ko</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DATA</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DATA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RCDATA</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RCDATA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="o">=</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RAWTEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="o">=</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">=</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;PLAINTEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TAG_OPEN</span><span class="o">=</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">END_TAG_OPEN</span><span class="o">=</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;END_TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TAG_NAME</span><span class="o">=</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TAG_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RCDATA_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RCDATA_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_OPEN</span><span class="o">=</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RCDATA_END_TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_NAME</span><span class="o">=</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RCDATA_END_TAG_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RAWTEXT_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RAWTEXT_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_OPEN</span><span class="o">=</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RAWTEXT_END_TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_NAME</span><span class="o">=</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;RAWTEXT_END_TAG_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_OPEN</span><span class="o">=</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_END_TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_NAME</span><span class="o">=</span><span class="mi">16</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_END_TAG_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START</span><span class="o">=</span><span class="mi">17</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPE_START&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START_DASH</span><span class="o">=</span><span class="mi">18</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPE_START_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="o">=</span><span class="mi">19</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH</span><span class="o">=</span><span class="mi">20</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH_DASH</span><span class="o">=</span><span class="mi">21</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED_DASH_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">22</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_OPEN</span><span class="o">=</span><span class="mi">23</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED_END_TAG_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_NAME</span><span class="o">=</span><span class="mi">24</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_ESCAPED_END_TAG_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_START</span><span class="o">=</span><span class="mi">25</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPE_START&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="o">=</span><span class="mi">26</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH</span><span class="o">=</span><span class="mi">27</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPED_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH</span><span class="o">=</span><span class="mi">28</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">29</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_END</span><span class="o">=</span><span class="mi">30</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SCRIPT_DATA_DOUBLE_ESCAPE_END&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="o">=</span><span class="mi">31</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_ATTRIBUTE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ATTRIBUTE_NAME</span><span class="o">=</span><span class="mi">32</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ATTRIBUTE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_NAME</span><span class="o">=</span><span class="mi">33</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_ATTRIBUTE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_VALUE</span><span class="o">=</span><span class="mi">34</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_ATTRIBUTE_VALUE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_DOUBLE_QUOTED</span><span class="o">=</span><span class="mi">35</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ATTRIBUTE_VALUE_DOUBLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_SINGLE_QUOTED</span><span class="o">=</span><span class="mi">36</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ATTRIBUTE_VALUE_SINGLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_UNQUOTED</span><span class="o">=</span><span class="mi">37</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;ATTRIBUTE_VALUE_UNQUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_VALUE_QUOTED</span><span class="o">=</span><span class="mi">38</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_ATTRIBUTE_VALUE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="o">=</span><span class="mi">39</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;SELF_CLOSING_START_TAG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="o">=</span><span class="mi">40</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BOGUS_COMMENT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">MARKUP_DECLARATION_OPEN</span><span class="o">=</span><span class="mi">41</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;MARKUP_DECLARATION_OPEN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="o">=</span><span class="mi">42</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_START&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_START_DASH</span><span class="o">=</span><span class="mi">43</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_START_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT</span><span class="o">=</span><span class="mi">44</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN</span><span class="o">=</span><span class="mi">45</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_LESS_THAN_SIGN&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG</span><span class="o">=</span><span class="mi">46</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_LESS_THAN_SIGN_BANG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH</span><span class="o">=</span><span class="mi">47</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_LESS_THAN_SIGN_BANG_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH</span><span class="o">=</span><span class="mi">48</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_END_DASH</span><span class="o">=</span><span class="mi">49</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_END_DASH&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="o">=</span><span class="mi">50</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_END&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">COMMENT_END_BANG</span><span class="o">=</span><span class="mi">51</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;COMMENT_END_BANG&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="o">=</span><span class="mi">52</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_NAME</span><span class="o">=</span><span class="mi">53</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_DOCTYPE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE_NAME</span><span class="o">=</span><span class="mi">54</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_NAME</span><span class="o">=</span><span class="mi">55</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_DOCTYPE_NAME&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_KEYWORD</span><span class="o">=</span><span class="mi">56</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_DOCTYPE_PUBLIC_KEYWORD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="o">=</span><span class="mi">57</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_DOCTYPE_PUBLIC_IDENTIFIER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED</span><span class="o">=</span><span class="mi">58</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED</span><span class="o">=</span><span class="mi">59</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="o">=</span><span class="mi">60</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_DOCTYPE_PUBLIC_IDENTIFIER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS</span><span class="o">=</span><span class="mi">61</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_KEYWORD</span><span class="o">=</span><span class="mi">62</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_DOCTYPE_SYSTEM_KEYWORD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="o">=</span><span class="mi">63</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_DOCTYPE_SYSTEM_IDENTIFIER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="o">=</span><span class="mi">64</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="o">=</span><span class="mi">65</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="o">=</span><span class="mi">66</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_DOCTYPE_SYSTEM_IDENTIFIER&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="o">=</span><span class="mi">67</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BOGUS_DOCTYPE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="o">=</span><span class="mi">68</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CDATA_SECTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA_SECTION_BRACKET</span><span class="o">=</span><span class="mi">69</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CDATA_SECTION_BRACKET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CDATA_SECTION_END</span><span class="o">=</span><span class="mi">70</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CDATA_SECTION_END&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="o">=</span><span class="mi">71</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;CHARACTER_REFERENCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NAMED_CHARACTER_REFERENCE</span><span class="o">=</span><span class="mi">72</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NAMED_CHARACTER_REFERENCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AMBIGUOUS_AMPERSAND</span><span class="o">=</span><span class="mi">73</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AMBIGUOUS_AMPERSAND&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE</span><span class="o">=</span><span class="mi">74</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NUMERIC_CHARACTER_REFERENCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE_START</span><span class="o">=</span><span class="mi">75</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HEXADEMICAL_CHARACTER_REFERENCE_START&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE</span><span class="o">=</span><span class="mi">76</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;HEXADEMICAL_CHARACTER_REFERENCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">DECIMAL_CHARACTER_REFERENCE</span><span class="o">=</span><span class="mi">77</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;DECIMAL_CHARACTER_REFERENCE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="o">=</span><span class="mi">78</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;NUMERIC_CHARACTER_REFERENCE_END&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Ko</span><span class="o">||</span><span class="p">(</span><span class="nx">Ko</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">jo</span><span class="o">=</span><span class="p">{</span><span class="nx">DATA</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="nx">RCDATA</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="nx">RAWTEXT</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">,</span><span class="nx">SCRIPT_DATA</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="nx">PLAINTEXT</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">,</span><span class="nx">CDATA_SECTION</span><span class="o">:</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">DIGIT_0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">DIGIT_9</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_A</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_Z</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_SMALL_A</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_SMALL_Z</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Xo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_A</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_F</span><span class="p">}</span><span class="kd">function</span> <span class="nx">zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">&gt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_SMALL_A</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_SMALL_F</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Jo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">+</span><span class="mi">32</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ec</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="p">}</span><span class="kr">class</span> <span class="nx">tc</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inLoop</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="o">=</span><span class="k">new</span> <span class="nx">mo</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">_err</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">)</span><span class="p">.</span><span class="nx">onParseError</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">getError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">?</span><span class="p">{</span><span class="nx">startLine</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">line</span><span class="p">,</span><span class="nx">startCol</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">col</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="nx">startOffset</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">offset</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="nx">endLine</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">_runParsingLoop</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">inLoop</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inLoop</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_callState</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">inLoop</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="nx">pause</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">resume</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Parser was already resumed&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">inLoop</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_runParsingLoop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">e</span><span class="o">||</span><span class="nx">e</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">write</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_runParsingLoop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paused</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">insertHtmlAtCurrentPos</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">insertHtmlAtCurrentPos</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_runParsingLoop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_unconsume</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">advance</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">_unconsume</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="o">-=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">retreat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_reconsumeInState</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_callState</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">_advanceBy</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">consumedAfterSnapshot</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">advance</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="o">!</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_advanceBy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">_createStartTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">START_TAG</span><span class="p">,</span><span class="nx">tagName</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">tagID</span><span class="o">:</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="p">,</span><span class="nx">selfClosing</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">ackSelfClosing</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">attrs</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_createEndTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">END_TAG</span><span class="p">,</span><span class="nx">tagName</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">tagID</span><span class="o">:</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="p">,</span><span class="nx">selfClosing</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">ackSelfClosing</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">attrs</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">forceQuirks</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">publicId</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">systemId</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">}</span><span class="p">}</span><span class="nx">_createCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">chars</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">}</span><span class="p">}</span><span class="nx">_createAttr</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">_leaveAttrName</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">_o</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">location</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">)</span><span class="p">{</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">attrs</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">)</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">duplicateAttribute</span><span class="p">)</span><span class="p">}</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">.</span><span class="nx">endLine</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">line</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">.</span><span class="nx">endCol</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">col</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">.</span><span class="nx">endOffset</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">offset</span><span class="p">)</span><span class="p">}</span><span class="nx">prepareToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCurrentCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endLine</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">line</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endCol</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">col</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endOffset</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">offset</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">prepareToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="o">=</span><span class="nx">Fo</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">To</span><span class="p">.</span><span class="nx">START_TAG</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithAttributes</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithTrailingSolidus</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">dropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">prepareToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">dropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">prepareToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">dropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">_emitCurrentCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">location</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endLine</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startLine</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endCol</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startCol</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">endOffset</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startOffset</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onCharacter</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">NULL_CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onNullCharacter</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onWhitespaceCharacter</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">endLine</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startLine</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">endCol</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startCol</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">endOffset</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">startOffset</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCurrentCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onEof</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">EOF</span><span class="p">,</span><span class="nx">location</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="nx">_appendCharToCurrentCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentCharacterToken</span><span class="p">.</span><span class="nx">chars</span><span class="o">+=</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCurrentCharacterToken</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">dropParsedChunk</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCharacterToken</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">To</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">:</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">?</span><span class="nx">To</span><span class="p">.</span><span class="nx">NULL_CHARACTER</span><span class="o">:</span><span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_appendCharToCurrentCharacterToken</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_emitChars</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_appendCharToCurrentCharacterToken</span><span class="p">(</span><span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_matchNamedCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">wo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span><span class="nx">s</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">Oo</span><span class="p">(</span><span class="nx">wo</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="p">(</span><span class="nx">s</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">wo</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="p">;</span><span class="kr">const</span> <span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">yo</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;&gt;</span><span class="mi">14</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!==</span><span class="nx">io</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_isCharacterReferenceInAttribute</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">peek</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">||</span><span class="nx">Xo</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="o">+=</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="p">[</span><span class="nx">wo</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">&amp;</span><span class="o">~</span><span class="nx">yo</span><span class="p">.</span><span class="nx">VALUE_LENGTH</span><span class="p">]</span><span class="o">:</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="p">[</span><span class="nx">wo</span><span class="p">[</span><span class="o">++</span><span class="nx">s</span><span class="p">]</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="nx">wo</span><span class="p">[</span><span class="o">++</span><span class="nx">s</span><span class="p">]</span><span class="p">,</span><span class="nx">wo</span><span class="p">[</span><span class="o">++</span><span class="nx">s</span><span class="p">]</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="o">!==</span><span class="nx">io</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_unconsume</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">endOfChunkHit</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingSemicolonAfterCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_unconsume</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="nx">_isCharacterReferenceInAttribute</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">===</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_DOUBLE_QUOTED</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">===</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_SINGLE_QUOTED</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">===</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_UNQUOTED</span><span class="p">}</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_isCharacterReferenceInAttribute</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_callState</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdata</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_statePlaintext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">END_TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">TAG_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdataLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdataEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtextLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtextEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtextEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapeStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapeStartDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_START</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapeStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapedDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapedDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapedLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_END</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapeEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_VALUE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeAttributeValue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_DOUBLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeValueDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_SINGLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeValueSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_UNQUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeValueUnquoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_VALUE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterAttributeValueQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateSelfClosingStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">MARKUP_DECLARATION_OPEN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateMarkupDeclarationOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_START_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentStartDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentLessThanSignBang</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentLessThanSignBangDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentLessThanSignBangDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_DASH</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentEndDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_BANG</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentEndBang</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_NAME</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_KEYWORD</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterDoctypePublicKeyword</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeDoctypePublicIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctypePublicIdentifierDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctypePublicIdentifierSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterDoctypePublicIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBetweenDoctypePublicAndSystemIdentifiers</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_KEYWORD</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterDoctypeSystemKeyword</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeDoctypeSystemIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctypeSystemIdentifierDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDoctypeSystemIdentifierSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterDoctypeSystemIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCdataSection</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION_BRACKET</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCdataSectionBracket</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION_END</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCdataSectionEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">NAMED_CHARACTER_REFERENCE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNamedCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">AMBIGUOUS_AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAmbiguousAmpersand</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNumericCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE_START</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateHexademicalCharacterReferenceStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateHexademicalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">DECIMAL_CHARACTER_REFERENCE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDecimalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNumericCharacterReferenceEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;Unknown state&#34;</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">TAG_OPEN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateRcdata</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateRawtext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_statePlaintext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_createStartTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EXCLAMATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">MARKUP_DECLARATION_OPEN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">END_TAG_OPEN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUESTION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedQuestionMarkInsteadOfTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofBeforeTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">invalidFirstCharacterOfTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_createEndTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingEndTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofBeforeTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">invalidFirstCharacterOfTagName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">Jo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateRcdataLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_OPEN</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdata</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateRcdataEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA_END_TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdata</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">handleSpecialEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_createEndTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">.</span><span class="nx">tagName</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">peek</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_advanceBy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_advanceBy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_advanceBy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastStartTagName</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateRcdataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSpecialEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRcdata</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateRawtextLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_OPEN</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateRawtextEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT_END_TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtextEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateRawtextEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSpecialEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateRawtext</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_OPEN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EXCLAMATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;!&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_END_TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSpecialEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEscapeStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPE_START_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEscapeStartDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptData</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataEscapedDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_DASH_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataEscapedDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&gt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataEscapedLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_OPEN</span><span class="o">:</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_START</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscapeStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEscapedEndTagOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Qo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED_END_TAG_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscapedEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataEscapedEndTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSpecialEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;/&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscapeStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">co</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">ec</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">peek</span><span class="p">(</span><span class="nx">co</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">co</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscapedDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscapedDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&lt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;&gt;&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInScriptHtmlCommentLikeText</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscapedLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPE_END</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateScriptDataDoubleEscapeEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">co</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">ec</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">preprocessor</span><span class="p">.</span><span class="nx">peek</span><span class="p">(</span><span class="nx">co</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">co</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_consume</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_ESCAPED</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SCRIPT_DATA_DOUBLE_ESCAPED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateScriptDataDoubleEscaped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateBeforeAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedEqualsSignBeforeAttributeName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createAttr</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_createAttr</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrName</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAfterAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrName</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_VALUE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedCharacterInAttributeName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">Jo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_VALUE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_createAttr</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBeforeAttributeValue</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingAttributeValue</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_UNQUOTED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateAttributeValueUnquoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAttributeValueDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_VALUE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_DOUBLE_QUOTED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAttributeValueSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_ATTRIBUTE_VALUE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_SINGLE_QUOTED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAttributeValueUnquoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">ATTRIBUTE_VALUE_UNQUOTED</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CHARACTER_REFERENCE</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EQUALS_SIGN</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GRAVE_ACCENT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedCharacterInUnquotedAttributeValue</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentAttr</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterAttributeValueQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SOLIDUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">SELF_CLOSING_START_TAG</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_leaveAttrValue</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceBetweenAttributes</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateSelfClosingStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentTagToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedSolidusInTag</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_ATTRIBUTE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeAttributeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBogusComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateMarkupDeclarationOpen</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">so</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="nx">so</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_START</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">oo</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentLocation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurrentLocation</span><span class="p">(</span><span class="nx">oo</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">ao</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">cdataInHtmlContent</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="nx">ao</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="s2">&#34;[CDATA[&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">incorrectlyOpenedComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createCommentToken</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateCommentStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_START_DASH</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptClosingOfEmptyComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCommentStartDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptClosingOfEmptyComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;-&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_DASH</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;&lt;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCommentLessThanSign</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EXCLAMATION_MARK</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;!&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LESS_THAN_SIGN</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;&lt;&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCommentLessThanSignBang</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateCommentLessThanSignBangDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_DASH</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentEndDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateCommentLessThanSignBangDashDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">!==</span><span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">nestedComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCommentEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateCommentEndDash</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;-&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCommentEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EXCLAMATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_BANG</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;-&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;--&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCommentEndBang</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">HYPHEN_MINUS</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;--!&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT_END_DASH</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">incorrectlyClosedComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInComment</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentComment</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">data</span><span class="o">+=</span><span class="s2">&#34;--!&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">COMMENT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceBeforeDoctypeName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_NAME</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBeforeDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBeforeDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">Jo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_NAME</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="s2">&#34;�&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctypeName</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_createDoctypeToken</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_NAME</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_NAME</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">Wo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nx">Jo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterDoctypeName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">lo</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_KEYWORD</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_consumeSequenceIfMatch</span><span class="p">(</span><span class="nx">ho</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_KEYWORD</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">invalidCharacterSequenceAfterDoctypeName</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterDoctypePublicKeyword</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypePublicKeyword</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypePublicKeyword</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBeforeDoctypePublicIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctypePublicIdentifierDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctypePublicIdentifierSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_PUBLIC_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptDoctypePublicIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">publicId</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterDoctypePublicIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBetweenDoctypePublicAndSystemIdentifiers</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterDoctypeSystemKeyword</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BEFORE_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypeSystemKeyword</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingWhitespaceAfterDoctypeSystemKeyword</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBeforeDoctypeSystemIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingQuoteBeforeDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctypeSystemIdentifierDoubleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">QUOTATION_MARK</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateDoctypeSystemIdentifierSingleQuoted</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">APOSTROPHE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AFTER_DOCTYPE_SYSTEM_IDENTIFIER</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">+=</span><span class="s2">&#34;�&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abruptDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">systemId</span><span class="o">+=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateAfterDoctypeSystemIdentifier</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">SPACE</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">TABULATION</span><span class="o">:</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">FORM_FEED</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInDoctype</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedCharacterAfterDoctypeSystemIdentifier</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">BOGUS_DOCTYPE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateBogusDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unexpectedNullCharacter</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">emitCurrentDoctype</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCdataSection</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">RIGHT_SQUARE_BRACKET</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION_BRACKET</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInCdata</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitEOFToken</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitCodePoint</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCdataSectionBracket</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">RIGHT_SQUARE_BRACKET</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION_END</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;]&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCdataSection</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateCdataSectionEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">GREATER_THAN_SIGN</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">io</span><span class="p">.</span><span class="nx">RIGHT_SQUARE_BRACKET</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;]&#34;</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_emitChars</span><span class="p">(</span><span class="s2">&#34;]]&#34;</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">CDATA_SECTION</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateCdataSection</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_stateCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">NUMBER_SIGN</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE</span><span class="o">:</span><span class="nx">Xo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NAMED_CHARACTER_REFERENCE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNamedCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_reconsumeInState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateNamedCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_matchNamedCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureHibernation</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">AMBIGUOUS_AMPERSAND</span><span class="p">}</span><span class="nx">_stateAmbiguousAmpersand</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Xo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">unknownNamedCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_reconsumeInState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateNumericCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_SMALL_X</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LATIN_CAPITAL_X</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE_START</span><span class="o">:</span><span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">DECIMAL_CHARACTER_REFERENCE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateDecimalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">absenceOfDigitsInNumericCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">NUMBER_SIGN</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_reconsumeInState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateHexademicalCharacterReferenceStart</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">$o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="nx">zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">absenceOfDigitsInNumericCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">AMPERSAND</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">NUMBER_SIGN</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_unconsume</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">HEXADEMICAL_CHARACTER_REFERENCE</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateHexademicalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateHexademicalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">$o</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="mi">16</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="mi">55</span><span class="o">:</span><span class="nx">zo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="mi">16</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="mi">87</span><span class="o">:</span><span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="mi">16</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="mi">48</span><span class="o">:</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingSemicolonAfterCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNumericCharacterReferenceEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateDecimalCharacterReference</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">Vo</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="mi">48</span><span class="o">:</span><span class="nx">e</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingSemicolonAfterCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">Ko</span><span class="p">.</span><span class="nx">NUMERIC_CHARACTER_REFERENCE_END</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_stateNumericCharacterReferenceEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_stateNumericCharacterReferenceEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">NULL</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">nullCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="nx">io</span><span class="p">.</span><span class="nx">REPLACEMENT_CHARACTER</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">&gt;</span><span class="mi">1114111</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">characterReferenceOutsideUnicodeRange</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="nx">io</span><span class="p">.</span><span class="nx">REPLACEMENT_CHARACTER</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">uo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">surrogateCharacterReference</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="nx">io</span><span class="p">.</span><span class="nx">REPLACEMENT_CHARACTER</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">fo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">noncharacterCharacterReference</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">po</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">CARRIAGE_RETURN</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">controlCharacterReference</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="nx">qo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="p">)</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="o">=</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">_flushCodePointConsumedAsCharacterReference</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charRefCode</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_reconsumeInState</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">returnState</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">nc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RB</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RTC</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">rc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="p">...</span><span class="nx">nc</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">ic</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">APPLET</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OBJECT</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MI</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MN</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MO</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MS</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MTEXT</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DESC</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">sc</span><span class="o">=</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H1</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H2</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H3</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H4</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H5</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H6</span><span class="p">]</span><span class="p">,</span><span class="nx">ac</span><span class="o">=</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="nx">oc</span><span class="o">=</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="nx">cc</span><span class="o">=</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">]</span><span class="p">,</span><span class="nx">lc</span><span class="o">=</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">]</span><span class="p">;</span><span class="kr">class</span> <span class="nx">hc</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">=</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">get</span> <span class="nx">currentTmplContentOrNode</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_isInTemplate</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTemplateContent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">}</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">)</span><span class="p">}</span><span class="nx">_isInTemplate</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">}</span><span class="nx">_updateCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">]</span><span class="p">}</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_isInTemplate</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">++</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onItemPush</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_isInTemplate</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">--</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">--</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onItemPop</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">}</span><span class="nx">replace</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">++</span><span class="p">,</span><span class="nx">r</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onItemPush</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">,</span><span class="nx">r</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">)</span><span class="p">}</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="o">!==</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_isInTemplate</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">-=</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">--</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onItemPop</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">popUntilElementPopped</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">popUntilPopped</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOfTagNames</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">n</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="nx">popUntilNumberedHeaderPopped</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">popUntilPopped</span><span class="p">(</span><span class="nx">sc</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">popUntilTableCellPopped</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">popUntilPopped</span><span class="p">(</span><span class="nx">lc</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">popAllUpToHtmlElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">_indexOfTagNames</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="o">===</span><span class="nx">t</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nx">clearBackTo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOfTagNames</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">clearBackTo</span><span class="p">(</span><span class="nx">cc</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">clearBackTo</span><span class="p">(</span><span class="nx">oc</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">clearBackTo</span><span class="p">(</span><span class="nx">ac</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">remove</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">--</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">onItemPop</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">tryPeekProperlyNestedBodyElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;=</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">contains</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nx">getCommonAncestor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">isRootHtmlElementCurrent</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">}</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">ic</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">===</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasNumberedHeaderInScope</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Go</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">ic</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasInListItemScope</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UL</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OL</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">||</span><span class="nx">ic</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">===</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">||</span><span class="nx">ic</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">===</span><span class="nx">r</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasTableBodyContextInTableScope</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">hasInSelectScope</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">nc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">generateImpliedEndTagsThoroughly</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">rc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">rc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">var</span> <span class="nx">uc</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">Marker</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;Marker&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;Element&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">uc</span><span class="o">=</span><span class="nx">uc</span><span class="o">||</span><span class="p">(</span><span class="nx">uc</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">pc</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Marker</span><span class="p">}</span><span class="p">;</span><span class="kr">class</span> <span class="nx">fc</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bookmark</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">_getNoahArkConditionCandidates</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Marker</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">element</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="nx">s</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getAttrList</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="p">{</span><span class="nx">idx</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">attrs</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="nx">_ensureNoahArkCondition</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getAttrList</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getNoahArkConditionCandidates</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">r</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="o">&gt;=</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">idx</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">insertMarker</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span><span class="p">}</span><span class="nx">pushElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_ensureNoahArkCondition</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Element</span><span class="p">,</span><span class="nx">element</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">token</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="nx">insertElementAfterBookmark</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">bookmark</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Element</span><span class="p">,</span><span class="nx">element</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">token</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="nx">getElementEntryInScopeWithTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Marker</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Element</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="nx">getElementEntry</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Element</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="s2">&#34;#text&#34;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">parentNode</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Ec</span><span class="o">=</span><span class="p">{</span><span class="nx">createDocument</span><span class="o">:</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">(</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="s2">&#34;#document&#34;</span><span class="p">,</span><span class="nx">mode</span><span class="o">:</span><span class="nx">Ro</span><span class="p">.</span><span class="nx">NO_QUIRKS</span><span class="p">,</span><span class="nx">childNodes</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">createDocumentFragment</span><span class="o">:</span><span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">(</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="s2">&#34;#document-fragment&#34;</span><span class="p">,</span><span class="nx">childNodes</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">createElement</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">(</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">tagName</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">attrs</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">namespaceURI</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">childNodes</span><span class="o">:</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="nx">parentNode</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">createCommentNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">(</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="s2">&#34;#comment&#34;</span><span class="p">,</span><span class="nx">data</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">parentNode</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="nx">setTemplateContent</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">content</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">getTemplateContent</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span><span class="nx">setDocumentType</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;#documentType&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">publicId</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">systemId</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="nx">nodeName</span><span class="o">:</span><span class="s2">&#34;#documentType&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">publicId</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">systemId</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">parentNode</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">;</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">setDocumentMode</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">mode</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">getDocumentMode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">mode</span><span class="p">,</span><span class="nx">detachNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">insertText</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">isTextNode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">dc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">insertTextBefore</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">isTextNode</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="nx">t</span><span class="o">:</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">dc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">adoptAttributes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">getFirstChild</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">getChildNodes</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">,</span><span class="nx">getParentNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">,</span><span class="nx">getAttrList</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">,</span><span class="nx">getTagName</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">getNamespaceURI</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">namespaceURI</span><span class="p">,</span><span class="nx">getTextNodeContent</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">getCommentNodeContent</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">getDocumentTypeNodeName</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">getDocumentTypeNodePublicId</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">publicId</span><span class="p">,</span><span class="nx">getDocumentTypeNodeSystemId</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">systemId</span><span class="p">,</span><span class="nx">isTextNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;#text&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">,</span><span class="nx">isCommentNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;#comment&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">,</span><span class="nx">isDocumentTypeNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="s2">&#34;#documentType&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">,</span><span class="nx">isElementNode</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&#34;tagName&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="p">,</span><span class="nx">getNodeSourceCodeLocation</span><span class="o">:</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="p">,</span><span class="nx">updateNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceCodeLocation</span><span class="p">,</span><span class="p">...</span><span class="nx">t</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">,</span><span class="nx">mc</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;+//silmaril//dtd html pro v0r11 19970101//&#34;</span><span class="p">,</span><span class="s2">&#34;-//as//dtd html 3.0 aswedit + extensions//&#34;</span><span class="p">,</span><span class="s2">&#34;-//advasoft ltd//dtd html 3.0 aswedit + extensions//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0 level 1//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0 level 2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0 strict level 1//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0 strict level 2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0 strict//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 2.1e//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 3.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 3.2 final//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 3.2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html 3//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html level 0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html level 1//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html level 2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html level 3//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html strict level 0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html strict level 1//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html strict level 2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html strict level 3//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html strict//&#34;</span><span class="p">,</span><span class="s2">&#34;-//ietf//dtd html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//metrius//dtd metrius presentational//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 2.0 html strict//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 2.0 html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 2.0 tables//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 3.0 html strict//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 3.0 html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//microsoft//dtd internet explorer 3.0 tables//&#34;</span><span class="p">,</span><span class="s2">&#34;-//netscape comm. corp.//dtd html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//netscape comm. corp.//dtd strict html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//o&#39;reilly and associates//dtd html 2.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//o&#39;reilly and associates//dtd html extended 1.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//o&#39;reilly and associates//dtd html extended relaxed 1.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//sq//dtd html 2.0 hotmetal + extensions//&#34;</span><span class="p">,</span><span class="s2">&#34;-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//spyglass//dtd html 2.0 extended//&#34;</span><span class="p">,</span><span class="s2">&#34;-//sun microsystems corp.//dtd hotjava html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//sun microsystems corp.//dtd hotjava strict html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 3 1995-03-24//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 3.2 draft//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 3.2 final//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 3.2//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 3.2s draft//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.0 frameset//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.0 transitional//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html experimental 19960712//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html experimental 970421//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd w3 html//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3o//dtd w3 html 3.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//webtechs//dtd mozilla html 2.0//&#34;</span><span class="p">,</span><span class="s2">&#34;-//webtechs//dtd mozilla html//&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">Tc</span><span class="o">=</span><span class="p">[</span><span class="p">...</span><span class="nx">mc</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.01 frameset//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.01 transitional//&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">_c</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;-//w3o//dtd w3 html strict 3.0//en//&#34;</span><span class="p">,</span><span class="s2">&#34;-/w3c/dtd html 4.0 transitional/en&#34;</span><span class="p">,</span><span class="s2">&#34;html&#34;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">Ac</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;-//w3c//dtd xhtml 1.0 frameset//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd xhtml 1.0 transitional//&#34;</span><span class="p">]</span><span class="p">,</span><span class="nx">gc</span><span class="o">=</span><span class="p">[</span><span class="p">...</span><span class="nx">Ac</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.01 frameset//&#34;</span><span class="p">,</span><span class="s2">&#34;-//w3c//dtd html 4.01 transitional//&#34;</span><span class="p">]</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Nc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="nx">t</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">Cc</span><span class="o">=</span><span class="s2">&#34;text/html&#34;</span><span class="p">,</span><span class="nx">Ic</span><span class="o">=</span><span class="s2">&#34;application/xhtml+xml&#34;</span><span class="p">,</span><span class="nx">Sc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;attributeName&#34;</span><span class="p">,</span><span class="s2">&#34;attributeType&#34;</span><span class="p">,</span><span class="s2">&#34;baseFrequency&#34;</span><span class="p">,</span><span class="s2">&#34;baseProfile&#34;</span><span class="p">,</span><span class="s2">&#34;calcMode&#34;</span><span class="p">,</span><span class="s2">&#34;clipPathUnits&#34;</span><span class="p">,</span><span class="s2">&#34;diffuseConstant&#34;</span><span class="p">,</span><span class="s2">&#34;edgeMode&#34;</span><span class="p">,</span><span class="s2">&#34;filterUnits&#34;</span><span class="p">,</span><span class="s2">&#34;glyphRef&#34;</span><span class="p">,</span><span class="s2">&#34;gradientTransform&#34;</span><span class="p">,</span><span class="s2">&#34;gradientUnits&#34;</span><span class="p">,</span><span class="s2">&#34;kernelMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;kernelUnitLength&#34;</span><span class="p">,</span><span class="s2">&#34;keyPoints&#34;</span><span class="p">,</span><span class="s2">&#34;keySplines&#34;</span><span class="p">,</span><span class="s2">&#34;keyTimes&#34;</span><span class="p">,</span><span class="s2">&#34;lengthAdjust&#34;</span><span class="p">,</span><span class="s2">&#34;limitingConeAngle&#34;</span><span class="p">,</span><span class="s2">&#34;markerHeight&#34;</span><span class="p">,</span><span class="s2">&#34;markerUnits&#34;</span><span class="p">,</span><span class="s2">&#34;markerWidth&#34;</span><span class="p">,</span><span class="s2">&#34;maskContentUnits&#34;</span><span class="p">,</span><span class="s2">&#34;maskUnits&#34;</span><span class="p">,</span><span class="s2">&#34;numOctaves&#34;</span><span class="p">,</span><span class="s2">&#34;pathLength&#34;</span><span class="p">,</span><span class="s2">&#34;patternContentUnits&#34;</span><span class="p">,</span><span class="s2">&#34;patternTransform&#34;</span><span class="p">,</span><span class="s2">&#34;patternUnits&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtX&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtY&#34;</span><span class="p">,</span><span class="s2">&#34;pointsAtZ&#34;</span><span class="p">,</span><span class="s2">&#34;preserveAlpha&#34;</span><span class="p">,</span><span class="s2">&#34;preserveAspectRatio&#34;</span><span class="p">,</span><span class="s2">&#34;primitiveUnits&#34;</span><span class="p">,</span><span class="s2">&#34;refX&#34;</span><span class="p">,</span><span class="s2">&#34;refY&#34;</span><span class="p">,</span><span class="s2">&#34;repeatCount&#34;</span><span class="p">,</span><span class="s2">&#34;repeatDur&#34;</span><span class="p">,</span><span class="s2">&#34;requiredExtensions&#34;</span><span class="p">,</span><span class="s2">&#34;requiredFeatures&#34;</span><span class="p">,</span><span class="s2">&#34;specularConstant&#34;</span><span class="p">,</span><span class="s2">&#34;specularExponent&#34;</span><span class="p">,</span><span class="s2">&#34;spreadMethod&#34;</span><span class="p">,</span><span class="s2">&#34;startOffset&#34;</span><span class="p">,</span><span class="s2">&#34;stdDeviation&#34;</span><span class="p">,</span><span class="s2">&#34;stitchTiles&#34;</span><span class="p">,</span><span class="s2">&#34;surfaceScale&#34;</span><span class="p">,</span><span class="s2">&#34;systemLanguage&#34;</span><span class="p">,</span><span class="s2">&#34;tableValues&#34;</span><span class="p">,</span><span class="s2">&#34;targetX&#34;</span><span class="p">,</span><span class="s2">&#34;targetY&#34;</span><span class="p">,</span><span class="s2">&#34;textLength&#34;</span><span class="p">,</span><span class="s2">&#34;viewBox&#34;</span><span class="p">,</span><span class="s2">&#34;viewTarget&#34;</span><span class="p">,</span><span class="s2">&#34;xChannelSelector&#34;</span><span class="p">,</span><span class="s2">&#34;yChannelSelector&#34;</span><span class="p">,</span><span class="s2">&#34;zoomAndPan&#34;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">bc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="s2">&#34;xlink:actuate&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;actuate&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:arcrole&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;arcrole&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:href&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;href&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:role&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;role&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:show&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;show&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:title&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xlink:type&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;type&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XLINK</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xml:base&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xml&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;base&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XML</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xml:lang&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xml&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;lang&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XML</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xml:space&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xml&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;space&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XML</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xmlns&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;xmlns&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XMLNS</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="s2">&#34;xmlns:xlink&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&#34;xmlns&#34;</span><span class="p">,</span><span class="nx">name</span><span class="o">:</span><span class="s2">&#34;xlink&#34;</span><span class="p">,</span><span class="nx">namespace</span><span class="o">:</span><span class="nx">vo</span><span class="p">.</span><span class="nx">XMLNS</span><span class="p">}</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">Oc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="s2">&#34;altGlyph&#34;</span><span class="p">,</span><span class="s2">&#34;altGlyphDef&#34;</span><span class="p">,</span><span class="s2">&#34;altGlyphItem&#34;</span><span class="p">,</span><span class="s2">&#34;animateColor&#34;</span><span class="p">,</span><span class="s2">&#34;animateMotion&#34;</span><span class="p">,</span><span class="s2">&#34;animateTransform&#34;</span><span class="p">,</span><span class="s2">&#34;clipPath&#34;</span><span class="p">,</span><span class="s2">&#34;feBlend&#34;</span><span class="p">,</span><span class="s2">&#34;feColorMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;feComponentTransfer&#34;</span><span class="p">,</span><span class="s2">&#34;feComposite&#34;</span><span class="p">,</span><span class="s2">&#34;feConvolveMatrix&#34;</span><span class="p">,</span><span class="s2">&#34;feDiffuseLighting&#34;</span><span class="p">,</span><span class="s2">&#34;feDisplacementMap&#34;</span><span class="p">,</span><span class="s2">&#34;feDistantLight&#34;</span><span class="p">,</span><span class="s2">&#34;feFlood&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncA&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncB&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncG&#34;</span><span class="p">,</span><span class="s2">&#34;feFuncR&#34;</span><span class="p">,</span><span class="s2">&#34;feGaussianBlur&#34;</span><span class="p">,</span><span class="s2">&#34;feImage&#34;</span><span class="p">,</span><span class="s2">&#34;feMerge&#34;</span><span class="p">,</span><span class="s2">&#34;feMergeNode&#34;</span><span class="p">,</span><span class="s2">&#34;feMorphology&#34;</span><span class="p">,</span><span class="s2">&#34;feOffset&#34;</span><span class="p">,</span><span class="s2">&#34;fePointLight&#34;</span><span class="p">,</span><span class="s2">&#34;feSpecularLighting&#34;</span><span class="p">,</span><span class="s2">&#34;feSpotLight&#34;</span><span class="p">,</span><span class="s2">&#34;feTile&#34;</span><span class="p">,</span><span class="s2">&#34;feTurbulence&#34;</span><span class="p">,</span><span class="s2">&#34;foreignObject&#34;</span><span class="p">,</span><span class="s2">&#34;glyphRef&#34;</span><span class="p">,</span><span class="s2">&#34;linearGradient&#34;</span><span class="p">,</span><span class="s2">&#34;radialGradient&#34;</span><span class="p">,</span><span class="s2">&#34;textPath&#34;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">yc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">B</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BIG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CENTER</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CODE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DIV</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">EM</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">EMBED</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H1</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H2</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H3</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H4</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H5</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">H6</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">I</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LISTING</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MENU</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOBR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">PRE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RUBY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">S</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SMALL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SPAN</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">STRONG</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">STRIKE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SUB</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">U</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">VAR</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Lc</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;definitionurl&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&#34;definitionURL&#34;</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">kc</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Sc</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">vc</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">prefix</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">prefix</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">.</span><span class="nx">namespace</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Dc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">Do</span><span class="p">.</span><span class="nx">ENCODING</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">Cc</span><span class="o">||</span><span class="nx">t</span><span class="o">===</span><span class="nx">Ic</span><span class="p">}</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FOREIGN_OBJECT</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DESC</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MI</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MO</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MN</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MS</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MTEXT</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Rc</span><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">=</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;INITIAL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_HTML&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">=</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;BEFORE_HEAD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">=</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_HEAD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">=</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_HEAD_NO_SCRIPT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">=</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_HEAD&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">=</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_BODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">=</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;TEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">=</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_TABLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">=</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_TABLE_TEXT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">=</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_CAPTION&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">=</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_COLUMN_GROUP&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">=</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_TABLE_BODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">=</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_ROW&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">=</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_CELL&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">=</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_SELECT&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">=</span><span class="mi">16</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_SELECT_IN_TABLE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">=</span><span class="mi">17</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_TEMPLATE&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">=</span><span class="mi">18</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_BODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">=</span><span class="mi">19</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;IN_FRAMESET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">=</span><span class="mi">20</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_FRAMESET&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">=</span><span class="mi">21</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_AFTER_BODY&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="o">=</span><span class="mi">22</span><span class="p">]</span><span class="o">=</span><span class="s2">&#34;AFTER_AFTER_FRAMESET&#34;</span><span class="p">}</span><span class="p">(</span><span class="nx">Rc</span><span class="o">||</span><span class="p">(</span><span class="nx">Rc</span><span class="o">=</span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">Mc</span><span class="o">=</span><span class="p">{</span><span class="nx">startLine</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">startCol</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">startOffset</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">endLine</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="p">,</span><span class="nx">Pc</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">xc</span><span class="o">=</span><span class="p">{</span><span class="nx">scriptingEnabled</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">sourceCodeLocationInfo</span><span class="o">:</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">treeAdapter</span><span class="o">:</span><span class="nx">Ec</span><span class="p">,</span><span class="nx">onParseError</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">;</span><span class="kr">class</span> <span class="nx">wc</span><span class="p">{</span><span class="nx">constructor</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scriptHandler</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stopped</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">headElement</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">formElement</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNotInHTML</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="o">=</span><span class="p">[</span><span class="p">]</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">hasNonWhitespacePendingCharacterToken</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">fosterParentingEnabled</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">xc</span><span class="p">,</span><span class="p">...</span><span class="nx">e</span><span class="p">}</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onParseError</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">onParseError</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onParseError</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createDocument</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="o">=</span><span class="k">new</span> <span class="nx">tc</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="o">=</span><span class="k">new</span> <span class="nx">fc</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="o">=</span><span class="nx">n</span><span class="o">?</span><span class="nx">Fo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_setContextModes</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="o">=</span><span class="k">new</span> <span class="nx">hc</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">,</span><span class="k">this</span><span class="p">)</span><span class="p">}</span><span class="kr">static</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="k">this</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nb">document</span><span class="p">}</span><span class="kr">static</span> <span class="nx">getFragmentParser</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="p">...</span><span class="nx">xc</span><span class="p">,</span><span class="p">...</span><span class="nx">t</span><span class="p">}</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;documentmock&#34;</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="k">this</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_initTokenizerForFragmentParsing</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_insertFakeRootElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">_findFormInFragmentContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="p">}</span><span class="nx">getFragment</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getFirstChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_adoptNodes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">}</span><span class="nx">_err</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">onParseError</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">Mc</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="nx">code</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">startLine</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">startLine</span><span class="p">,</span><span class="nx">startCol</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">startCol</span><span class="p">,</span><span class="nx">startOffset</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">startOffset</span><span class="p">,</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">n</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">startLine</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">endLine</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">startCol</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">endCol</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">n</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">startOffset</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">endOffset</span><span class="p">}</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onParseError</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="nx">onItemPush</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">)</span><span class="p">.</span><span class="nx">onItemPush</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_setContextModes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">onItemPop</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="p">)</span><span class="p">,</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">)</span><span class="p">.</span><span class="nx">onItemPop</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">||</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">;</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="p">{</span><span class="nx">current</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">currentTagId</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_setContextModes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_setContextModes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNotInHTML</span><span class="o">=</span><span class="o">!</span><span class="nx">n</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="o">=</span><span class="o">!</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_isIntegrationPoint</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="p">}</span><span class="nx">switchToPlaintextParsing</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">}</span><span class="nx">_getAdjustedCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">}</span><span class="nx">_findFormInFragmentContext</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">e</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">===</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FORM</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">formElement</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_initTokenizerForFragmentParsing</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">XMP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">IFRAME</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">}</span><span class="p">}</span><span class="nx">_setDocumentType</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">publicId</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">systemId</span><span class="o">||</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setDocumentType</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getChildNodes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nb">document</span><span class="p">)</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">isDocumentTypeNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_attachElementToTree</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">{</span><span class="p">...</span><span class="nx">t</span><span class="p">,</span><span class="nx">startTag</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_shouldFosterParentOnInsertion</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_fosterParentElement</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTmplContentOrNode</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_attachElementToTree</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">}</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_attachElementToTree</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">}</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_attachElementToTree</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">_insertTemplate</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setTemplateContent</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_attachElementToTree</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">}</span><span class="nx">_insertFakeRootElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="nx">_appendCommentNode</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createCommentNode</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">}</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_shouldFosterParentOnInsertion</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="p">(</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">beforeElement</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_findFosterParentingLocation</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">insertTextBefore</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">insertText</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTmplContentOrNode</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">insertText</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getChildNodes</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span><span class="p">{</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">updateNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="p">{</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">r</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">}</span><span class="nx">_adoptNodes</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getFirstChild</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getFirstChild</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">detachNode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">location</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">To</span><span class="p">.</span><span class="nx">END_TAG</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="o">?</span><span class="p">{</span><span class="nx">endTag</span><span class="o">:</span><span class="p">{</span><span class="p">...</span><span class="nx">n</span><span class="p">}</span><span class="p">,</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">endLine</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">endCol</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">endOffset</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">endLine</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">startLine</span><span class="p">,</span><span class="nx">endCol</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">startCol</span><span class="p">,</span><span class="nx">endOffset</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">startOffset</span><span class="p">}</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">updateNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">shouldProcessStartTagTokenInForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNotInHTML</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">let</span> <span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="p">{</span><span class="nx">current</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">currentTagId</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SVG</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">!==</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">ANNOTATION_XML</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">!==</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MGLYPH</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">MALIGNMARK</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_isIntegrationPoint</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">NULL_CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onNullCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">COMMENT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">DOCTYPE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">START_TAG</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">END_TAG</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onEof</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">onWhitespaceCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">_isIntegrationPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Dc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getAttrList</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">entries</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="p">(</span><span class="nx">e</span><span class="p">=&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">uc</span><span class="p">.</span><span class="nx">Marker</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">entries</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">token</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">element</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="nx">_closeTableCell</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTableCellPopped</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">}</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="p">}</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentContextID</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">_resetInsertionModeForSelect</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">headElement</span><span class="o">?</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="p">)</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">}</span><span class="nx">_resetInsertionModeForSelect</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="p">)</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="p">}</span><span class="nx">_isElementCausesFosterParenting</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Pc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_shouldFosterParentOnInsertion</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">fosterParentingEnabled</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_isElementCausesFosterParenting</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="p">}</span><span class="nx">_findFosterParentingLocation</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="k">return</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTemplateContent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">beforeElement</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getParentNode</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">?</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">beforeElement</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">beforeElement</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="nx">parent</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">beforeElement</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="p">}</span><span class="nx">_fosterParentElement</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_findFosterParentingLocation</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">beforeElement</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">beforeElement</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parent</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_isSpecialElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">Ho</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="nx">onCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="p">)</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="nx">Vc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="nx">Wc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="nx">Qc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="nx">zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="nx">Jc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="nx">Zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="nx">nl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="nx">ul</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">ml</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="nx">gl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="nx">kl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="nx">vl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onNullCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="p">)</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">chars</span><span class="o">=</span><span class="s2">&#34;�&#34;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="nx">Vc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="nx">Wc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="nx">Qc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="nx">zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="nx">Jc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="nx">Zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="nx">ul</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="nx">gl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="nx">kl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="nx">vl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onComment</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNotInHTML</span><span class="p">)</span><span class="nx">Kc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">:</span><span class="nx">Kc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">Tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendCommentNode</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendCommentNode</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nb">document</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onDoctype</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setDocumentType</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">forceQuirks</span><span class="o">?</span><span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&#34;html&#34;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="p">;</span><span class="kr">const</span><span class="p">{</span><span class="nx">systemId</span><span class="o">:</span><span class="nx">t</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="s2">&#34;http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="p">;</span><span class="kd">let</span><span class="p">{</span><span class="nx">publicId</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">_c</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="p">;</span><span class="kd">let</span> <span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">Tc</span><span class="o">:</span><span class="nx">mc</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Nc</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="nx">Ac</span><span class="o">:</span><span class="nx">gc</span><span class="p">,</span><span class="nx">Nc</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">LIMITED_QUIRKS</span><span class="p">}</span><span class="k">return</span> <span class="nx">Ro</span><span class="p">.</span><span class="nx">NO_QUIRKS</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">return</span><span class="s2">&#34;html&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">publicId</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">systemId</span><span class="o">||</span><span class="s2">&#34;about:legacy-compat&#34;</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">systemId</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">nonConformingDoctype</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setDocumentMode</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">misplacedDoctype</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">Tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">nonVoidHtmlElementStartTagWithTrailingSolidus</span><span class="p">)</span><span class="p">}</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">shouldProcessStartTagTokenInForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FONT</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="p">(</span><span class="p">(</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="p">)</span><span class="p">=&gt;</span><span class="nx">e</span><span class="o">===</span><span class="nx">Do</span><span class="p">.</span><span class="nx">COLOR</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Do</span><span class="p">.</span><span class="nx">SIZE</span><span class="o">||</span><span class="nx">e</span><span class="o">===</span><span class="nx">Do</span><span class="p">.</span><span class="nx">FACE</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="nx">yc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="nx">Dl</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_startTagOutsideForeignContent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">_getAdjustedCurrentElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="o">?</span><span class="nx">Lc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">Oc</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="p">;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagID</span><span class="o">=</span><span class="nx">Fo</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">kc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">vc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_startTagOutsideForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_startTagOutsideForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="nx">Vc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="p">)</span><span class="o">:</span><span class="nx">Wc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">headElement</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">Qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">nestedNoscriptInHead</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">Jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">abandonedHeadElementChild</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">headElement</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">)</span><span class="p">,</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">headElement</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">misplacedStartTagForHeadElement</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">Zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="nx">pl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">Tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">_l</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="nx">Al</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="nx">Nl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="nx">Il</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">_l</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closeTableCell</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Il</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="nx">bl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">bl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="p">,</span><span class="nx">Al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">Nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">,</span><span class="nx">Il</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">?</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">kl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAME</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">?</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">vl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onEndTag</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentToken</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentNotInHTML</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="p">)</span><span class="k">return</span> <span class="nx">Dl</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">,</span><span class="k">void</span> <span class="nx">e</span><span class="p">.</span><span class="nx">_endTagOutsideForeignContent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_endTagOutsideForeignContent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_endTagOutsideForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="nx">_endTagOutsideForeignContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="nx">Vc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">||</span><span class="nx">Wc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">?</span><span class="nx">Qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">:</span><span class="nx">Jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">:</span><span class="nx">Zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="nx">ll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">scriptHandler</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="nx">fl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">Tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">&amp;&amp;</span><span class="nx">fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">gl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="nx">Cl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="nx">Sl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closeTableCell</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Sl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="nx">Ol</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">onEndTag</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">Ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="nx">Ll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">isRootHtmlElementCurrent</span><span class="p">(</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="nx">vl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onEof</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">INITIAL</span><span class="o">:</span><span class="nx">Vc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="o">:</span><span class="nx">Wc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="o">:</span><span class="nx">Qc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="nx">zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="nx">Jc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="nx">Zc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="nx">hl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">eofInElementThatCanContainOnlyText</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">onEof</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">Tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="nx">yl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="o">:</span><span class="nx">jc</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">onWhitespaceCharacter</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">===</span><span class="nx">io</span><span class="p">.</span><span class="nx">LINE_FEED</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">chars</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">inForeignNode</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_FRAMESET</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_FRAMESET</span><span class="o">:</span><span class="nx">tl</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">:</span><span class="nx">ul</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="o">:</span><span class="nx">El</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Bc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">getElementEntryInScopeWithTagName</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Fc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">r</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_isSpecialElement</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">r</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Uc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">getCommonAncestor</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">n</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">)</span><span class="p">{</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">getCommonAncestor</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">getElementEntry</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="o">&gt;=</span><span class="mi">3</span><span class="p">;</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="nx">o</span><span class="o">?</span><span class="p">(</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">Hc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">===</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">bookmark</span><span class="o">=</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">detachNode</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">r</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Hc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">element</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">r</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Gc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">Fo</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_isElementCausesFosterParenting</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">_fosterParentElement</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTemplateContent</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Yc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">,</span><span class="p">{</span><span class="nx">token</span><span class="o">:</span><span class="nx">i</span><span class="p">}</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_adoptNodes</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">insertElementAfterBookmark</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">Bc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">Fc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">r</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">bookmark</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">Uc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">getCommonAncestor</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">detachNode</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">Gc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="p">,</span><span class="nx">Yc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Kc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendCommentNode</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTmplContentOrNode</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">stopped</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">2</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">r</span><span class="o">&gt;=</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="o">--</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">r</span><span class="p">.</span><span class="nx">endTag</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">r</span><span class="p">.</span><span class="nx">endTag</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Vc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">missingDoctype</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">setDocumentMode</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HTML</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Wc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeRootElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">BEFORE_HEAD</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">headElement</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">scriptingEnabled</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD_NO_SCRIPT</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOFRAMES</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">SCRIPT_DATA</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertTemplate</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">insertMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TEMPLATE</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">misplacedStartTagForHeadElement</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsThoroughly</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">closingOfElementWithOpenChildElements</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">.</span><span class="nx">shift</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">endTagWithoutMatchingOpenElement</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_HEAD</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">To</span><span class="p">.</span><span class="nx">EOF</span><span class="o">?</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">openElementsLeftAfterEof</span><span class="o">:</span><span class="nx">Eo</span><span class="p">.</span><span class="nx">disallowedContentInNoscriptInHead</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_err</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_HEAD</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Zc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="nx">el</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">el</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="o">:</span><span class="nx">nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">:</span><span class="nx">tl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">COMMENT</span><span class="o">:</span><span class="nx">Kc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">START_TAG</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">END_TAG</span><span class="o">:</span><span class="nx">ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">EOF</span><span class="o">:</span><span class="nx">hl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">tl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">rl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">il</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">_o</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">Do</span><span class="p">.</span><span class="nx">TYPE</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="s2">&#34;hidden&#34;</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">sl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">I</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">S</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">B</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">U</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">EM</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BIG</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CODE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SMALL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STRIKE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STRONG</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">pushElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">A</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">getElementEntryInScopeWithTagName</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">A</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">removeEntry</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">pushElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H1</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H2</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H3</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H4</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H5</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H6</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Go</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">UL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIV</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NAV</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MAIN</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MENU</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ASIDE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CENTER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIGURE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FOOTER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEADER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIALOG</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DETAILS</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SECTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="o">||</span><span class="nx">r</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">DIV</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_isSpecialElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">IMG</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">WBR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">AREA</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">EMBED</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="o">:</span><span class="nx">rl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HR</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">RB</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">RTC</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RUBY</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">RT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">RP</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RUBY</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">RTC</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">PRE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LISTING</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">XMP</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SVG</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">kc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">vc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">SVG</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">adoptAttributes</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LINK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">META</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TITLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tryPeekProperlyNestedBodyElement</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">adoptAttributes</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">attrs</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">formElement</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">n</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">formElement</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOBR</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">NOBR</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">pushElement</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MATH</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">Lc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">vc</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">selfClosing</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">MATHML</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getDocumentMode</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nb">document</span><span class="p">)</span><span class="o">!==</span><span class="nx">Ro</span><span class="p">.</span><span class="nx">QUIRKS</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">il</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">PARAM</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TRACK</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SOURCE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">IMAGE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="o">=</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">=</span><span class="nx">Po</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">rl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">APPLET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OBJECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">insertMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">IFRAME</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_switchToTextParsing</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RAWTEXT</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">===</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">===</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">===</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">===</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">===</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="o">?</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT_IN_TABLE</span><span class="o">:</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_SELECT</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOEMBED</span><span class="o">:</span><span class="nx">sl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAMESET</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tryPeekProperlyNestedBodyElement</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">detachNode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popAllUpToHtmlElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_FRAMESET</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipNextNewLine</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">RCDATA</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">TEXT</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOSCRIPT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">scriptingEnabled</span><span class="o">?</span><span class="nx">sl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="nx">jo</span><span class="p">.</span><span class="nx">PLAINTEXT</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FRAME</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="p">;</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">--</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">===</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">UNKNOWN</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">===</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">shortenToLength</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_isSpecialElement</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">)</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">A</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">B</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">I</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">S</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">U</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">EM</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BIG</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CODE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FONT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NOBR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SMALL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STRIKE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STRONG</span><span class="o">:</span><span class="nx">qc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInButtonScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">P</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">P</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_closePElement</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">UL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIR</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIV</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">NAV</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">PRE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MAIN</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MENU</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ASIDE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BUTTON</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CENTER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIGURE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FOOTER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HEADER</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DIALOG</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ADDRESS</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">ARTICLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DETAILS</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SECTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SUMMARY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LISTING</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIELDSET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BLOCKQUOTE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FIGCAPTION</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInListItemScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">LI</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">DT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTagsWithExclusion</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H1</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H2</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H3</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H4</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H5</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">H6</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasNumberedHeaderInScope</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilNumberedHeaderPopped</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_reconstructActiveFormattingElements</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BR</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">framesetOk</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="p">)</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tryPeekProperlyNestedBodyElement</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_BODY</span><span class="p">,</span><span class="nx">Ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="p">{</span><span class="nx">formElement</span><span class="o">:</span><span class="nx">n</span><span class="p">}</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">t</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">formElement</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="p">,</span><span class="p">(</span><span class="nx">n</span><span class="o">||</span><span class="nx">t</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">APPLET</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OBJECT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">MARQUEE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">generateImpliedEndTags</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">hl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">yl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ul</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Pc</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">)</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">hasNonWhitespacePendingCharacterToken</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_TEXT</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">CHARACTER</span><span class="o">:</span><span class="nx">ml</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">To</span><span class="p">.</span><span class="nx">WHITESPACE_CHARACTER</span><span class="o">:</span><span class="nx">El</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="k">else</span> <span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">Nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">STYLE</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="p">,</span><span class="nx">Al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">FORM</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">formElement</span><span class="o">||</span><span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">formElement</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">il</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="o">:</span><span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">insertMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CAPTION</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_COLUMN_GROUP</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">fosterParentingEnabled</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">fosterParentingEnabled</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">el</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">fosterParentingEnabled</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="kd">function</span> <span class="nx">El</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ml</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">hasNonWhitespacePendingCharacterToken</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Tl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">hasNonWhitespacePendingCharacterToken</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">dl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertCharacters</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pendingCharacterTokens</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalInsertionMode</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kr">const</span> <span class="nx">_l</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Al</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">_appendElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">ackSelfClosing</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">gl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">gl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processToken</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertFakeElement</span><span class="p">(</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TR</span><span class="p">,</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_ROW</span><span class="p">,</span><span class="nx">Il</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasTableBodyContextInTableScope</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasTableBodyContextInTableScope</span><span class="p">(</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableBodyContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE</span><span class="p">,</span><span class="nx">fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Il</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_CELL</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">insertMarker</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">Nl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">pl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Sl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TABLE</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">Cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TBODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TFOOT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">THEAD</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInTableScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TR</span><span class="p">)</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">clearBackToTableRowContext</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_TABLE_BODY</span><span class="p">,</span><span class="nx">Cl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">BODY</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">CAPTION</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COL</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">COLGROUP</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TD</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TH</span><span class="o">:</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">bl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="o">:</span><span class="nx">ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_insertElement</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">INPUT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEXTAREA</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInSelectScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">!==</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_processStartTag</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SCRIPT</span><span class="o">:</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">Xc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ol</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">switch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="p">)</span><span class="p">{</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">stackTop</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTGROUP</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">OPTION</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">hasInSelectScope</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">SELECT</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">:</span><span class="nx">$c</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="kd">function</span> <span class="nx">yl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tmplCount</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">popUntilTagNamePopped</span><span class="p">(</span><span class="nx">Po</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">activeFormattingElements</span><span class="p">.</span><span class="nx">clearToLastMarker</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">tmplInsertionModeStack</span><span class="p">.</span><span class="nx">shift</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_resetInsertionMode</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">onEof</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">:</span><span class="nx">jc</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Ll</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagID</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentContext</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">AFTER_AFTER_BODY</span><span class="p">)</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">sourceCodeLocationInfo</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">tagIDs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="nx">Po</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNodeSourceCodeLocation</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">)</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">endTag</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_setEndLocation</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">else</span> <span class="nx">kl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">kl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="nx">el</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">vl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertionMode</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">IN_BODY</span><span class="p">,</span><span class="nx">el</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Dl</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="o">!==</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">&amp;&amp;</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">_isIntegrationPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">currentTagId</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">openElements</span><span class="p">.</span><span class="nx">pop</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Rl</span><span class="o">=</span><span class="nx">Ke</span><span class="p">(</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="s2">&#34;__esModule&#34;</span><span class="p">,</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeText</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeAttribute</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeUTF8</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">escape</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeXML</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getCodePoint</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlReplacer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlReplacer</span><span class="o">=</span><span class="sr">/[&#34;&amp;&#39;&lt;&gt;$\x80-\uFFFF]/g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">34</span><span class="p">,</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">39</span><span class="p">,</span><span class="s2">&#34;&amp;apos;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">60</span><span class="p">,</span><span class="s2">&#34;&amp;lt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">62</span><span class="p">,</span><span class="s2">&#34;&amp;gt;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlReplacer</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">i</span><span class="o">+=</span><span class="s2">&#34;&#34;</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;&amp;#x&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">getCodePoint</span><span class="p">)</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="p">,</span><span class="s2">&#34;;&#34;</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">xmlReplacer</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">+=</span><span class="nb">Number</span><span class="p">(</span><span class="mi">55296</span><span class="o">==</span><span class="p">(</span><span class="mi">64512</span><span class="o">&amp;</span><span class="nx">o</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="k">return</span> <span class="nx">i</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="p">;</span><span class="p">)</span><span class="nx">i</span><span class="o">!==</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">+=</span><span class="nx">n</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">s</span><span class="o">+=</span><span class="nx">t</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">s</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="nx">t</span><span class="p">.</span><span class="nx">getCodePoint</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">codePointAt</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">codePointAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="mi">55296</span><span class="o">==</span><span class="p">(</span><span class="mi">64512</span><span class="o">&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="mi">1024</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="o">-</span><span class="mi">55296</span><span class="p">)</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="mi">56320</span><span class="o">+</span><span class="mi">65536</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">encodeXML</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escape</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeUTF8</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="sr">/[&amp;&lt;&gt;&#39;&#34;]/g</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeAttribute</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="sr">/[&#34;&amp;\u00A0]/g</span><span class="p">,</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">34</span><span class="p">,</span><span class="s2">&#34;&amp;quot;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">160</span><span class="p">,</span><span class="s2">&#34;&amp;nbsp;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">escapeText</span><span class="o">=</span><span class="nx">i</span><span class="p">(</span><span class="sr">/[&amp;&lt;&gt;\u00A0]/g</span><span class="p">,</span><span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">38</span><span class="p">,</span><span class="s2">&#34;&amp;amp;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">60</span><span class="p">,</span><span class="s2">&#34;&amp;lt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">62</span><span class="p">,</span><span class="s2">&#34;&amp;gt;&#34;</span><span class="p">]</span><span class="p">,</span><span class="p">[</span><span class="mi">160</span><span class="p">,</span><span class="s2">&#34;&amp;nbsp;&#34;</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">}</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="nx">qe</span><span class="p">(</span><span class="nx">Rl</span><span class="p">)</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Ml</span><span class="o">=</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">escapeText</span><span class="p">,</span><span class="nx">Pl</span><span class="o">=</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">escapeAttribute</span><span class="p">;</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">escapeUTF8</span><span class="p">,</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">escape</span><span class="p">,</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">encodeXML</span><span class="p">,</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">getCodePoint</span><span class="p">,</span><span class="nx">Rl</span><span class="p">.</span><span class="nx">xmlReplacer</span><span class="p">;</span><span class="kr">const</span> <span class="nx">xl</span><span class="o">=</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="p">[</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">AREA</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BASE</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BASEFONT</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BGSOUND</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">BR</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">COL</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">EMBED</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">FRAME</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">HR</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">IMG</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">INPUT</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">KEYGEN</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">LINK</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">META</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">PARAM</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">SOURCE</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TRACK</span><span class="p">,</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">WBR</span><span class="p">]</span><span class="p">)</span><span class="p">;</span><span class="kr">const</span> <span class="nx">wl</span><span class="o">=</span><span class="p">{</span><span class="nx">treeAdapter</span><span class="o">:</span><span class="nx">Ec</span><span class="p">,</span><span class="nx">scriptingEnabled</span><span class="o">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Bl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">Fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="p">...</span><span class="nx">wl</span><span class="p">,</span><span class="p">...</span><span class="nx">t</span><span class="p">}</span><span class="p">)</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">isElementNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kr">const</span> <span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">;</span><span class="k">return</span><span class="sb">`</span><span class="sb">&lt;</span><span class="si">${</span><span class="nx">n</span><span class="si">}</span><span class="si">${</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="p">{</span><span class="nx">treeAdapter</span><span class="o">:</span><span class="nx">t</span><span class="si">}</span><span class="sb">){let n=&#34;&#34;;for(const r of t.getAttrList(e)){if(n+=&#34; &#34;,r.namespace)switch(r.namespace){case vo.XML:n+=</span><span class="sb">`</span><span class="nx">xml</span><span class="o">:</span><span class="nx">$</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="sb">`</span><span class="sb">;break;case vo.XMLNS:&#34;xmlns&#34;!==r.name&amp;&amp;(n+=&#34;xmlns:&#34;),n+=r.name;break;case vo.XLINK:n+=</span><span class="sb">`</span><span class="nx">xlink</span><span class="o">:</span><span class="nx">$</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="sb">`</span><span class="sb">;break;default:n+=</span><span class="sb">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">prefix</span><span class="p">}</span><span class="o">:</span><span class="nx">$</span><span class="p">{</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="sb">`</span><span class="sb">}else n+=r.name;n+=</span><span class="sb">`</span><span class="o">=</span><span class="s2">&#34;${Pl(r.value)}&#34;</span><span class="sb">`</span><span class="sb">}return n}(e,t)}&gt;</span><span class="si">${</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">isElementNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">&amp;&amp;</span><span class="nx">xl</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="p">)</span><span class="si">}</span><span class="sb">(e,t)?&#34;&#34;:</span><span class="sb">`</span><span class="nx">$</span><span class="p">{</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">{</span><span class="kd">let</span> <span class="nx">n</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">;</span><span class="kr">const</span> <span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">isElementNode</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTagName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">===</span><span class="nx">Mo</span><span class="p">.</span><span class="nx">TEMPLATE</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getNamespaceURI</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">===</span><span class="nx">vo</span><span class="p">.</span><span class="nx">HTML</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getTemplateContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">treeAdapter</span><span class="p">.</span><span class="nx">getChildNodes</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">e</span> <span class="k">of</span> <span class="nx">i</span><span class="p">)</span><span class="nx">n</span><span class="o">+=</span><span class="nx">Fl</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">;</span><span class="k">return</span> <span class="nx">n</span><span class="p">}</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/${n}&gt;`}`}(e,t):t.treeAdapter.isTextNode(e)?function(e,t){const{treeAdapter:n}=t,r=n.getTextNodeContent(e),i=n.getParentNode(e),s=i&amp;&amp;n.isElementNode(i)&amp;&amp;n.getTagName(i);return s&amp;&amp;n.getNamespaceURI(i)===vo.HTML&amp;&amp;(a=s,o=t.scriptingEnabled,Yo.has(a)||o&amp;&amp;a===Mo.NOSCRIPT)?r:Ml(r);var a,o}(e,t):t.treeAdapter.isCommentNode(e)?function(e,{treeAdapter:t}){return`\x3c!--${t.getCommentNodeContent(e)}--\x3e`}(e,t):t.treeAdapter.isDocumentTypeNode(e)?function(e,{treeAdapter:t}){return`&lt;!DOCTYPE ${t.getDocumentTypeNodeName(e)}&gt;`}(e,t):&#34;&#34;}function Ul(e){return new m(e)}function Hl(e){const t=e.includes(&#39;&#34;&#39;)?&#34;&#39;&#34;:&#39;&#34;&#39;;return t+e+t}const Gl={isCommentNode:O,isElementNode:I,isTextNode:b,createDocument(){const e=new N([]);return e[&#34;x-mode&#34;]=Ro.NO_QUIRKS,e},createDocumentFragment:()=&gt;new N([]),createElement(e,t,n){const r=Object.create(null),i=Object.create(null),s=Object.create(null);for(let e=0;e&lt;n.length;e++){const t=n[e].name;r[t]=n[e].value,i[t]=n[e].namespace,s[t]=n[e].prefix}const a=new C(e,r,[]);return a.namespace=t,a[&#34;x-attribsNamespace&#34;]=i,a[&#34;x-attribsPrefix&#34;]=s,a},createCommentNode:e=&gt;new T(e),appendChild(e,t){const n=e.children[e.children.length-1];n&amp;&amp;(n.next=t,t.prev=n),e.children.push(t),t.parent=e},insertBefore(e,t,n){const r=e.children.indexOf(n),{prev:i}=n;i&amp;&amp;(i.next=t,t.prev=i),n.prev=t,t.next=n,e.children.splice(r,0,t),t.parent=e},setTemplateContent(e,t){Gl.appendChild(e,t)},getTemplateContent:e=&gt;e.children[0],setDocumentType(e,t,n,r){const i=function(e,t,n){let r=&#34;!DOCTYPE &#34;;return e&amp;&amp;(r+=e),t?r+=` PUBLIC ${Hl(t)}`:n&amp;&amp;(r+=&#34; SYSTEM&#34;),n&amp;&amp;(r+=` ${Hl(n)}`),r}(t,n,r);let s=e.children.find((e=&gt;y(e)&amp;&amp;&#34;!doctype&#34;===e.name));s?s.data=null!=i?i:null:(s=new _(&#34;!doctype&#34;,i),Gl.appendChild(e,s)),s[&#34;x-name&#34;]=null!=t?t:void 0,s[&#34;x-publicId&#34;]=null!=n?n:void 0,s[&#34;x-systemId&#34;]=null!=r?r:void 0},setDocumentMode(e,t){e[&#34;x-mode&#34;]=t},getDocumentMode:e=&gt;e[&#34;x-mode&#34;],detachNode(e){if(e.parent){const t=e.parent.children.indexOf(e),{prev:n,next:r}=e;e.prev=null,e.next=null,n&amp;&amp;(n.next=r),r&amp;&amp;(r.prev=n),e.parent.children.splice(t,1),e.parent=null}},insertText(e,t){const n=e.children[e.children.length-1];n&amp;&amp;b(n)?n.data+=t:Gl.appendChild(e,Ul(t))},insertTextBefore(e,t,n){const r=e.children[e.children.indexOf(n)-1];r&amp;&amp;b(r)?r.data+=t:Gl.insertBefore(e,Ul(t),n)},adoptAttributes(e,t){for(let n=0;n&lt;t.length;n++){const r=t[n].name;void 0===e.attribs[r]&amp;&amp;(e.attribs[r]=t[n].value,e[&#34;x-attribsNamespace&#34;][r]=t[n].namespace,e[&#34;x-attribsPrefix&#34;][r]=t[n].prefix)}},getFirstChild:e=&gt;e.children[0],getChildNodes:e=&gt;e.children,getParentNode:e=&gt;e.parent,getAttrList:e=&gt;e.attributes,getTagName:e=&gt;e.name,getNamespaceURI:e=&gt;e.namespace,getTextNodeContent:e=&gt;e.data,getCommentNodeContent:e=&gt;e.data,getDocumentTypeNodeName(e){var t;return null!==(t=e[&#34;x-name&#34;])&amp;&amp;void 0!==t?t:&#34;&#34;},getDocumentTypeNodePublicId(e){var t;return null!==(t=e[&#34;x-publicId&#34;])&amp;&amp;void 0!==t?t:&#34;&#34;},getDocumentTypeNodeSystemId(e){var t;return null!==(t=e[&#34;x-systemId&#34;])&amp;&amp;void 0!==t?t:&#34;&#34;},isDocumentTypeNode:e=&gt;y(e)&amp;&amp;&#34;!doctype&#34;===e.name,setNodeSourceCodeLocation(e,t){t&amp;&amp;(e.startIndex=t.startOffset,e.endIndex=t.endOffset),e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=&gt;e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){null!=t.endOffset&amp;&amp;(e.endIndex=t.endOffset),e.sourceCodeLocation={...e.sourceCodeLocation,...t}}};var Yl=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,s=t.length;i&lt;s;i++)!r&amp;&amp;i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};function ql(e,t,n,r){var i={scriptingEnabled:&#34;boolean&#34;!=typeof t.scriptingEnabled||t.scriptingEnabled,treeAdapter:Gl,sourceCodeLocationInfo:t.sourceCodeLocationInfo};return n?function(e,t){return wc.parse(e,t)}(e,i):function(e,t,n){&#34;string&#34;==typeof e&amp;&amp;(n=t,t=e,e=null);const r=wc.getFragmentParser(e,n);return r.tokenizer.write(t,!0),r.getFragment()}(r,e,i)}var Kl,jl,Vl,Wl={treeAdapter:Gl};function Ql(e){return e===Kl.Space||e===Kl.NewLine||e===Kl.Tab||e===Kl.FormFeed||e===Kl.CarriageReturn}function Xl(e){return e===Kl.Slash||e===Kl.Gt||Ql(e)}function $l(e){return e&gt;=Kl.Zero&amp;&amp;e&lt;=Kl.Nine}!function(e){e[e.Tab=9]=&#34;Tab&#34;,e[e.NewLine=10]=&#34;NewLine&#34;,e[e.FormFeed=12]=&#34;FormFeed&#34;,e[e.CarriageReturn=13]=&#34;CarriageReturn&#34;,e[e.Space=32]=&#34;Space&#34;,e[e.ExclamationMark=33]=&#34;ExclamationMark&#34;,e[e.Num=35]=&#34;Num&#34;,e[e.Amp=38]=&#34;Amp&#34;,e[e.SingleQuote=39]=&#34;SingleQuote&#34;,e[e.DoubleQuote=34]=&#34;DoubleQuote&#34;,e[e.Dash=45]=&#34;Dash&#34;,e[e.Slash=47]=&#34;Slash&#34;,e[e.Zero=48]=&#34;Zero&#34;,e[e.Nine=57]=&#34;Nine&#34;,e[e.Semi=59]=&#34;Semi&#34;,e[e.Lt=60]=&#34;Lt&#34;,e[e.Eq=61]=&#34;Eq&#34;,e[e.Gt=62]=&#34;Gt&#34;,e[e.Questionmark=63]=&#34;Questionmark&#34;,e[e.UpperA=65]=&#34;UpperA&#34;,e[e.LowerA=97]=&#34;LowerA&#34;,e[e.UpperF=70]=&#34;UpperF&#34;,e[e.LowerF=102]=&#34;LowerF&#34;,e[e.UpperZ=90]=&#34;UpperZ&#34;,e[e.LowerZ=122]=&#34;LowerZ&#34;,e[e.LowerX=120]=&#34;LowerX&#34;,e[e.OpeningSquareBracket=91]=&#34;OpeningSquareBracket&#34;}(Kl||(Kl={})),function(e){e[e.Text=1]=&#34;Text&#34;,e[e.BeforeTagName=2]=&#34;BeforeTagName&#34;,e[e.InTagName=3]=&#34;InTagName&#34;,e[e.InSelfClosingTag=4]=&#34;InSelfClosingTag&#34;,e[e.BeforeClosingTagName=5]=&#34;BeforeClosingTagName&#34;,e[e.InClosingTagName=6]=&#34;InClosingTagName&#34;,e[e.AfterClosingTagName=7]=&#34;AfterClosingTagName&#34;,e[e.BeforeAttributeName=8]=&#34;BeforeAttributeName&#34;,e[e.InAttributeName=9]=&#34;InAttributeName&#34;,e[e.AfterAttributeName=10]=&#34;AfterAttributeName&#34;,e[e.BeforeAttributeValue=11]=&#34;BeforeAttributeValue&#34;,e[e.InAttributeValueDq=12]=&#34;InAttributeValueDq&#34;,e[e.InAttributeValueSq=13]=&#34;InAttributeValueSq&#34;,e[e.InAttributeValueNq=14]=&#34;InAttributeValueNq&#34;,e[e.BeforeDeclaration=15]=&#34;BeforeDeclaration&#34;,e[e.InDeclaration=16]=&#34;InDeclaration&#34;,e[e.InProcessingInstruction=17]=&#34;InProcessingInstruction&#34;,e[e.BeforeComment=18]=&#34;BeforeComment&#34;,e[e.CDATASequence=19]=&#34;CDATASequence&#34;,e[e.InSpecialComment=20]=&#34;InSpecialComment&#34;,e[e.InCommentLike=21]=&#34;InCommentLike&#34;,e[e.BeforeSpecialS=22]=&#34;BeforeSpecialS&#34;,e[e.SpecialStartSequence=23]=&#34;SpecialStartSequence&#34;,e[e.InSpecialTag=24]=&#34;InSpecialTag&#34;,e[e.BeforeEntity=25]=&#34;BeforeEntity&#34;,e[e.BeforeNumericEntity=26]=&#34;BeforeNumericEntity&#34;,e[e.InNamedEntity=27]=&#34;InNamedEntity&#34;,e[e.InNumericEntity=28]=&#34;InNumericEntity&#34;,e[e.InHexEntity=29]=&#34;InHexEntity&#34;}(jl||(jl={})),function(e){e[e.NoValue=0]=&#34;NoValue&#34;,e[e.Unquoted=1]=&#34;Unquoted&#34;,e[e.Single=2]=&#34;Single&#34;,e[e.Double=3]=&#34;Double&#34;}(Vl||(Vl={}));const zl={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101])};class Jl{constructor({xmlMode:e=!1,decodeEntities:t=!0},n){this.cbs=n,this.state=jl.Text,this.buffer=&#34;&#34;,this.sectionStart=0,this.index=0,this.baseState=jl.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.sequenceIndex=0,this.trieIndex=0,this.trieCurrent=0,this.entityResult=0,this.entityExcess=0,this.xmlMode=e,this.decodeEntities=t,this.entityTrie=e?xo:wo}reset(){this.state=jl.Text,this.buffer=&#34;&#34;,this.sectionStart=0,this.index=0,this.baseState=jl.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()}end(){this.running&amp;&amp;this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index&lt;this.buffer.length+this.offset&amp;&amp;this.parse()}getIndex(){return this.index}getSectionStart(){return this.sectionStart}stateText(e){e===Kl.Lt||!this.decodeEntities&amp;&amp;this.fastForwardTo(Kl.Lt)?(this.index&gt;this.sectionStart&amp;&amp;this.cbs.ontext(this.sectionStart,this.index),this.state=jl.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&amp;&amp;e===Kl.Amp&amp;&amp;(this.state=jl.BeforeEntity)}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?Xl(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=jl.InTagName,this.stateInTagName(e)}stateInSpecialTag(e){if(this.sequenceIndex===this.currentSequence.length){if(e===Kl.Gt||Ql(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart&lt;t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===zl.TitleEnd?this.decodeEntities&amp;&amp;e===Kl.Amp&amp;&amp;(this.state=jl.BeforeEntity):this.fastForwardTo(Kl.Lt)&amp;&amp;(this.sequenceIndex=1):this.sequenceIndex=Number(e===Kl.Lt)}stateCDATASequence(e){e===zl.Cdata[this.sequenceIndex]?++this.sequenceIndex===zl.Cdata.length&amp;&amp;(this.state=jl.InCommentLike,this.currentSequence=zl.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=jl.InDeclaration,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index&lt;this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&amp;&amp;(this.currentSequence===zl.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=jl.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&amp;&amp;(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&amp;&amp;(this.sequenceIndex=0)}isTagStartChar(e){return this.xmlMode?!Xl(e):function(e){return e&gt;=Kl.LowerA&amp;&amp;e&lt;=Kl.LowerZ||e&gt;=Kl.UpperA&amp;&amp;e&lt;=Kl.UpperZ}(e)}startSpecial(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=jl.SpecialStartSequence}stateBeforeTagName(e){if(e===Kl.ExclamationMark)this.state=jl.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===Kl.Questionmark)this.state=jl.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){const t=32|e;this.sectionStart=this.index,this.xmlMode||t!==zl.TitleEnd[2]?this.state=this.xmlMode||t!==zl.ScriptEnd[2]?jl.InTagName:jl.BeforeSpecialS:this.startSpecial(zl.TitleEnd,3)}else e===Kl.Slash?this.state=jl.BeforeClosingTagName:(this.state=jl.Text,this.stateText(e))}stateInTagName(e){Xl(e)&amp;&amp;(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=jl.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateBeforeClosingTagName(e){Ql(e)||(e===Kl.Gt?this.state=jl.Text:(this.state=this.isTagStartChar(e)?jl.InClosingTagName:jl.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(e){(e===Kl.Gt||Ql(e))&amp;&amp;(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=jl.AfterClosingTagName,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){(e===Kl.Gt||this.fastForwardTo(Kl.Gt))&amp;&amp;(this.state=jl.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(e){e===Kl.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=jl.InSpecialTag,this.sequenceIndex=0):this.state=jl.Text,this.baseState=this.state,this.sectionStart=this.index+1):e===Kl.Slash?this.state=jl.InSelfClosingTag:Ql(e)||(this.state=jl.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(e){e===Kl.Gt?(this.cbs.onselfclosingtag(this.index),this.state=jl.Text,this.baseState=jl.Text,this.sectionStart=this.index+1,this.isSpecial=!1):Ql(e)||(this.state=jl.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateInAttributeName(e){(e===Kl.Eq||Xl(e))&amp;&amp;(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=-1,this.state=jl.AfterAttributeName,this.stateAfterAttributeName(e))}stateAfterAttributeName(e){e===Kl.Eq?this.state=jl.BeforeAttributeValue:e===Kl.Slash||e===Kl.Gt?(this.cbs.onattribend(Vl.NoValue,this.index),this.state=jl.BeforeAttributeName,this.stateBeforeAttributeName(e)):Ql(e)||(this.cbs.onattribend(Vl.NoValue,this.index),this.state=jl.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(e){e===Kl.DoubleQuote?(this.state=jl.InAttributeValueDq,this.sectionStart=this.index+1):e===Kl.SingleQuote?(this.state=jl.InAttributeValueSq,this.sectionStart=this.index+1):Ql(e)||(this.sectionStart=this.index,this.state=jl.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))}handleInAttributeValue(e,t){e===t||!this.decodeEntities&amp;&amp;this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===Kl.DoubleQuote?Vl.Double:Vl.Single,this.index),this.state=jl.BeforeAttributeName):this.decodeEntities&amp;&amp;e===Kl.Amp&amp;&amp;(this.baseState=this.state,this.state=jl.BeforeEntity)}stateInAttributeValueDoubleQuotes(e){this.handleInAttributeValue(e,Kl.DoubleQuote)}stateInAttributeValueSingleQuotes(e){this.handleInAttributeValue(e,Kl.SingleQuote)}stateInAttributeValueNoQuotes(e){Ql(e)||e===Kl.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(Vl.Unquoted,this.index),this.state=jl.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&amp;&amp;e===Kl.Amp&amp;&amp;(this.baseState=this.state,this.state=jl.BeforeEntity)}stateBeforeDeclaration(e){e===Kl.OpeningSquareBracket?(this.state=jl.CDATASequence,this.sequenceIndex=0):this.state=e===Kl.Dash?jl.BeforeComment:jl.InDeclaration}stateInDeclaration(e){(e===Kl.Gt||this.fastForwardTo(Kl.Gt))&amp;&amp;(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=jl.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(e===Kl.Gt||this.fastForwardTo(Kl.Gt))&amp;&amp;(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=jl.Text,this.sectionStart=this.index+1)}stateBeforeComment(e){e===Kl.Dash?(this.state=jl.InCommentLike,this.currentSequence=zl.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=jl.InDeclaration}stateInSpecialComment(e){(e===Kl.Gt||this.fastForwardTo(Kl.Gt))&amp;&amp;(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=jl.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){const t=32|e;t===zl.ScriptEnd[3]?this.startSpecial(zl.ScriptEnd,4):t===zl.StyleEnd[3]?this.startSpecial(zl.StyleEnd,4):(this.state=jl.InTagName,this.stateInTagName(e))}stateBeforeEntity(e){this.entityExcess=1,this.entityResult=0,e===Kl.Num?this.state=jl.BeforeNumericEntity:e===Kl.Amp||(this.trieIndex=0,this.trieCurrent=this.entityTrie[0],this.state=jl.InNamedEntity,this.stateInNamedEntity(e))}stateInNamedEntity(e){if(this.entityExcess+=1,this.trieIndex=Oo(this.entityTrie,this.trieCurrent,this.trieIndex+1,e),this.trieIndex&lt;0)return this.emitNamedEntity(),void this.index--;this.trieCurrent=this.entityTrie[this.trieIndex];const t=this.trieCurrent&amp;yo.VALUE_LENGTH;if(t){const n=(t&gt;&gt;14)-1;if(this.allowLegacyEntity()||e===Kl.Semi){const e=this.index-this.entityExcess+1;e&gt;this.sectionStart&amp;&amp;this.emitPartial(this.sectionStart,e),this.entityResult=this.trieIndex,this.trieIndex+=n,this.entityExcess=0,this.sectionStart=this.index+1,0===n&amp;&amp;this.emitNamedEntity()}else this.trieIndex+=n}}emitNamedEntity(){if(this.state=this.baseState,0===this.entityResult)return;switch((this.entityTrie[this.entityResult]&amp;yo.VALUE_LENGTH)&gt;&gt;14){case 1:this.emitCodePoint(this.entityTrie[this.entityResult]&amp;~yo.VALUE_LENGTH);break;case 2:this.emitCodePoint(this.entityTrie[this.entityResult+1]);break;case 3:this.emitCodePoint(this.entityTrie[this.entityResult+1]),this.emitCodePoint(this.entityTrie[this.entityResult+2])}}stateBeforeNumericEntity(e){(32|e)===Kl.LowerX?(this.entityExcess++,this.state=jl.InHexEntity):(this.state=jl.InNumericEntity,this.stateInNumericEntity(e))}emitNumericEntity(e){const t=this.index-this.entityExcess-1;t+2+Number(this.state===jl.InHexEntity)!==this.index&amp;&amp;(t&gt;this.sectionStart&amp;&amp;this.emitPartial(this.sectionStart,t),this.sectionStart=this.index+Number(e),this.emitCodePoint(ko(this.entityResult))),this.state=this.baseState}stateInNumericEntity(e){e===Kl.Semi?this.emitNumericEntity(!0):$l(e)?(this.entityResult=10*this.entityResult+(e-Kl.Zero),this.entityExcess++):(this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state=this.baseState,this.index--)}stateInHexEntity(e){e===Kl.Semi?this.emitNumericEntity(!0):$l(e)?(this.entityResult=16*this.entityResult+(e-Kl.Zero),this.entityExcess++):!function(e){return e&gt;=Kl.UpperA&amp;&amp;e&lt;=Kl.UpperF||e&gt;=Kl.LowerA&amp;&amp;e&lt;=Kl.LowerF}(e)?(this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state=this.baseState,this.index--):(this.entityResult=16*this.entityResult+((32|e)-Kl.LowerA+10),this.entityExcess++)}allowLegacyEntity(){return!this.xmlMode&amp;&amp;(this.baseState===jl.Text||this.baseState===jl.InSpecialTag)}cleanup(){this.running&amp;&amp;this.sectionStart!==this.index&amp;&amp;(this.state===jl.Text||this.state===jl.InSpecialTag&amp;&amp;0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==jl.InAttributeValueDq&amp;&amp;this.state!==jl.InAttributeValueSq&amp;&amp;this.state!==jl.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index&lt;this.buffer.length+this.offset&amp;&amp;this.running}parse(){for(;this.shouldContinue();){const e=this.buffer.charCodeAt(this.index-this.offset);this.state===jl.Text?this.stateText(e):this.state===jl.SpecialStartSequence?this.stateSpecialStartSequence(e):this.state===jl.InSpecialTag?this.stateInSpecialTag(e):this.state===jl.CDATASequence?this.stateCDATASequence(e):this.state===jl.InAttributeValueDq?this.stateInAttributeValueDoubleQuotes(e):this.state===jl.InAttributeName?this.stateInAttributeName(e):this.state===jl.InCommentLike?this.stateInCommentLike(e):this.state===jl.InSpecialComment?this.stateInSpecialComment(e):this.state===jl.BeforeAttributeName?this.stateBeforeAttributeName(e):this.state===jl.InTagName?this.stateInTagName(e):this.state===jl.InClosingTagName?this.stateInClosingTagName(e):this.state===jl.BeforeTagName?this.stateBeforeTagName(e):this.state===jl.AfterAttributeName?this.stateAfterAttributeName(e):this.state===jl.InAttributeValueSq?this.stateInAttributeValueSingleQuotes(e):this.state===jl.BeforeAttributeValue?this.stateBeforeAttributeValue(e):this.state===jl.BeforeClosingTagName?this.stateBeforeClosingTagName(e):this.state===jl.AfterClosingTagName?this.stateAfterClosingTagName(e):this.state===jl.BeforeSpecialS?this.stateBeforeSpecialS(e):this.state===jl.InAttributeValueNq?this.stateInAttributeValueNoQuotes(e):this.state===jl.InSelfClosingTag?this.stateInSelfClosingTag(e):this.state===jl.InDeclaration?this.stateInDeclaration(e):this.state===jl.BeforeDeclaration?this.stateBeforeDeclaration(e):this.state===jl.BeforeComment?this.stateBeforeComment(e):this.state===jl.InProcessingInstruction?this.stateInProcessingInstruction(e):this.state===jl.InNamedEntity?this.stateInNamedEntity(e):this.state===jl.BeforeEntity?this.stateBeforeEntity(e):this.state===jl.InHexEntity?this.stateInHexEntity(e):this.state===jl.InNumericEntity?this.stateInNumericEntity(e):this.stateBeforeNumericEntity(e),this.index++}this.cleanup()}finish(){this.state===jl.InNamedEntity&amp;&amp;this.emitNamedEntity(),this.sectionStart&lt;this.index&amp;&amp;this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length+this.offset;this.state===jl.InCommentLike?this.currentSequence===zl.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===jl.InNumericEntity&amp;&amp;this.allowLegacyEntity()||this.state===jl.InHexEntity&amp;&amp;this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state===jl.InTagName||this.state===jl.BeforeAttributeName||this.state===jl.BeforeAttributeValue||this.state===jl.AfterAttributeName||this.state===jl.InAttributeName||this.state===jl.InAttributeValueSq||this.state===jl.InAttributeValueDq||this.state===jl.InAttributeValueNq||this.state===jl.InClosingTagName||this.cbs.ontext(this.sectionStart,e)}emitPartial(e,t){this.baseState!==jl.Text&amp;&amp;this.baseState!==jl.InSpecialTag?this.cbs.onattribdata(e,t):this.cbs.ontext(e,t)}emitCodePoint(e){this.baseState!==jl.Text&amp;&amp;this.baseState!==jl.InSpecialTag?this.cbs.onattribentity(e):this.cbs.ontextentity(e)}}const Zl=new Set([&#34;input&#34;,&#34;option&#34;,&#34;optgroup&#34;,&#34;select&#34;,&#34;button&#34;,&#34;datalist&#34;,&#34;textarea&#34;]),eh=new Set([&#34;p&#34;]),th=new Set([&#34;thead&#34;,&#34;tbody&#34;]),nh=new Set([&#34;dd&#34;,&#34;dt&#34;]),rh=new Set([&#34;rt&#34;,&#34;rp&#34;]),ih=new Map([[&#34;tr&#34;,new Set([&#34;tr&#34;,&#34;th&#34;,&#34;td&#34;])],[&#34;th&#34;,new Set([&#34;th&#34;])],[&#34;td&#34;,new Set([&#34;thead&#34;,&#34;th&#34;,&#34;td&#34;])],[&#34;body&#34;,new Set([&#34;head&#34;,&#34;link&#34;,&#34;script&#34;])],[&#34;li&#34;,new Set([&#34;li&#34;])],[&#34;p&#34;,eh],[&#34;h1&#34;,eh],[&#34;h2&#34;,eh],[&#34;h3&#34;,eh],[&#34;h4&#34;,eh],[&#34;h5&#34;,eh],[&#34;h6&#34;,eh],[&#34;select&#34;,Zl],[&#34;input&#34;,Zl],[&#34;output&#34;,Zl],[&#34;button&#34;,Zl],[&#34;datalist&#34;,Zl],[&#34;textarea&#34;,Zl],[&#34;option&#34;,new Set([&#34;option&#34;])],[&#34;optgroup&#34;,new Set([&#34;optgroup&#34;,&#34;option&#34;])],[&#34;dd&#34;,nh],[&#34;dt&#34;,nh],[&#34;address&#34;,eh],[&#34;article&#34;,eh],[&#34;aside&#34;,eh],[&#34;blockquote&#34;,eh],[&#34;details&#34;,eh],[&#34;div&#34;,eh],[&#34;dl&#34;,eh],[&#34;fieldset&#34;,eh],[&#34;figcaption&#34;,eh],[&#34;figure&#34;,eh],[&#34;footer&#34;,eh],[&#34;form&#34;,eh],[&#34;header&#34;,eh],[&#34;hr&#34;,eh],[&#34;main&#34;,eh],[&#34;nav&#34;,eh],[&#34;ol&#34;,eh],[&#34;pre&#34;,eh],[&#34;section&#34;,eh],[&#34;table&#34;,eh],[&#34;ul&#34;,eh],[&#34;rt&#34;,rh],[&#34;rp&#34;,rh],[&#34;tbody&#34;,th],[&#34;tfoot&#34;,th]]),sh=new Set([&#34;area&#34;,&#34;base&#34;,&#34;basefont&#34;,&#34;br&#34;,&#34;col&#34;,&#34;command&#34;,&#34;embed&#34;,&#34;frame&#34;,&#34;hr&#34;,&#34;img&#34;,&#34;input&#34;,&#34;isindex&#34;,&#34;keygen&#34;,&#34;link&#34;,&#34;meta&#34;,&#34;param&#34;,&#34;source&#34;,&#34;track&#34;,&#34;wbr&#34;]),ah=new Set([&#34;math&#34;,&#34;svg&#34;]),oh=new Set([&#34;mi&#34;,&#34;mo&#34;,&#34;mn&#34;,&#34;ms&#34;,&#34;mtext&#34;,&#34;annotation-xml&#34;,&#34;foreignobject&#34;,&#34;desc&#34;,&#34;title&#34;]),ch=/</span><span class="err">\</span><span class="nx">s</span><span class="o">|</span><span class="err">\</span><span class="c1">//;class lh{constructor(e,t={}){var n,r,i,s,a;this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname=&#34;&#34;,this.attribname=&#34;&#34;,this.attribvalue=&#34;&#34;,this.attribs=null,this.stack=[],this.foreignContext=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.lowerCaseTagNames=null!==(n=t.lowerCaseTags)&amp;&amp;void 0!==n?n:!t.xmlMode,this.lowerCaseAttributeNames=null!==(r=t.lowerCaseAttributeNames)&amp;&amp;void 0!==r?r:!t.xmlMode,this.tokenizer=new(null!==(i=t.Tokenizer)&amp;&amp;void 0!==i?i:Jl)(this.options,this),null===(a=(s=this.cbs).onparserinit)||void 0===a||a.call(s,this)}ontext(e,t){var n,r;const i=this.getSlice(e,t);this.endIndex=t-1,null===(r=(n=this.cbs).ontext)||void 0===r||r.call(n,i),this.startIndex=t}ontextentity(e){var t,n;const r=this.tokenizer.getSectionStart();this.endIndex=r-1,null===(n=(t=this.cbs).ontext)||void 0===n||n.call(t,Lo(e)),this.startIndex=r}isVoidElement(e){return!this.options.xmlMode&amp;&amp;sh.has(e)}onopentagname(e,t){this.endIndex=t;let n=this.getSlice(e,t);this.lowerCaseTagNames&amp;&amp;(n=n.toLowerCase()),this.emitOpenTag(n)}emitOpenTag(e){var t,n,r,i;this.openTagStart=this.startIndex,this.tagname=e;const s=!this.options.xmlMode&amp;&amp;ih.get(e);if(s)for(;this.stack.length&gt;0&amp;&amp;s.has(this.stack[this.stack.length-1]);){const e=this.stack.pop();null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,e,!0)}this.isVoidElement(e)||(this.stack.push(e),ah.has(e)?this.foreignContext.push(!0):oh.has(e)&amp;&amp;this.foreignContext.push(!1)),null===(i=(r=this.cbs).onopentagname)||void 0===i||i.call(r,e),this.cbs.onopentag&amp;&amp;(this.attribs={})}endOpenTag(e){var t,n;this.startIndex=this.openTagStart,this.attribs&amp;&amp;(null===(n=(t=this.cbs).onopentag)||void 0===n||n.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&amp;&amp;this.isVoidElement(this.tagname)&amp;&amp;this.cbs.onclosetag(this.tagname,!0),this.tagname=&#34;&#34;}onopentagend(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1}onclosetag(e,t){var n,r,i,s,a,o;this.endIndex=t;let c=this.getSlice(e,t);if(this.lowerCaseTagNames&amp;&amp;(c=c.toLowerCase()),(ah.has(c)||oh.has(c))&amp;&amp;this.foreignContext.pop(),this.isVoidElement(c))this.options.xmlMode||&#34;br&#34;!==c||(null===(r=(n=this.cbs).onopentagname)||void 0===r||r.call(n,&#34;br&#34;),null===(s=(i=this.cbs).onopentag)||void 0===s||s.call(i,&#34;br&#34;,{},!0),null===(o=(a=this.cbs).onclosetag)||void 0===o||o.call(a,&#34;br&#34;,!1));else{const e=this.stack.lastIndexOf(c);if(-1!==e)if(this.cbs.onclosetag){let t=this.stack.length-e;for(;t--;)this.cbs.onclosetag(this.stack.pop(),0!==t)}else this.stack.length=e;else this.options.xmlMode||&#34;p&#34;!==c||(this.emitOpenTag(&#34;p&#34;),this.closeCurrentTag(!0))}this.startIndex=t+1}onselfclosingtag(e){this.endIndex=e,this.options.xmlMode||this.options.recognizeSelfClosing||this.foreignContext[this.foreignContext.length-1]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)}closeCurrentTag(e){var t,n;const r=this.tagname;this.endOpenTag(e),this.stack[this.stack.length-1]===r&amp;&amp;(null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,r,!e),this.stack.pop())}onattribname(e,t){this.startIndex=e;const n=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?n.toLowerCase():n}onattribdata(e,t){this.attribvalue+=this.getSlice(e,t)}onattribentity(e){this.attribvalue+=Lo(e)}onattribend(e,t){var n,r;this.endIndex=t,null===(r=(n=this.cbs).onattribute)||void 0===r||r.call(n,this.attribname,this.attribvalue,e===Vl.Double?&#39;&#34;&#39;:e===Vl.Single?&#34;&#39;&#34;:e===Vl.NoValue?void 0:null),this.attribs&amp;&amp;!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&amp;&amp;(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=&#34;&#34;}getInstructionName(e){const t=e.search(ch);let n=t&lt;0?e:e.substr(0,t);return this.lowerCaseTagNames&amp;&amp;(n=n.toLowerCase()),n}ondeclaration(e,t){this.endIndex=t;const n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(n);this.cbs.onprocessinginstruction(`!${e}`,`!${n}`)}this.startIndex=t+1}onprocessinginstruction(e,t){this.endIndex=t;const n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(n);this.cbs.onprocessinginstruction(`?${e}`,`?${n}`)}this.startIndex=t+1}oncomment(e,t,n){var r,i,s,a;this.endIndex=t,null===(i=(r=this.cbs).oncomment)||void 0===i||i.call(r,this.getSlice(e,t-n)),null===(a=(s=this.cbs).oncommentend)||void 0===a||a.call(s),this.startIndex=t+1}oncdata(e,t,n){var r,i,s,a,o,c,l,h,u,p;this.endIndex=t;const f=this.getSlice(e,t-n);this.options.xmlMode||this.options.recognizeCDATA?(null===(i=(r=this.cbs).oncdatastart)||void 0===i||i.call(r),null===(a=(s=this.cbs).ontext)||void 0===a||a.call(s,f),null===(c=(o=this.cbs).oncdataend)||void 0===c||c.call(o)):(null===(h=(l=this.cbs).oncomment)||void 0===h||h.call(l,`[CDATA[${f}]]`),null===(p=(u=this.cbs).oncommentend)||void 0===p||p.call(u)),this.startIndex=t+1}onend(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let e=this.stack.length;e&gt;0;this.cbs.onclosetag(this.stack[--e],!0));}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)}reset(){var e,t,n,r;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname=&#34;&#34;,this.attribname=&#34;&#34;,this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(r=(n=this.cbs).onparserinit)||void 0===r||r.call(n,this),this.buffers.length=0,this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(e){this.reset(),this.end(e)}getSlice(e,t){for(;e-this.bufferOffset&gt;=this.buffers[0].length;)this.shiftBuffer();let n=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);for(;t-this.bufferOffset&gt;this.buffers[0].length;)this.shiftBuffer(),n+=this.buffers[0].slice(0,t-this.bufferOffset);return n}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,new Error(&#34;.write() after done!&#34;)):(this.buffers.push(e),this.tokenizer.running&amp;&amp;(this.tokenizer.write(e),this.writeIndex++))}end(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,Error(&#34;.end() after done!&#34;)):(e&amp;&amp;this.write(e),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&amp;&amp;this.writeIndex&lt;this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&amp;&amp;this.tokenizer.end()}parseChunk(e){this.write(e)}done(e){this.end(e)}}var hh=function(e){return function(t,n,r,i){if(&#34;undefined&#34;!=typeof Buffer&amp;&amp;Buffer.isBuffer(t)&amp;&amp;(t=t.toString()),&#34;string&#34;==typeof t)return e(t,n,r,i);var s=t;if(!Array.isArray(s)&amp;&amp;L(s))return s;var a=new N([]);return Ba(s,a),a}}((function(e,t,n,r){return t.xmlMode||t._useHtmlParser2?function(e,t){const n=new M(void 0,t);return new lh(n,t).end(e),n.root}(e,t):ql(e,t,n,r)})),uh=function(e,t){return function r(s,a,o){if(void 0===o&amp;&amp;(o=!0),null==s)throw new Error(&#34;cheerio.load() expects a string&#34;);var c=no(no({},n),i(a)),l=e(s,c,o,null),h=function(n){function r(){return null!==n&amp;&amp;n.apply(this,arguments)||this}return to(r,n),r.prototype._make=function(e,t){var n=u(e,t);return n.prevObject=this,n},r.prototype._parse=function(t,n,r,i){return e(t,n,r,i)},r.prototype._render=function(e){return t(e,this.options)},r}(Za);function u(t,n,r,s){if(void 0===r&amp;&amp;(r=l),t&amp;&amp;wi(t))return t;var a=no(no({},c),i(s)),o=&#34;string&#34;==typeof r?[e(r,a,!1,null)]:&#34;length&#34;in r?r:[r],u=wi(o)?o:new h(o,null,a);if(u._root=u,!t)return new h(void 0,u,a);var p,f=&#34;string&#34;==typeof t&amp;&amp;Ui(t)?e(t,a,!1,null).children:(p=t).name||&#34;root&#34;===p.type||&#34;text&#34;===p.type||&#34;comment&#34;===p.type?[t]:Array.isArray(t)?t:void 0,d=new h(f,u,a);if(f)return d;if(&#34;string&#34;!=typeof t)throw new Error(&#34;Unexpected type of selector&#34;);var E=t,m=n?&#34;string&#34;==typeof n?Ui(n)?new h([e(n,a,!1,null)],u,a):(E=&#34;&#34;.concat(n,&#34; &#34;).concat(E),u):wi(n)?n:new h(Array.isArray(n)?n:[n],u,a):u;return m?m.find(E):d}return Object.assign(u,xi,{load:r,_root:l,_options:c,fn:h.prototype,prototype:h.prototype}),u}}(hh,(function(e,t){return t.xmlMode||t._useHtmlParser2?V(e,t):function(e){for(var t,n=(&#34;length&#34;in e?e:[e]),r=0;r&lt;n.length;r+=1)L(s=n[r])&amp;&amp;(t=Array.prototype.splice).call.apply(t,Yl([n,r,1],s.children,!1));var i=&#34;&#34;;for(r=0;r&lt;n.length;r+=1){var s;i+=Bl(s=n[r],Wl)}return i}(e)}));function ph(e,t){return He({path:e,json:t})}function fh(e){return He(e)}function dh(e,t){return Ii(e,t)}var Eh=uh([]),mh=Di,Th=Ri,_h=ki,Ah=vi;export{mh as contains,Eh as default,Oi as html,dh as jinja2,ph as jp,fh as jpo,uh as load,Th as merge,_h as parseHTML,Ah as root,Li as text,yi as xml};
</span></code>
							</td>
						</tr>
						
					</tbody>
				</table>
				
			
		</div>
	</div>
</div>


	<div class="i-text-center">
		
				
		
	</div>


<script>
function submitDeleteForm() {
    var message = prompt("delete_confirm_message\n\ndelete_commit_summary", "Delete ''");
    if (message != null) {
        $("#delete-message").val(message);
        $("#delete-file-form").submit()
    }
}
</script>

		
	</div>
	<div id="toListModel">
		<div class="ui modal" id="toShare">
			<i class="close icon black"></i>
			<div class="header">共享</div>
			<div class="content">
				<form autocomplete="off" class="ui form training ignore-dirty">
					
					<div class="fields">
						<p class="px-sm py-none mb-sm">共享页面将在匿名链接下呈现所选的代码和训练结果，不会显示项目的原始链接地址。但Agit系统不会自动处理代码和训练结果，因此如果需要为匿名盲审等场景提供匿名内容，还需要您自行保证代码内容和训练结果的匿名化。</p>
					</div>

					<div class="fields">
						<div class="two wide field required">
							<label>代码分支</label>
						</div>
						<div id="branchField" class="fourteen wide field">

							<div class="fitted item choose">
								<div class="ui floating filter dropdown custom">

									<div class="ui basic small compact button" style="min-width: 200px;" @click="menuVisible = !menuVisible">
										<span class="text">
											<i class="iconfont icon-branch-down"></i>
											<span v-text='isViewBranch?"分支":"目录树"'></span>:
                      <strong v-text='isViewBranch?(selectedBranch?selectedBranch:"请选择"):(selectedTag?selectedTag:"请选择")'></strong>
										</span>
										<i class="dropdown icon" tabIndex="-1"></i>
									</div>

									<div tabindex="-1"  id="scrolling" class="menu transition menu-share" :class="{visible: menuVisible}" v-show="menuVisible" @blur="menuVisible = false">

										<div class="ui icon search input" style="width: 200px;">
											<i class="filter icon"></i>
											<input name="search" v-model="searchTerm" @keydown="keydown($event)" placeholder="过滤分支或标签...">
										</div>

										<div class="header branch-tag-choice">
											<div class="ui grid">
												<div class="two column row">
													<a class="reference column" href="javascript:;" @click="handleBranchTab(true)">
														<span class="text" :class="{black: !isViewBranch}">
															<i class="iconfont icon-branch-down"></i>
															分支列表
														</span>
													</a>
													<a class="reference column" href="javascript:;" @click="handleBranchTab(false)">
														<span class="text" :class="{black: isViewBranch}">
															<i class="reference tags icon"></i>
															标签列表
														</span>
													</a>
												</div>
											</div>
										</div>

										<div v-show="isViewBranch" class="scrolling menu" ref="scrollContainer">
											<div v-for="(item, index) in branches" v-show="item.name.includes(searchTerm)" :key="item.name" class="item" @click="handleBranchOrTag(item)">
												<span v-text="item.name"></span>
											</div>
										</div>
										<div v-show="!isViewBranch" class="scrolling menu" ref="scrollContainer">
											<div v-for="(item, index) in tags" v-show="item.name.includes(searchTerm)" :key="item.name" class="item" @click="handleBranchOrTag(item)">
												<span v-text="item.name"></span>
											</div>
										</div>

										<div class="message" v-if="(isViewBranch && branches.length==0) || (!isViewBranch && tags.length==0)">未找到结果</div>
									</div>

									<div class="ui pointing red basic label" style="display:none;">
										请选择分支或标签
									</div>

								</div>
							</div>
						</div>
					</div>

					<div class="fields" v-show="selectedBranch">
						<div class="two wide field">
							<label>提交</label>
						</div>
						<div id="commitWrap" class="fourteen wide field">
							<select class="ui search selection dropdown commit-wrap" name="commit">
								<option value=""></option>
							</select>
						</div>
					</div>
					<div class="fields">
						<label class="two wide field  required">共享标题</label>
						<div class="fourteen wide field trainName-filed">
							<input v-model="shareName" type="text" name="shareName"  class="form-trainName" :maxlength="16"  placeholder="请输入标题内容，最多16个字符">
						</div>
					</div>
					<div class="ui grid uioption">
						<label class="required">链接有效期</label>
					</div>
					<div class="ui grid fields">
						<div class="thirteen wide column">
							<div class="ui four item stackable tabs menu ui-link-bg">
								<a v-for="(item, index) in shareTimeList" :key="index" :class="['item', activeIdx === item.shareTimeId ? 'active' : '']" data-tab="oneday" @click="handleMenuChange(item)">
									<span v-text="formatLinkTime(item.shareTimeName)"></span></a>
							</div>
						</div>
						<div class="right aligned three wide column action mt-3xs">
							<button class="ui primary button" @click="handleLink">
								生成链接</button>
						</div>
					</div>
				</form>
			</div>
		</div>
		<div class="ui modal" id="toCopyShareLink">
			<i class="close icon black"></i>
			<div class="header">共享链接已生成</div>
			<div class="content ui form">
				<div class="fields">
					<div class="two wide field">
						<label>链接地址:</label>
					</div>
					<div  class="fourteen wide field">
						<p v-text="linkAddress" id="share_url"></p>
					</div>
				</div>
				<div class="fields uioption">
					<div class="two wide field">
					<label>链接有效期:</label>
					</div>
					<div class="fourteen wide field">
						<p v-text="linkExDate"></p>
					</div>
				</div>
				<div class="fields uioption">
							<div class="sixteen wide field" style="text-align: right">
								<button class="ui basic icon button poping primary up clipboard share-button" id="share-button" data-original="复制链接" data-success="已复制链接" data-error="请按下 ⌘-C 或 Ctrl-C 复制" data-content="复制链接" data-variation="inverted tiny"  data-clipboard-target="#share_url">
									复制
								</button>
							</div>
				</div>

			</div>
		</div>
	</div>

</div>
<div class="content">
	<p></p>
</div>
</div>
</div>




		

		</div>

		

		<footer>
	<div class="base-footer-content i-footer mx-auto">
		<div class="ui left">
			<div class="p-logo i-flex i-align-center">
				<img class="logo-icon" src="/img/logo/logo.svg">
				<i class="logo-text">&copy; 2023 Agit Cloud Computing, Ltd.</i>
				<a  id="version-a" style="margin-right: 16px; text-decoration: underline; font-size: 12px;" target="_blank" href="https://agit.ai/AgitDeveloper/AgitPythonExamples/wiki"></a>
			</div>
		</div>
		<div class="ui right links p-logo">
			<a style="margin-right: 16px; text-decoration: underline; font-size: 12px;" target="_blank" href="/agreement/terms">服务协议</a>
<a style="margin-right: 16px; text-decoration: underline; font-size: 12px;" target="_blank" href="/agreement/privacy">隐私政策</a>
<a style="text-decoration: underline; font-size: 12px; margin-right: 16px;" target="_blank" href="/opensource">开源软件</a>
<a style="text-decoration: underline; font-size: 12px;" target="_blank" id="help-a" target="_blank" href="http://help.agit.ai/">帮助</a>

		</div>
	</div>
</footer>



		

		
		
		
		<script src="/js/index.js?v=220846678a86246c9d7e7c46c21f20c2"></script>

		<script src="/vendor/plugins/vue/vue.min.js"></script>
<script src="/minifyjs/head_navbar.base.js?v=220846678a86246c9d7e7c46c21f20c2"></script>
<script src="/minifyjs/footer_content.base.js?v=220846678a86246c9d7e7c46c21f20c2"></script>


<script src="/vendor/plugins/promise-polyfill/polyfill.min.js"></script>
<script src="/vendor/plugins/cssrelpreload/loadCSS.min.js"></script>
<script src="/vendor/plugins/cssrelpreload/cssrelpreload.min.js"></script>
<script src="/vendor/plugins/vue-infinite-loading/vue-infinite-loading.js?v=220846678a86246c9d7e7c46c21f20c2"></script>
<script src="/vendor/plugins/Qrcode/qrcode.min.js?v=220846678a86246c9d7e7c46c21f20c2"></script>
<script src="/vendor/plugins/i-components/i.components.min.js?v=220846678a86246c9d7e7c46c21f20c2"></script>

<script src="/vendor/plugins/vue-node-spec/node-spec.min.js?v=220846678a86246c9d7e7c46c21f20c2"></script>
<script src="/vendor/plugins/jquery-migrate/jquery-migrate.min.js?v=3.0.1"></script>
<script src="/vendor/plugins/jquery.areyousure/jquery.are-you-sure.js"></script>
<script src="/vendor/plugins/emojify/emojify.custom.js"></script>
<script src="/vendor/plugins/xterm/xterm.js"></script>









	</body>
	</html>

<script>
$("#createTraining").click(function(){

	$api.trainReachUpperLimit({repoId:Number($('.repo-id').text())}).then(data => {
        if (!data) return;
		if(data.isUpperLimit){
			$ITools.handleToast('error', $i18n.tr('code', 'trainCountLimit'))
			return
		}

		const mode = $("#branchSelect").attr("data-mode"),
	      	branch = $("#branchSelect").find("strong").text();
		let path = ""
		$(".repo-path a").each(function(index,item){
			if(index === 0){
				return
			}
			path += path === ""?$(this).attr("title"):("/"+$(this).attr("title"))
		})
		const params={
			scriptPath: $(".repo-path").find(".active.section").attr("title"),
			workSpace: path,
			branchName: mode === "branches" ? branch : "",
			tagName: mode === "branches" ? "" : branch
		}
		window.location.href = window.location.origin + $('.repo-url').text() + '/training/create?scriptFile=' + escapePound(JSON.stringify(params))
      })


})
function toUpload(el) {

const tempSplit = $("#RepoSize").text().split("GB")


if (tempSplit.length === 2 && tempSplit[0] >= 1) {
	$ITools.handleToast('error', $i18n.tr('valid', 'fileSizeLimit'))
	return
}
window.location.href = $(el).attr("data-href")
}
function handleShare() {
$('#toShare').modal('show')
}
function shareLink() {
$('#toCopyShareLink').modal('show')
}
function escapePound(str){
	let res=""
	res=str.replaceAll("%","%25")
	res=res.replaceAll("#","%23")
	res=res.replaceAll(" ","%20")
	res=res.replaceAll("?","%3F")
	return res
}
</script>

<script src="/minifyjs/auth.js?v=220846678a86246c9d7e7c46c21f20c2"></script>
<script src="/minifyjs/repo_home.js?v=220846678a86246c9d7e7c46c21f20c2"></script>

